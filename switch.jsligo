// - Things to test: break, return, fallthrough
// - combinations:
//   - all break
//   - all return
//   - all fallthrough
//   - break  + return      + default(break)
//   - break  + return      + default(return)
//   - break  + fallthrough + default(break)
//   - break  + fallthrough + default(return)
//   - return + fallthrough + default(break)
//   - return + fallthrough + default(return)

// all break
let _ = (n : int) : string => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
            break;
        case 2: 
            output = output + "Two ";
            break;
        case 3: 
            output = output + " Three ";
            break;
        default: 
            output = "Not found";
            break; // This break does not serve any purpose
    }
    return output;
}

// all return
let _ = (n : int) : unit => {
    let output = "";
    switch (n) {
        case 1: 
            return "One";
        case 2: 
            return "Two ";
        case 3: 
            return "Three";
        default: 
            return "Not found";
    }
    return output; // This return does not serve any purpose
}

// all fallthrough
let _ = (n : int) : string => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
        case 2: 
            output = output + "Two ";
        case 3: 
            output = output + " Three ";
        default: 
            output = "Not found";
    }
    return output;
}

// break + return + default(break)
let _ = (n : int) : unit => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
            break;
        case 2: 
            output = output + "Two ";
            break;
        case 3: 
            return "Three";
        default: 
            output = "Not found";
    }
    return output;
}

// break + return + default(return)
let _ = (n : int) : unit => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
            break;
        case 2: 
            output = output + "Two ";
            break;
        case 3: 
            return "Three";
        default: 
            output = "Not found";
            return output;
    }
    return output;
}

let _ = (n : int) : unit => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
            break;
        case 2: 
            return "Two";
        case 3: 
            output = output + "Three ";
            break;
        default: 
            output = "Not found";
            return output;
    }
    return output;
}

// break + fallthrough + default(break)
let _ = (n : int) : unit => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
        case 2: 
            output = output + "Two ";
            break;
        case 3: 
            return "Three";
        default: 
            output = "Not found";
    }
    return output;
}

// break + fallthrough + default(return)
let _ = (n : int) : unit => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
        case 2: 
            output = output + "Two ";
            break;
        case 3: 
            return "Three";
        default: 
            output = "Not found";
            return output;
    }
    return output;
}

// return + fallthrough + default(break)
let _ = (n : int) : string => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
        case 2: 
            output = output + "Two ";
            return output;
        case 3: 
            output = output + " Three ";
        default: 
            output = "Not found";
    }
    return output;
}

// return + fallthrough + default(return)
let _ = (n : int) : string => {
    let output = "";
    switch (n) {
        case 1: 
            output = output + "One ";
        case 2: 
            output = output + "Two ";
            return output;
        case 3: 
            output = output + " Three ";
        default: 
            output = "Not found";
            return output;
    }
    let foo = 1;
    return output;
}
