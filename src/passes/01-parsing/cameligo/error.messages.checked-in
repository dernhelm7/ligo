contract: Type Ident EQ VBAR Attr With
##
## Ends in an error in state: 37.
##
## variant -> nseq(Attr) . Constr [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## variant -> nseq(Attr) . Constr Of fun_type [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 36, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

Ill-formed variant.
At this point, if the attributes are complete, a data constructor is
expected.

contract: Type Ident EQ Attr Constr Of With
##
## Ends in an error in state: 39.
##
## variant -> nseq(Attr) Constr Of . fun_type [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr Of
##

Ill-formed variant.
At this point, a type other than a sum type or a record is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the type.

interactive_expr: Begin Fun WILD ARROW Bytes SEMI
##
## Ends in an error in state: 507.
##
## sequence -> Begin option(series) . End [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Begin option(series)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 480, spurious reduction of production seq_expr -> disj_expr_level
## In state 449, spurious reduction of production last_expr -> seq_expr
## In state 496, spurious reduction of production fun_expr(last_expr) -> Fun nseq(irrefutable) ARROW last_expr
## In state 492, spurious reduction of production last_expr -> fun_expr(last_expr)
## In state 491, spurious reduction of production series -> last_expr
## In state 506, spurious reduction of production option(series) -> series
##

Ill-formed sequence of expressions.
At this point, if the expression is complete, one of the following is
expected:
  * a semicolon ';' followed by another expression;
  * the keyword 'end' if the sequence is complete.

interactive_expr: Begin If Verbatim Then Verbatim Else With
##
## Ends in an error in state: 479.
##
## if_then_else(seq_expr) -> If expr Then closed_if Else . seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if Else
##

Ill-formed conditional expression.
At this point, the expression of the 'else' branch is expected.

interactive_expr: Begin Match Verbatim With WILD ARROW Fun WILD ARROW With
##
## Ends in an error in state: 450.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding In base_cond [ VBAR ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding In base_cond [ VBAR ]
## let_in_sequence -> seq(Attr) . Let let_binding In series [ End ]
## let_in_sequence -> seq(Attr) . Let Rec let_binding In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 448, spurious reduction of production seq(Attr) ->
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW With
##
## Ends in an error in state: 397.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_if_then_else) -> seq(Attr) . Let let_binding In base_if_then_else [ Else ]
## let_expr(base_if_then_else) -> seq(Attr) . Let Rec let_binding In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 344, spurious reduction of production seq(Attr) ->
##
interactive_expr: Begin With
##
## Ends in an error in state: 484.
##
## let_in_sequence -> seq(Attr) . Let let_binding In series [ End ]
## let_in_sequence -> seq(Attr) . Let Rec let_binding In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 213, spurious reduction of production seq(Attr) ->
##
interactive_expr: Begin If Verbatim Then With
##
## Ends in an error in state: 468.
##
## let_expr(closed_if) -> seq(Attr) . Let let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) . Let Rec let_binding In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production seq(Attr) ->
##
interactive_expr: If Verbatim Then With
##
## Ends in an error in state: 525.
##
## let_expr(closed_if) -> seq(Attr) . Let let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) . Let Rec let_binding In closed_if [ Else ]
## let_expr(expr) -> seq(Attr) . Let let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(expr) -> seq(Attr) . Let Rec let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 512, spurious reduction of production seq(Attr) ->
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then With
##
## Ends in an error in state: 355.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(closed_if) -> seq(Attr) . Let let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) . Let Rec let_binding In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 431, spurious reduction of production seq(Attr) ->
##
interactive_expr: Match Verbatim With WILD ARROW Let WILD EQ Bytes In With
##
## Ends in an error in state: 435.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 442, spurious reduction of production seq(Attr) ->
##
interactive_expr: With
##
## Ends in an error in state: 231.
##
## let_expr(expr) -> seq(Attr) . Let let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(expr) -> seq(Attr) . Let Rec let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 611, spurious reduction of production seq(Attr) ->
##
contract: With
##
## Ends in an error in state: 76.
##
## let_declaration -> seq(Attr) . Let let_binding [ Type Let EOF Attr ]
## let_declaration -> seq(Attr) . Let Rec let_binding [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 0, spurious reduction of production seq(Attr) ->
##

Ill-formed value declaration.
At this point, if the attributes (if any) are complete, the keyword
'let' is expected.

interactive_expr: Begin If Verbatim Then If Verbatim Then Verbatim COMMA Bytes With
##
## Ends in an error in state: 476.
##
## if_then_else(closed_if) -> If expr Then closed_if . Else closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 303, spurious reduction of production nsepseq(disj_expr_level,COMMA) -> disj_expr_level
## In state 302, spurious reduction of production tuple(disj_expr_level) -> disj_expr_level COMMA nsepseq(disj_expr_level,COMMA)
## In state 230, spurious reduction of production tuple_expr -> tuple(disj_expr_level)
## In state 467, spurious reduction of production base_expr(closed_if) -> tuple_expr
## In state 372, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 371, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: Begin If Verbatim Then Verbatim COMMA Bytes With
##
## Ends in an error in state: 478.
##
## if_then_else(seq_expr) -> If expr Then closed_if . Else seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 303, spurious reduction of production nsepseq(disj_expr_level,COMMA) -> disj_expr_level
## In state 302, spurious reduction of production tuple(disj_expr_level) -> disj_expr_level COMMA nsepseq(disj_expr_level,COMMA)
## In state 230, spurious reduction of production tuple_expr -> tuple(disj_expr_level)
## In state 467, spurious reduction of production base_expr(closed_if) -> tuple_expr
## In state 372, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 371, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: Begin If Verbatim Then Verbatim With
##
## Ends in an error in state: 473.
##
## base_expr(closed_if) -> disj_expr_level . [ Else ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ Or Else COMMA BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ Or Else COMMA BOOL_OR ]
## tuple(disj_expr_level) -> disj_expr_level . COMMA nsepseq(disj_expr_level,COMMA) [ Else ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
##

Ill-formed conditional expression.
At this point, if the expression of the branch 'then' is complete, the
keyword 'else' is expected, followed by an expression.

interactive_expr: Begin If Verbatim Then If Verbatim With
##
## Ends in an error in state: 462.
##
## if_then_else(closed_if) -> If expr . Then closed_if Else closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Begin If Verbatim With
##
## Ends in an error in state: 459.
##
## if_then_else(seq_expr) -> If expr . Then closed_if Else seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Begin Match Verbatim With WILD ARROW If Verbatim With
##
## Ends in an error in state: 337.
##
## if_then(base_cond) -> If expr . Then base_cond [ VBAR ]
## if_then_else(base_cond) -> If expr . Then closed_if Else base_cond [ VBAR ]
## if_then_else(seq_expr) -> If expr . Then closed_if Else seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: If Verbatim Then If Verbatim With
##
## Ends in an error in state: 519.
##
## if_then(expr) -> If expr . Then expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## if_then_else(closed_if) -> If expr . Then closed_if Else closed_if [ Else ]
## if_then_else(expr) -> If expr . Then closed_if Else expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW If Verbatim With
##
## Ends in an error in state: 346.
##
## if_then(base_cond) -> If expr . Then base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## if_then_else(base_cond) -> If expr . Then closed_if Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## if_then_else(base_if_then_else) -> If expr . Then closed_if Else base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: If Verbatim With
##
## Ends in an error in state: 511.
##
## if_then(expr) -> If expr . Then expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## if_then_else(expr) -> If expr . Then closed_if Else expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then If Verbatim With
##
## Ends in an error in state: 349.
##
## if_then(base_cond) -> If expr . Then base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## if_then_else(base_cond) -> If expr . Then closed_if Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## if_then_else(closed_if) -> If expr . Then closed_if Else closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim With
##
## Ends in an error in state: 430.
##
## if_then(base_cond) -> If expr . Then base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## if_then_else(base_cond) -> If expr . Then closed_if Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed conditional expression.
At this point, if the condition is complete, the keyword 'then' is
expected, followed by an expression.

interactive_expr: Begin If Verbatim Then Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 471.
##
## let_expr(closed_if) -> seq(Attr) Let Rec let_binding . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 487.
##
## let_in_sequence -> seq(Attr) Let Rec let_binding . In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin Match Verbatim With WILD ARROW Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 453.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . In base_cond [ VBAR ]
## let_in_sequence -> seq(Attr) Let Rec let_binding . In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: If Verbatim Then Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 528.
##
## let_expr(closed_if) -> seq(Attr) Let Rec let_binding . In closed_if [ Else ]
## let_expr(expr) -> seq(Attr) Let Rec let_binding . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 400.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_if_then_else) -> seq(Attr) Let Rec let_binding . In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 234.
##
## let_expr(expr) -> seq(Attr) Let Rec let_binding . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 358.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(closed_if) -> seq(Attr) Let Rec let_binding . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Match Verbatim With WILD ARROW Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 438.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin If Verbatim Then Let WILD EQ Bytes With
##
## Ends in an error in state: 474.
##
## let_expr(closed_if) -> seq(Attr) Let let_binding . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin Let WILD EQ Bytes With
##
## Ends in an error in state: 493.
##
## let_in_sequence -> seq(Attr) Let let_binding . In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin Match Verbatim With WILD ARROW Let WILD EQ Bytes With
##
## Ends in an error in state: 498.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . In base_cond [ VBAR ]
## let_in_sequence -> seq(Attr) Let let_binding . In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Let WILD EQ Bytes With
##
## Ends in an error in state: 409.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_if_then_else) -> seq(Attr) Let let_binding . In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: If Verbatim Then Let WILD EQ Bytes With
##
## Ends in an error in state: 531.
##
## let_expr(closed_if) -> seq(Attr) Let let_binding . In closed_if [ Else ]
## let_expr(expr) -> seq(Attr) Let let_binding . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Let WILD EQ Bytes With
##
## Ends in an error in state: 318.
##
## let_expr(expr) -> seq(Attr) Let let_binding . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Let WILD EQ Bytes With
##
## Ends in an error in state: 376.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(closed_if) -> seq(Attr) Let let_binding . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Match Verbatim With WILD ARROW Let WILD EQ Bytes With
##
## Ends in an error in state: 441.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 317, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

Ill-formed value declaration.
At this point, if the right-hand side of the declaration is a complete
expression, the keyword 'in' is expected, followed by an expression.

interactive_expr: Begin If Verbatim Then Let Rec With
##
## Ends in an error in state: 470.
##
## let_expr(closed_if) -> seq(Attr) Let Rec . let_binding In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##
interactive_expr: Begin Match Verbatim With WILD ARROW Let Rec With
##
## Ends in an error in state: 452.
##
## let_expr(base_cond) -> seq(Attr) Let Rec . let_binding In base_cond [ VBAR ]
## let_in_sequence -> seq(Attr) Let Rec . let_binding In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##
interactive_expr: Begin Let Rec With
##
## Ends in an error in state: 486.
##
## let_in_sequence -> seq(Attr) Let Rec . let_binding In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##
interactive_expr: If Verbatim Then Let Rec With
##
## Ends in an error in state: 527.
##
## let_expr(closed_if) -> seq(Attr) Let Rec . let_binding In closed_if [ Else ]
## let_expr(expr) -> seq(Attr) Let Rec . let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Let Rec With
##
## Ends in an error in state: 399.
##
## let_expr(base_cond) -> seq(Attr) Let Rec . let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_if_then_else) -> seq(Attr) Let Rec . let_binding In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##
interactive_expr: Let Rec With
##
## Ends in an error in state: 233.
##
## let_expr(expr) -> seq(Attr) Let Rec . let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Let Rec With
##
## Ends in an error in state: 357.
##
## let_expr(base_cond) -> seq(Attr) Let Rec . let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(closed_if) -> seq(Attr) Let Rec . let_binding In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##
interactive_expr: Match Verbatim With WILD ARROW Let Rec With
##
## Ends in an error in state: 437.
##
## let_expr(base_cond) -> seq(Attr) Let Rec . let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##
contract: Let Rec With
##
## Ends in an error in state: 79.
##
## let_declaration -> seq(Attr) Let Rec . let_binding [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

Ill-formed recursive value declaration.
At this point, an irrefutable pattern is expected, for instance an
identifier for the value being defined.

interactive_expr: Begin If Verbatim Then Let With
##
## Ends in an error in state: 469.
##
## let_expr(closed_if) -> seq(Attr) Let . let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) Let . Rec let_binding In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##
interactive_expr: Begin Let With
##
## Ends in an error in state: 485.
##
## let_in_sequence -> seq(Attr) Let . let_binding In series [ End ]
## let_in_sequence -> seq(Attr) Let . Rec let_binding In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##
interactive_expr: Begin Match Verbatim With WILD ARROW Let With
##
## Ends in an error in state: 451.
##
## let_expr(base_cond) -> seq(Attr) Let . let_binding In base_cond [ VBAR ]
## let_expr(base_cond) -> seq(Attr) Let . Rec let_binding In base_cond [ VBAR ]
## let_in_sequence -> seq(Attr) Let . let_binding In series [ End ]
## let_in_sequence -> seq(Attr) Let . Rec let_binding In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Let With
##
## Ends in an error in state: 398.
##
## let_expr(base_cond) -> seq(Attr) Let . let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_cond) -> seq(Attr) Let . Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_if_then_else) -> seq(Attr) Let . let_binding In base_if_then_else [ Else ]
## let_expr(base_if_then_else) -> seq(Attr) Let . Rec let_binding In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##
interactive_expr: If Verbatim Then Let With
##
## Ends in an error in state: 526.
##
## let_expr(closed_if) -> seq(Attr) Let . let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) Let . Rec let_binding In closed_if [ Else ]
## let_expr(expr) -> seq(Attr) Let . let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(expr) -> seq(Attr) Let . Rec let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##
interactive_expr: Let With
##
## Ends in an error in state: 232.
##
## let_expr(expr) -> seq(Attr) Let . let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(expr) -> seq(Attr) Let . Rec let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Let With
##
## Ends in an error in state: 356.
##
## let_expr(base_cond) -> seq(Attr) Let . let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_cond) -> seq(Attr) Let . Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(closed_if) -> seq(Attr) Let . let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) Let . Rec let_binding In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##
interactive_expr: Match Verbatim With WILD ARROW Let With
##
## Ends in an error in state: 436.
##
## let_expr(base_cond) -> seq(Attr) Let . let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## let_expr(base_cond) -> seq(Attr) Let . Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##
contract: Let With
##
## Ends in an error in state: 77.
##
## let_declaration -> seq(Attr) Let . let_binding [ Type Let EOF Attr ]
## let_declaration -> seq(Attr) Let . Rec let_binding [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

Ill-formed value declaration.
At this point, one of the following is expected:
  * an irrefutable pattern, for instance an identifier denoting the
    value being defined.
  * the 'rec' keyword if the declaration is recursive.

interactive_expr: Begin If Verbatim Then Match Verbatim Type
##
## Ends in an error in state: 340.
##
## match_expr(base_if_then_else) -> Match expr . With option(VBAR) cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Begin Match Verbatim Type
##
## Ends in an error in state: 321.
##
## match_expr(last_expr) -> Match expr . With option(VBAR) cases(last_expr) [ End ]
##
## The known suffix of the stack is as follows:
## Match expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Match Verbatim Type
##
## Ends in an error in state: 592.
##
## match_expr(base_cond) -> Match expr . With option(VBAR) cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## Match expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: If Verbatim Then Match Verbatim Type
##
## Ends in an error in state: 514.
##
## match_expr(base_cond) -> Match expr . With option(VBAR) cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## match_expr(base_if_then_else) -> Match expr . With option(VBAR) cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed pattern matching.
At this point, if the expression whose value is matched is complete,
then the keyword 'with' is expected, followed by matching cases.

interactive_expr: Begin Match Verbatim With WILD ARROW Verbatim With
##
## Ends in an error in state: 502.
##
## cases(base_cond) -> cases(base_cond) . VBAR case_clause(base_cond) [ VBAR ]
## cases(last_expr) -> cases(base_cond) . VBAR case_clause(last_expr) [ End ]
##
## The known suffix of the stack is as follows:
## cases(base_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 445, spurious reduction of production base_expr(base_cond) -> disj_expr_level
## In state 373, spurious reduction of production base_cond__open(base_cond) -> base_expr(base_cond)
## In state 374, spurious reduction of production base_cond -> base_cond__open(base_cond)
## In state 415, spurious reduction of production case_clause(base_cond) -> pattern ARROW base_cond
## In state 423, spurious reduction of production cases(base_cond) -> case_clause(base_cond)
##
interactive_expr: Begin If Verbatim Then Match Verbatim With WILD ARROW Bytes With
##
## Ends in an error in state: 418.
##
## cases(base_cond) -> cases(base_cond) . VBAR case_clause(base_cond) [ VBAR ]
## cases(base_if_then_else) -> cases(base_cond) . VBAR case_clause(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## cases(base_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 405, spurious reduction of production base_expr(base_cond) -> disj_expr_level
## In state 373, spurious reduction of production base_cond__open(base_cond) -> base_expr(base_cond)
## In state 374, spurious reduction of production base_cond -> base_cond__open(base_cond)
## In state 415, spurious reduction of production case_clause(base_cond) -> pattern ARROW base_cond
## In state 423, spurious reduction of production cases(base_cond) -> case_clause(base_cond)
##

Ill-formed pattern matching.
At this point, if the case is complete, a vertical bar '|' is
expected, followed by another case starting with a pattern.

interactive_expr: Begin Match Verbatim With WILD CONS Bytes SEMI
##
## Ends in an error in state: 334.
##
## case_clause(base_cond) -> pattern . ARROW base_cond [ VBAR ]
## case_clause(last_expr) -> pattern . ARROW last_expr [ End ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production tail -> sub_pattern
## In state 328, spurious reduction of production pattern -> sub_pattern CONS tail
##
interactive_expr: If Verbatim Then Match Verbatim With WILD CONS Bytes SEMI
##
## Ends in an error in state: 343.
##
## case_clause(base_cond) -> pattern . ARROW base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## case_clause(base_if_then_else) -> pattern . ARROW base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production tail -> sub_pattern
## In state 328, spurious reduction of production pattern -> sub_pattern CONS tail
##
interactive_expr: Match Verbatim With WILD CONS Bytes SEMI
##
## Ends in an error in state: 595.
##
## case_clause(base_cond) -> pattern . ARROW base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production tail -> sub_pattern
## In state 328, spurious reduction of production pattern -> sub_pattern CONS tail
##

Ill-formed pattern matching.
At this point, if the pattern is complete, an arrow '->' is expected,
followed by the right-hand side of the case as an expression.

interactive_expr: Begin If Verbatim Then Match Verbatim With With
##
## Ends in an error in state: 341.
##
## match_expr(base_if_then_else) -> Match expr With . option(VBAR) cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr With
##
interactive_expr: Begin Match Verbatim With WILD ARROW Bytes VBAR With
##
## Ends in an error in state: 503.
##
## cases(base_cond) -> cases(base_cond) VBAR . case_clause(base_cond) [ VBAR ]
## cases(last_expr) -> cases(base_cond) VBAR . case_clause(last_expr) [ End ]
##
## The known suffix of the stack is as follows:
## cases(base_cond) VBAR
##
interactive_expr: Begin If Verbatim Then Match Verbatim With VBAR Begin
##
## Ends in an error in state: 342.
##
## match_expr(base_if_then_else) -> Match expr With option(VBAR) . cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr With option(VBAR)
##
interactive_expr: Begin Match Verbatim With VBAR Begin
##
## Ends in an error in state: 324.
##
## match_expr(last_expr) -> Match expr With option(VBAR) . cases(last_expr) [ End ]
##
## The known suffix of the stack is as follows:
## Match expr With option(VBAR)
##
interactive_expr: Begin Match Verbatim With With
##
## Ends in an error in state: 322.
##
## match_expr(last_expr) -> Match expr With . option(VBAR) cases(last_expr) [ End ]
##
## The known suffix of the stack is as follows:
## Match expr With
##
interactive_expr: If Verbatim Then Match Verbatim With With
##
## Ends in an error in state: 515.
##
## match_expr(base_cond) -> Match expr With . option(VBAR) cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## match_expr(base_if_then_else) -> Match expr With . option(VBAR) cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr With
##
interactive_expr: If Verbatim Then Match Verbatim With VBAR Begin
##
## Ends in an error in state: 516.
##
## match_expr(base_cond) -> Match expr With option(VBAR) . cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## match_expr(base_if_then_else) -> Match expr With option(VBAR) . cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr With option(VBAR)
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Bytes VBAR With
##
## Ends in an error in state: 419.
##
## cases(base_cond) -> cases(base_cond) VBAR . case_clause(base_cond) [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## cases(base_if_then_else) -> cases(base_cond) VBAR . case_clause(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## cases(base_cond) VBAR
##
interactive_expr: Match Verbatim With VBAR Begin
##
## Ends in an error in state: 594.
##
## match_expr(base_cond) -> Match expr With option(VBAR) . cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## Match expr With option(VBAR)
##
interactive_expr: Match Verbatim With WILD ARROW Bytes VBAR With
##
## Ends in an error in state: 598.
##
## cases(base_cond) -> cases(base_cond) VBAR . case_clause(base_cond) [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## cases(base_cond) VBAR
##
interactive_expr: Match Verbatim With With
##
## Ends in an error in state: 593.
##
## match_expr(base_cond) -> Match expr With . option(VBAR) cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## Match expr With
##

Ill-formed pattern matching.
At this point, a case is expected to start with a pattern.

interactive_expr: Begin Verbatim With
##
## Ends in an error in state: 480.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ SEMI Or End BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ SEMI Or End BOOL_OR ]
## seq_expr -> disj_expr_level . [ SEMI End ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
##

Ill-formed sequence of expressions.
At this point, if the expression is complete, one of the following is
expected:
  * a semicolon ';' followed by another expression;
  * the keyword 'end' if the sequence is complete.

interactive_expr: C_Some With
##
## Ends in an error in state: 215.
##
## constr_expr -> C_Some . core_expr [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE In GT GE End Else EQ EOF CONS COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## C_Some
##

Ill-formed application to the predefined data constructor 'Some'.
At this point, its argument is expected as an expression.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the complete argument.

interactive_expr: Constr DOT With
##
## Ends in an error in state: 205.
##
## module_field -> Constr DOT . module_fun [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
## projection -> Constr DOT . Ident DOT nsepseq(selection,DOT) [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##
interactive_expr: LBRACE Constr DOT With
##
## Ends in an error in state: 541.
##
## projection -> Constr DOT . Ident DOT nsepseq(selection,DOT) [ With EQ ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed selection in a module.
At this point, the name of a value defined in the module is expected.

contract: Type Ident EQ Constr DOT With
##
## Ends in an error in state: 11.
##
## core_type -> Constr DOT . Ident [ VBAR Type TIMES SEMI RPAR RBRACE Let Ident EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed selection in a module.
At this point, the name of a type defined in the module is expected.

interactive_expr: Fun WILD RPAR
##
## Ends in an error in state: 382.
##
## nseq(irrefutable) -> irrefutable . seq(irrefutable) [ ARROW ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 151, spurious reduction of production irrefutable -> sub_irrefutable
##
interactive_expr: Fun WILD WILD RPAR
##
## Ends in an error in state: 384.
##
## seq(irrefutable) -> irrefutable . seq(irrefutable) [ ARROW ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 151, spurious reduction of production irrefutable -> sub_irrefutable
##

Ill-formed function expression.
At this point, if the parameter is complete, one of the following is
expected:
  * another parameter as an irrefutable pattern (for instance, a
    variable);
  * an arrow '->' followed by the function body as an expression, if
    there are no more parameters.

interactive_expr: Constr DOT Ident DOT With
##
## Ends in an error in state: 208.
##
## projection -> Constr DOT Ident DOT . nsepseq(selection,DOT) [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident DOT
##
interactive_expr: Ident DOT Int DOT With
##
## Ends in an error in state: 197.
##
## nsepseq(selection,DOT) -> selection DOT . nsepseq(selection,DOT) [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## selection DOT
##
interactive_expr: Ident DOT With
##
## Ends in an error in state: 193.
##
## projection -> Ident DOT . nsepseq(selection,DOT) [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Ident DOT
##

Ill-formed selection in a record or a tuple.
At this point, one of the following is expected:
  * the name of a record field;
  * the index of a component in a tuple, '0' denoting the first
    component.

interactive_expr: Begin Fun With
##
## Ends in an error in state: 481.
##
## fun_expr(last_expr) -> Fun . nseq(irrefutable) ARROW last_expr [ End ]
##
## The known suffix of the stack is as follows:
## Fun
##
interactive_expr: Begin Match Verbatim With WILD ARROW Fun With
##
## Ends in an error in state: 446.
##
## fun_expr(base_cond) -> Fun . nseq(irrefutable) ARROW base_cond [ VBAR ]
## fun_expr(last_expr) -> Fun . nseq(irrefutable) ARROW last_expr [ End ]
##
## The known suffix of the stack is as follows:
## Fun
##
interactive_expr: Fun With
##
## Ends in an error in state: 200.
##
## fun_expr(expr) -> Fun . nseq(irrefutable) ARROW expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## Fun
##
interactive_expr: If Verbatim Then Fun With
##
## Ends in an error in state: 521.
##
## fun_expr(closed_if) -> Fun . nseq(irrefutable) ARROW closed_if [ Else ]
## fun_expr(expr) -> Fun . nseq(irrefutable) ARROW expr [ With Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## Fun
##
interactive_expr: Begin If Verbatim Then Fun With
##
## Ends in an error in state: 464.
##
## fun_expr(closed_if) -> Fun . nseq(irrefutable) ARROW closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## Fun
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Fun With
##
## Ends in an error in state: 393.
##
## fun_expr(base_cond) -> Fun . nseq(irrefutable) ARROW base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## fun_expr(base_if_then_else) -> Fun . nseq(irrefutable) ARROW base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## Fun
##
interactive_expr: Match Verbatim With WILD ARROW Fun With
##
## Ends in an error in state: 426.
##
## fun_expr(base_cond) -> Fun . nseq(irrefutable) ARROW base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## Fun
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Fun With
##
## Ends in an error in state: 351.
##
## fun_expr(base_cond) -> Fun . nseq(irrefutable) ARROW base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In EOF COLON Attr ]
## fun_expr(closed_if) -> Fun . nseq(irrefutable) ARROW closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## Fun
##

Ill-formed function expression.
At this point, the first parameter is expected as an irrefutable
pattern, for example a variable.

interactive_expr: LBRACE Constr DOT Ident With
##
## Ends in an error in state: 542.
##
## projection -> Constr DOT Ident . DOT nsepseq(selection,DOT) [ With EQ ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident
##

Ill-formed selection in a record or a tuple.
At this point, the selection operator '.' is expected, and one of
following comes after:
  * the name of a record field;
  * the index of a component in a tuple, '0' denoting the first
    component.

interactive_expr: LBRACE Ident DOT Ident Verbatim
##
## Ends in an error in state: 546.
##
## update_record -> LBRACE path . With sep_or_term_list(field_path_assignment,SEMI) RBRACE [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 196, spurious reduction of production nsepseq(selection,DOT) -> selection
## In state 199, spurious reduction of production projection -> Ident DOT nsepseq(selection,DOT)
## In state 545, spurious reduction of production path -> projection
##

Ill-formed record update.
At this point, if name of the record is fully qualified, then the
keyword 'with' is expected, followed by field updates (assignments)
separated by semicolons ';'.

interactive_expr: LBRACE Ident EQ Bytes SEMI Ident EQ Bytes SEMI With
##
## Ends in an error in state: 571.
##
## nsepseq(field_assignment,SEMI) -> field_assignment SEMI . nsepseq(field_assignment,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_assignment,SEMI)) -> field_assignment SEMI . seq(__anonymous_0(field_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment SEMI
##
interactive_expr: LBRACE Ident EQ Bytes SEMI With
##
## Ends in an error in state: 566.
##
## nsepseq(field_assignment,SEMI) -> field_assignment SEMI . nsepseq(field_assignment,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_assignment,SEMI)) -> field_assignment SEMI . seq(__anonymous_0(field_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment SEMI
##

Ill-formed record expression.
At this point, one of the following is expected:
  * more field assignments separated by semicolons ';';
  * a closing brace '}' if the record is complete.

interactive_expr: LBRACE Ident EQ Bytes SEMI Ident EQ Bytes With
##
## Ends in an error in state: 570.
##
## nsepseq(field_assignment,SEMI) -> field_assignment . [ RBRACE ]
## nsepseq(field_assignment,SEMI) -> field_assignment . SEMI nsepseq(field_assignment,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_assignment,SEMI)) -> field_assignment . SEMI seq(__anonymous_0(field_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 539, spurious reduction of production field_assignment -> Ident EQ expr
##
interactive_expr: LBRACE Ident EQ Bytes With
##
## Ends in an error in state: 565.
##
## nsepseq(field_assignment,SEMI) -> field_assignment . [ RBRACE ]
## nsepseq(field_assignment,SEMI) -> field_assignment . SEMI nsepseq(field_assignment,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_assignment,SEMI)) -> field_assignment . SEMI seq(__anonymous_0(field_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 539, spurious reduction of production field_assignment -> Ident EQ expr
##

Ill-formed record expression.
At this point, if the expression assigned to the field is complete,
one of the following is expected:
  * a semicolon ';' followed by another field assignment;
  * a closing brace '}' if the record is complete.

interactive_expr: LBRACE Ident With Ident EQ Bytes SEMI Ident EQ Bytes With
##
## Ends in an error in state: 560.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . SEMI nsepseq(field_path_assignment,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment . SEMI seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 553, spurious reduction of production field_path_assignment -> path EQ expr
##
interactive_expr: LBRACE Ident With Ident EQ Bytes With
##
## Ends in an error in state: 556.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . SEMI nsepseq(field_path_assignment,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment . SEMI seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
## In state 553, spurious reduction of production field_path_assignment -> path EQ expr
##

Ill-formed record update.
At this point, if the expression assigned to the field (update) is
complete, one of the following is expected:
  * a semicolon ';' followed by another field assignment;
  * a closing brace '}' if the update is complete.

interactive_expr: LBRACE Ident EQ Bytes SEMI Ident With
##
## Ends in an error in state: 567.
##
## field_assignment -> Ident . EQ expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed assignment to a field in a record.
At this point, the assignment operator '=' is expected, followed by an
expression.

interactive_expr: LBRACE Ident WILD
##
## Ends in an error in state: 188.
##
## field_assignment -> Ident . EQ expr [ SEMI RBRACE ]
## path -> Ident . [ With ]
## projection -> Ident . DOT nsepseq(selection,DOT) [ With ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record expression or record update.
At this point, one of the following is expected:
  * the keyword 'with' followed by field updates (assignments);
  * the selection operator '.' if the record to update is not fully
    qualified;
  * the assignment operator '=' followed by an expression, if defining
    a record (as opposed to a record update.)

interactive_expr: LBRACE Ident With Ident DOT Ident With
##
## Ends in an error in state: 551.
##
## field_path_assignment -> path . EQ expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 196, spurious reduction of production nsepseq(selection,DOT) -> selection
## In state 199, spurious reduction of production projection -> Ident DOT nsepseq(selection,DOT)
## In state 545, spurious reduction of production path -> projection
##

Ill-formed record update.
At this point, the assignment operator '=' is expected, followed by an
expression (update).

interactive_expr: LBRACE Ident With Ident EQ Bytes SEMI Ident EQ Bytes SEMI With
##
## Ends in an error in state: 561.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment SEMI . nsepseq(field_path_assignment,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment SEMI . seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment SEMI
##
interactive_expr: LBRACE Ident With Ident EQ Bytes SEMI With
##
## Ends in an error in state: 557.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment SEMI . nsepseq(field_path_assignment,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment SEMI . seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment SEMI
##

Ill-formed record update.
At this point, one of the following is expected:
  * more field assignments (updates) separated by semicolons ';';
  * a closing brace '}' if the update is complete.

interactive_expr: LBRACE Ident With Ident With
##
## Ends in an error in state: 548.
##
## path -> Ident . [ EQ ]
## projection -> Ident . DOT nsepseq(selection,DOT) [ EQ ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record update.
At this point, one of the following is expected:
  * the assignment operator '=' if the field to update is fully
    qualified;
  * the selection operator '.' to further qualify the field to update.

interactive_expr: LBRACE Ident With With
##
## Ends in an error in state: 547.
##
## update_record -> LBRACE path With . sep_or_term_list(field_path_assignment,SEMI) RBRACE [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE path With
##

Ill-formed record update.
At this point, assignments to fields (updates) are expected, separated
by semicolons ';' and each starting with fully qualified field names.

interactive_expr: LBRACE With
##
## Ends in an error in state: 187.
##
## record_expr -> LBRACE . sep_or_term_list(field_assignment,SEMI) RBRACE [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
## update_record -> LBRACE . path With sep_or_term_list(field_path_assignment,SEMI) RBRACE [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record expression or update.
At this point, one of the following is expected:
  * field assignments separated by semicolons ';', if defining a record;
  * the qualified name of the record to update.

interactive_expr: LBRACKET Verbatim SEMI Verbatim With
##
## Ends in an error in state: 582.
##
## nsepseq(expr,SEMI) -> expr . [ RBRACKET ]
## nsepseq(expr,SEMI) -> expr . SEMI nsepseq(expr,SEMI) [ RBRACKET ]
## seq(__anonymous_0(expr,SEMI)) -> expr . SEMI seq(__anonymous_0(expr,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: LBRACKET Verbatim With
##
## Ends in an error in state: 578.
##
## nsepseq(expr,SEMI) -> expr . [ RBRACKET ]
## nsepseq(expr,SEMI) -> expr . SEMI nsepseq(expr,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(expr,SEMI)) -> expr . SEMI seq(__anonymous_0(expr,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed list of expressions.
At this point, if the list element is complete, one of the
following is expected:
  * a semicolon ';' followed by more elements as expressions;
  * a closing bracket ']' if the list is complete.

contract: Let LPAR Constr LBRACKET With
##
## Ends in an error in state: 91.
##
## list__(tail) -> LBRACKET . option(sep_or_term_list(tail,SEMI)) RBRACKET [ SEMI RPAR RBRACKET RBRACE CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed list of expression.
At this point, one of the following is expected:
  * list elements as expressions separated by semicolons ';';
  * a closing bracket ']' if the list is empty.

interactive_expr: LPAR Verbatim COLON Ident VBAR
##
## Ends in an error in state: 589.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production cartesian -> core_type
## In state 25, spurious reduction of production fun_type -> cartesian
## In state 58, spurious reduction of production type_expr -> fun_type
## In state 588, spurious reduction of production annot_expr -> expr COLON type_expr
##

Ill-formed annotated expression.
At this point, if the type annotating the expression is complete, then
a closing parenthesis ')' is expected.

contract: Type Ident EQ With
##
## Ends in an error in state: 48.
##
## record_type -> seq(Attr) . LBRACE sep_or_term_list(field_decl,SEMI) RBRACE [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## sum_type -> seq(Attr) . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production seq(Attr) ->
##

Ill-formed record type or sum type.
At this point, if the attributes (if any) are complete, one of the
following is expected:
  * an opening brace '{', followed by field declarations,if defining a
    record;
  * a vertical bar '|', followed by variant declarations, if defining
    a sum type.

interactive_expr: LPAR Verbatim With
##
## Ends in an error in state: 585.
##
## annot_expr -> expr . COLON type_expr [ RPAR ]
## par(expr) -> LPAR expr . RPAR [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##

Ill formed expression.
At this point, if the expression is complete, one of the following is
expected:
  * a type annotation starting with a colon ':' and followed by a type
    expression;
  * a closing parenthesis ')', in the absence of type annotation.

interactive_expr: Lang Verbatim With
##
## Ends in an error in state: 599.
##
## code_inj -> Lang expr . RBRACKET [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed code injection.
At this point, a closing bracket ']' is expected.

interactive_expr: MINUS With
##
## Ends in an error in state: 184.
##
## unary_expr_level -> MINUS . call_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE In GT GE End Else EQ EOF CONS COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Ill-formed expression.
At this point, an expression is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the negated expression.

interactive_expr: Match Verbatim With LPAR Bytes RPAR With
##
## Ends in an error in state: 326.
##
## pattern -> sub_pattern . CONS tail [ ARROW ]
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

Ill-formed pattern matching.
At this point, one of the following is expected:
  * the cons operator '::' followed by another pattern, if matching a
    non-empty list;
  * a comma ',' followed by another pattern, if matching a tuple.

interactive_expr: Match Verbatim With WILD COMMA WILD COMMA With
##
## Ends in an error in state: 331.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##
interactive_expr: Match Verbatim With WILD COMMA With
##
## Ends in an error in state: 329.
##
## tuple(sub_pattern) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##
contract: Let LPAR Constr LPAR WILD COMMA WILD COMMA With
##
## Ends in an error in state: 128.
##
## nsepseq(tail,COMMA) -> tail COMMA . nsepseq(tail,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## tail COMMA
##
contract: Let LPAR Constr LPAR WILD COMMA With
##
## Ends in an error in state: 126.
##
## tuple(tail) -> tail COMMA . nsepseq(tail,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## tail COMMA
##

Ill-formed tuple of patterns.
At this point, more components of the tuple are expected as patterns
separated by commas ','.

interactive_expr: Match Verbatim With WILD COMMA WILD With
##
## Ends in an error in state: 330.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ ARROW ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

Ill-formed pattern matching.
At this point, if the pattern is complete, one of the following is
expected:
  * an arrow '->' followed by the right-hand side of the case as an
    expression;
  * a comma ',' followed by another pattern (component), if matching a
    tuple.

interactive_expr: Match Verbatim With WILD CONS With
##
## Ends in an error in state: 327.
##
## pattern -> sub_pattern CONS . tail [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern CONS
##

Ill-formed pattern matching a non-empty list.
At this point, a pattern that matches a list is expected.

interactive_expr: Match Verbatim With WILD With
##
## Ends in an error in state: 416.
##
## pattern -> core_pattern . [ ARROW ]
## sub_pattern -> core_pattern . [ CONS COMMA ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

Ill-formed pattern matching.
At this point, if the pattern is complete, one of the following is
expected:
  * an arrow '->' followed by an expression, if the left-hand side of
    the case is complete;
  * a cons operator '::' if matching a non-empty list;
  * a comma ',' followed by another pattern (component) if matching a
    tuple.

interactive_expr: Not With
##
## Ends in an error in state: 179.
##
## unary_expr_level -> Not . call_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE In GT GE End Else EQ EOF CONS COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Not
##

Ill-formed expression.
At this point, a Boolean expression is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the negated expression.

interactive_expr: Verbatim BOOL_AND With
##
## Ends in an error in state: 278.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or Let In End Else EOF COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##
interactive_expr: Verbatim BOOL_OR With
##
## Ends in an error in state: 309.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or Let In End Else EOF COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##
interactive_expr: Verbatim Or With
##
## Ends in an error in state: 259.
##
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level Or . conj_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or Let In End Else EOF COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level Or
##

Ill-formed Boolean expression.
At this point, a Boolean expression is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Verbatim CAT With
##
## Ends in an error in state: 261.
##
## bin_op(cons_expr_level,CAT,cat_expr_level) -> cons_expr_level CAT . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Let LT LE In GT GE End Else EQ EOF COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## cons_expr_level CAT
##

Ill-formed expression of type string.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Verbatim COMMA Verbatim COMMA With
##
## Ends in an error in state: 304.
##
## nsepseq(disj_expr_level,COMMA) -> disj_expr_level COMMA . nsepseq(disj_expr_level,COMMA) [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In Else EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level COMMA
##
interactive_expr: Verbatim COMMA With
##
## Ends in an error in state: 301.
##
## tuple(disj_expr_level) -> disj_expr_level COMMA . nsepseq(disj_expr_level,COMMA) [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Let In Else EOF COLON Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level COMMA
##

Ill-formed tuple of expressions.
At this point, another component is expected as an expression.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Verbatim CONS With
##
## Ends in an error in state: 275.
##
## bin_op(add_expr_level,CONS,cons_expr_level) -> add_expr_level CONS . cons_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Let LT LE In GT GE End Else EQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level CONS
##

Ill-formed list expression.
At this point, an expression of type list is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Verbatim Constr With
##
## Ends in an error in state: 211.
##
## module_field -> Constr . DOT module_fun [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
## projection -> Constr . DOT Ident DOT nsepseq(selection,DOT) [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Constr CONS COMMA COLON CAT Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##
interactive_expr: LBRACE Constr With
##
## Ends in an error in state: 540.
##
## projection -> Constr . DOT Ident DOT nsepseq(selection,DOT) [ With EQ ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed selection from a module.
At this point, the selection operator '.' is expected, followed by the
name of a value defined in the module.

interactive_expr: Verbatim EQ With
##
## Ends in an error in state: 290.
##
## bin_op(comp_expr_level,EQ,cat_expr_level) -> comp_expr_level EQ . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Let LT LE In GT GE End Else EQ EOF COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQ
##
interactive_expr: Verbatim GE With
##
## Ends in an error in state: 288.
##
## bin_op(comp_expr_level,GE,cat_expr_level) -> comp_expr_level GE . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Let LT LE In GT GE End Else EQ EOF COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##
interactive_expr: Verbatim GT With
##
## Ends in an error in state: 286.
##
## bin_op(comp_expr_level,GT,cat_expr_level) -> comp_expr_level GT . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Let LT LE In GT GE End Else EQ EOF COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##
interactive_expr: Verbatim LE With
##
## Ends in an error in state: 284.
##
## bin_op(comp_expr_level,LE,cat_expr_level) -> comp_expr_level LE . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Let LT LE In GT GE End Else EQ EOF COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##
interactive_expr: Verbatim LT With
##
## Ends in an error in state: 282.
##
## bin_op(comp_expr_level,LT,cat_expr_level) -> comp_expr_level LT . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Let LT LE In GT GE End Else EQ EOF COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##
interactive_expr: Verbatim NE With
##
## Ends in an error in state: 280.
##
## bin_op(comp_expr_level,NE,cat_expr_level) -> comp_expr_level NE . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Let LT LE In GT GE End Else EQ EOF COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

Ill-formed Boolean expression.
At this point, an expression is expected as the righ-hand side of the
comparison.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Verbatim MINUS With
##
## Ends in an error in state: 273.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE In GT GE End Else EQ EOF CONS COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##
interactive_expr: Verbatim Mod With
##
## Ends in an error in state: 250.
##
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level Mod . unary_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE In GT GE End Else EQ EOF CONS COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Mod
##
interactive_expr: Verbatim PLUS With
##
## Ends in an error in state: 271.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE In GT GE End Else EQ EOF CONS COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##
interactive_expr: Verbatim SLASH With
##
## Ends in an error in state: 248.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE In GT GE End Else EQ EOF CONS COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##
interactive_expr: Verbatim TIMES With
##
## Ends in an error in state: 237.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE In GT GE End Else EQ EOF CONS COMMA COLON CAT BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

Ill-formed arithmetic expression.
At this point, an expression is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Ident WILD
##
## Ends in an error in state: 613.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 192, spurious reduction of production core_expr -> Ident
## In state 239, spurious reduction of production call_expr_level -> core_expr
## In state 246, spurious reduction of production unary_expr_level -> call_expr_level
## In state 228, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 236, spurious reduction of production add_expr_level -> mult_expr_level
## In state 270, spurious reduction of production cons_expr_level -> add_expr_level
## In state 260, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 292, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 299, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 306, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 258, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 312, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 313, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed expression.
At this point, if the expression is complete, the end of file is
expected.

contract: Let Ident WILD COLON String VBAR
##
## Ends in an error in state: 174.
##
## let_binding -> Ident nseq(sub_irrefutable) option(type_annotation) . EQ expr [ Type Let In EOF Attr ]
##
## The known suffix of the stack is as follows:
## Ident nseq(sub_irrefutable) option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production cartesian -> core_type
## In state 25, spurious reduction of production fun_type -> cartesian
## In state 58, spurious reduction of production type_expr -> fun_type
## In state 172, spurious reduction of production type_annotation -> COLON type_expr
## In state 173, spurious reduction of production option(type_annotation) -> type_annotation
##

Ill-formed value declaration.
At this point, if the type annotation is complete, the assignment
operator '=' is expected, followed by an expression.

contract: Let Ident WILD WILD With
##
## Ends in an error in state: 167.
##
## seq(sub_irrefutable) -> sub_irrefutable . seq(sub_irrefutable) [ EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##
contract: Let Ident WILD With
##
## Ends in an error in state: 166.
##
## nseq(sub_irrefutable) -> sub_irrefutable . seq(sub_irrefutable) [ EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

Ill-formed function declaration.
At this point, one of the following is expected:
  * another parameter as a pattern, for instance an identifier;
  * the assignment operator '=' followed by the function body as an
    expression;
  * a colon ':' followed by the type of the returned value.

contract: Let LBRACE Ident EQ Bytes SEMI Ident EQ Bytes SEMI With
##
## Ends in an error in state: 143.
##
## nsepseq(field_pattern,SEMI) -> field_pattern SEMI . nsepseq(field_pattern,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_pattern,SEMI)) -> field_pattern SEMI . seq(__anonymous_0(field_pattern,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern SEMI
##
contract: Let LBRACE Ident EQ Bytes SEMI With
##
## Ends in an error in state: 139.
##
## nsepseq(field_pattern,SEMI) -> field_pattern SEMI . nsepseq(field_pattern,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,SEMI)) -> field_pattern SEMI . seq(__anonymous_0(field_pattern,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern SEMI
##

Ill-formed record pattern.
At this point, one of the following is expected:
  * more fields as patterns separated by semicolons ';';
  * a closing brace '}' if the record is complete.

contract: Let LBRACE Ident EQ Bytes SEMI Ident EQ Bytes With
##
## Ends in an error in state: 142.
##
## nsepseq(field_pattern,SEMI) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,SEMI) -> field_pattern . SEMI nsepseq(field_pattern,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_pattern,SEMI)) -> field_pattern . SEMI seq(__anonymous_0(field_pattern,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##
contract: Let LBRACE Ident EQ Bytes With
##
## Ends in an error in state: 138.
##
## nsepseq(field_pattern,SEMI) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,SEMI) -> field_pattern . SEMI nsepseq(field_pattern,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,SEMI)) -> field_pattern . SEMI seq(__anonymous_0(field_pattern,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

Ill-formed record pattern.
At this point, one of the following is expected:
  * a semicolon ';' followed by more fields as patterns;
  * a closing brace '}' if the pattern is complete.

contract: Let LBRACE Ident EQ With
##
## Ends in an error in state: 84.
##
## field_pattern -> Ident EQ . sub_pattern [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

Ill-formed record pattern.
At this point, the right-hand side of a field pattern is expected as a
pattern.

contract: Let LBRACE Ident With
##
## Ends in an error in state: 83.
##
## field_pattern -> Ident . EQ sub_pattern [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record pattern.
At this point, the assignment operator '=' is expected, followed by
the right-hand side as a pattern.

contract: Let LBRACE With
##
## Ends in an error in state: 82.
##
## record_pattern -> LBRACE . sep_or_term_list(field_pattern,SEMI) RBRACE [ WILD SEMI RPAR RBRACKET RBRACE LPAR LBRACE Ident EQ Constr CONS COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record pattern.
At this point, patterns that match fields are expected, separated by
semicolons ';'.

contract: Let LPAR Constr C_Some With
##
## Ends in an error in state: 96.
##
## constr_pattern -> C_Some . sub_pattern [ SEMI RPAR RBRACKET RBRACE CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

Ill-formed application of the predefined data constructor 'Some' in a
pattern.
At this point, its argument is expected as a pattern.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the pattern.

contract: Let LPAR Constr Constr With
##
## Ends in an error in state: 163.
##
## par(closed_irrefutable) -> LPAR closed_irrefutable . RPAR [ WILD RPAR LPAR LBRACE Ident EQ Constr COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR closed_irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production constr_pattern -> Constr
## In state 106, spurious reduction of production core_pattern -> constr_pattern
## In state 105, spurious reduction of production sub_pattern -> core_pattern
## In state 147, spurious reduction of production closed_irrefutable -> Constr sub_pattern
##

Ill-formed parenthesised pattern.
At this point, if the pattern is complete, a closing parenthesis ')'
is expected.

contract: Let LPAR Constr LBRACKET WILD RPAR
##
## Ends in an error in state: 108.
##
## nsepseq(tail,SEMI) -> tail . [ RBRACKET ]
## nsepseq(tail,SEMI) -> tail . SEMI nsepseq(tail,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(tail,SEMI)) -> tail . SEMI seq(__anonymous_0(tail,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## tail
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production tail -> sub_pattern
##
contract: Let LPAR Constr LBRACKET WILD SEMI WILD RPAR
##
## Ends in an error in state: 110.
##
## nsepseq(tail,SEMI) -> tail . [ RBRACKET ]
## nsepseq(tail,SEMI) -> tail . SEMI nsepseq(tail,SEMI) [ RBRACKET ]
## seq(__anonymous_0(tail,SEMI)) -> tail . SEMI seq(__anonymous_0(tail,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## tail
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production tail -> sub_pattern
##

Ill-formed list of patterns.
At this point, if the pattern matching a list element is complete,
then one of the following is expected:
  * a closing bracket ']' if the list is complete;
  * a semicolon ';' followed by another list element as a pattern.

contract: Let LPAR Constr LBRACKET WILD SEMI With
##
## Ends in an error in state: 109.
##
## nsepseq(tail,SEMI) -> tail SEMI . nsepseq(tail,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(tail,SEMI)) -> tail SEMI . seq(__anonymous_0(tail,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## tail SEMI
##
contract: Let LPAR Constr LBRACKET WILD SEMI WILD SEMI With
##
## Ends in an error in state: 111.
##
## nsepseq(tail,SEMI) -> tail SEMI . nsepseq(tail,SEMI) [ RBRACKET ]
## seq(__anonymous_0(tail,SEMI)) -> tail SEMI . seq(__anonymous_0(tail,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## tail SEMI
##

Ill-formed list of patterns.
At this point, one of the following is expected:
  * list elements as patterns separated by semicolons ';';
  * a closing bracket ']' if the list is complete.

contract: Let LPAR Constr LPAR WILD COMMA WILD SEMI
##
## Ends in an error in state: 127.
##
## nsepseq(tail,COMMA) -> tail . [ RPAR ]
## nsepseq(tail,COMMA) -> tail . COMMA nsepseq(tail,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## tail
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production tail -> sub_pattern
##

Ill-formed parenthesised tuple of patterns.
At this point, if the pattern matching the tuple component is
complete, then one of the following is expected:
  * a comma ',' followed by another component as a pattern;
  * a closing parenthesis ')' if the tuple is complete.

contract: Let LPAR Constr LPAR WILD CONS With
##
## Ends in an error in state: 113.
##
## tail -> sub_pattern CONS . tail [ SEMI RPAR RBRACKET COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern CONS
##

Ill-formed list of patterns.
At this point, a pattern matching a list is expected.

contract: Let LPAR Constr LPAR WILD SEMI
##
## Ends in an error in state: 124.
##
## par(tail) -> LPAR tail . RPAR [ SEMI RPAR RBRACKET RBRACE CONS COMMA ARROW ]
## tuple(tail) -> tail . COMMA nsepseq(tail,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR tail
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production tail -> sub_pattern
##

Ill-formed parenthesised pattern.
At this point, if the pattern (inside) is complete, then one of the
following is expected:
  * a closing parenthesis ')' if the pattern is complete;
  * a comma ',' followed by another pattern if matching a tuple.

contract: Let LPAR Constr LPAR With
##
## Ends in an error in state: 90.
##
## par(ptuple) -> LPAR . ptuple RPAR [ SEMI RPAR RBRACKET RBRACE CONS COMMA ARROW ]
## par(tail) -> LPAR . tail RPAR [ SEMI RPAR RBRACKET RBRACE CONS COMMA ARROW ]
## unit -> LPAR . RPAR [ SEMI RPAR RBRACKET RBRACE CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed pattern.
At this point, one of the following is expected:
  * a closing parenthesis ')' if matching the unit value '()';
  * a pattern.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the pattern.

contract: Let LPAR WILD WILD
##
## Ends in an error in state: 160.
##
## closed_irrefutable -> irrefutable . [ RPAR ]
## typed_pattern -> irrefutable . COLON type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 151, spurious reduction of production irrefutable -> sub_irrefutable
##

Ill-formed parenthesised pattern.
At this point, if the pattern (inside) is complete, one of the
following is expected:
  * a type annotation, followed by a closing parenthesis ')';
  * a closing parenthesis ')'.

contract: Let LPAR With
##
## Ends in an error in state: 80.
##
## par(closed_irrefutable) -> LPAR . closed_irrefutable RPAR [ WILD RPAR LPAR LBRACE Ident EQ Constr COMMA COLON ARROW ]
## unit -> LPAR . RPAR [ WILD RPAR LPAR LBRACE Ident EQ Constr COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed pattern.
At this point, one of the following is expected:
  * a closing parenthesis ')' if your pattern matches the unit value;
  * a pattern amongst the following: an identifier, a wildcard '_',
    the unit '()', a record pattern, a parenthesised pattern or a
    constructor application, or a typed pattern.

contract: Let WILD COLON Ident VBAR
##
## Ends in an error in state: 315.
##
## let_binding -> irrefutable option(type_annotation) . EQ expr [ Type Let In EOF Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production cartesian -> core_type
## In state 25, spurious reduction of production fun_type -> cartesian
## In state 58, spurious reduction of production type_expr -> fun_type
## In state 172, spurious reduction of production type_annotation -> COLON type_expr
## In state 173, spurious reduction of production option(type_annotation) -> type_annotation
##

Ill-formed value declaration.
At this point, if the type annotation is complete, the assignment
operator '=' is expected, followed by an expression.

contract: Let WILD COMMA With
##
## Ends in an error in state: 152.
##
## tuple(sub_irrefutable) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ WILD RPAR LPAR LBRACE Ident EQ Constr COLON ARROW ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##
contract: Let WILD COMMA WILD COMMA With
##
## Ends in an error in state: 155.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ WILD RPAR LPAR LBRACE Ident EQ Constr COLON ARROW ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

Ill-formed tuple of patterns.
At this point, another component is expected as one of the following:
* an identifier,
  * a wildcard '_',
  * the unit '()',
  * a record pattern,
  * a parenthesised pattern,
  * a constant constructor, like "K".

contract: Let WILD With
##
## Ends in an error in state: 314.
##
## let_binding -> irrefutable . option(type_annotation) EQ expr [ Type Let In EOF Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 151, spurious reduction of production irrefutable -> sub_irrefutable
##

Ill-formed value declaration.
At this point, if this last pattern is complete, one of the following
is expected:
  * a type annotation for the value being defined;
  * the assignment operator '=' followed by an expression.

contract: Type Ident EQ LBRACE Ident COLON Constr SEMI Ident COLON Ident VBAR
##
## Ends in an error in state: 67.
##
## nsepseq(field_decl,SEMI) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,SEMI) -> field_decl . SEMI nsepseq(field_decl,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_decl,SEMI)) -> field_decl . SEMI seq(__anonymous_0(field_decl,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production cartesian -> core_type
## In state 25, spurious reduction of production fun_type -> cartesian
## In state 58, spurious reduction of production type_expr -> fun_type
## In state 55, spurious reduction of production field_decl -> seq(Attr) Ident COLON type_expr
##
contract: Type Ident EQ LBRACE Ident COLON Ident VBAR
##
## Ends in an error in state: 63.
##
## nsepseq(field_decl,SEMI) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,SEMI) -> field_decl . SEMI nsepseq(field_decl,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_decl,SEMI)) -> field_decl . SEMI seq(__anonymous_0(field_decl,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production cartesian -> core_type
## In state 25, spurious reduction of production fun_type -> cartesian
## In state 58, spurious reduction of production type_expr -> fun_type
## In state 55, spurious reduction of production field_decl -> seq(Attr) Ident COLON type_expr
##

Ill-formed record type.
At this point, if the type of the field is complete, one of the
following is expected:
  * a semicolon ';' followed by another field declaration;
  * a closing brace '}' if the record type is complete.

contract: Type Ident EQ LBRACE With
##
## Ends in an error in state: 52.
##
## field_decl -> seq(Attr) . Ident COLON type_expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production seq(Attr) ->
##

Ill-formed record type.
At this point, if the attributes (if any) are complete, the name of a
field is expected.

contract: Type Ident EQ LBRACE Ident With
##
## Ends in an error in state: 53.
##
## field_decl -> seq(Attr) Ident . COLON type_expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Ident
##

Ill-formed record type.
At this point, a colon ':' followed by the type of the field is
expected.

contract: Type Ident EQ LPAR String COMMA Constr RPAR With
##
## Ends in an error in state: 13.
##
## core_type -> type_tuple . Ident [ VBAR Type TIMES SEMI RPAR RBRACE Let Ident EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## type_tuple
##

Ill-formed type expression.
At this point, a type constructor with two or more parameters is
expected, like 'map'.

contract: Type Ident EQ LPAR String COMMA String VBAR
##
## Ends in an error in state: 45.
##
## nsepseq(type_expr,COMMA) -> type_expr . [ RPAR ]
## nsepseq(type_expr,COMMA) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production cartesian -> core_type
## In state 25, spurious reduction of production fun_type -> cartesian
## In state 58, spurious reduction of production type_expr -> fun_type
##
contract: Type Ident EQ LPAR String VBAR
##
## Ends in an error in state: 42.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR Type TIMES SEMI RPAR RBRACE Let Ident EQ EOF COMMA Attr ARROW ]
## tuple(type_expr) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production cartesian -> core_type
## In state 25, spurious reduction of production fun_type -> cartesian
## In state 58, spurious reduction of production type_expr -> fun_type
##

Ill-formed application to a type constructor.
At this point, if the argument is complete, one of the
following is expected:
  * a closing parenthesis ')';
  * a comma ',' followed by another type expression, if the argument
    is a tuple of types.

contract: Type Ident EQ String ARROW With
##
## Ends in an error in state: 26.
##
## fun_type -> cartesian ARROW . fun_type [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## cartesian ARROW
##

Ill-formed functional type.
At this point, a type other than a sum type or a record is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the type.

contract: Type Ident EQ Constr Of With
##
## Ends in an error in state: 9.
##
## variant -> Constr Of . fun_type [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr Of
##

Ill-formed variant.
At this point, a type other than a sum type or a record is expected.

contract: Type Ident EQ String TIMES Constr With
##
## Ends in an error in state: 10.
##
## core_type -> Constr . DOT Ident [ VBAR Type TIMES SEMI RPAR RBRACE Let Ident EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed selection of a type in a module.
At this point, the selection operator '.' is expected, followed by
the name of a type defined in the module.

contract: Type Ident EQ String TIMES String TIMES With
##
## Ends in an error in state: 22.
##
## nsepseq(core_type,TIMES) -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##
contract: Type Ident EQ String TIMES With
##
## Ends in an error in state: 19.
##
## cartesian -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##

Ill-formed product type.
At this point, one of the following type expressions is expected:
  * a type name;
  * a selection of a type defined in a module, for example 'M.t';
  * an instantiation of a parametric type, for example 'int list' or
    '(int, string) map';
  * a parenthesised type expression.

contract: Type Ident EQ VBAR With
##
## Ends in an error in state: 49.
##
## sum_type -> seq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) VBAR
##
contract: Type Ident EQ Constr VBAR With
##
## Ends in an error in state: 33.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

Ill-formed variant.
At this point, a data constructor is expected.
Note: Data constructors and module names start with a capital letter.

contract: Type Ident With
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . EQ type_expr [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

Ill-formed type declaration.
At this point, the assignment operator '=' is expected, followed by a
type expression.

contract: Type With
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Ident EQ type_expr [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

Ill-formed type declaration.
At this point, the name of the type being defined is expected.
