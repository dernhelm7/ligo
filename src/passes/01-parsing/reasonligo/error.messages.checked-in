interactive_expr: Attr LBRACE
##
## Ends in an error in state: 401.
##
## let_expr(expr_with_let_expr) -> seq(Attr) . Let let_binding SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
## let_expr(expr_with_let_expr) -> seq(Attr) . Let Rec let_binding SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 34, spurious reduction of production seq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None WILD
##
## Ends in an error in state: 284.
##
## call_expr_level -> call_expr_level_in . option(type_annotation_simple) [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## call_expr_level_in
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_Some VBAR
##
## Ends in an error in state: 231.
##
## constr_expr -> C_Some . core_expr [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr DOT Ident WILD
##
## Ends in an error in state: 215.
##
## module_fun -> Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Constr DOT Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr DOT WILD
##
## Ends in an error in state: 213.
##
## module_field -> Constr DOT . module_fun [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Constr DOT . Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr Switch
##
## Ends in an error in state: 212.
##
## constr_expr -> Constr . core_expr [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## constr_expr -> Constr . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## module_field -> Constr . DOT module_fun [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Constr . DOT Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT Ident WILD
##
## Ends in an error in state: 207.
##
## selection -> DOT Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> DOT Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## DOT Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT WILD
##
## Ends in an error in state: 206.
##
## selection -> DOT . Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> DOT . Ident [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int RBRACKET WILD
##
## Ends in an error in state: 205.
##
## selection -> LBRACKET Int RBRACKET . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> LBRACKET Int RBRACKET . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int RBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int WILD
##
## Ends in an error in state: 204.
##
## selection -> LBRACKET Int . RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> LBRACKET Int . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET WILD
##
## Ends in an error in state: 203.
##
## selection -> LBRACKET . Int RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> LBRACKET . Int RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident WILD
##
## Ends in an error in state: 202.
##
## common_expr -> Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE VBAR
##
## Ends in an error in state: 339.
##
## parenthesized_expr -> LBRACE . expr RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE WILD VBAR
##
## Ends in an error in state: 340.
##
## parenthesized_expr -> LBRACE expr . RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR VBAR
##
## Ends in an error in state: 201.
##
## parenthesized_expr -> LPAR . expr RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE VBAR
##
## Ends in an error in state: 399.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE . closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE VBAR
##
## Ends in an error in state: 418.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE . closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 420.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) . RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE WILD VBAR
##
## Ends in an error in state: 419.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if . option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 423, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr
## In state 422, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE Else WILD
##
## Ends in an error in state: 417.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE WILD
##
## Ends in an error in state: 416.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 415.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD VBAR
##
## Ends in an error in state: 414.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 423, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr
## In state 422, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR WILD
##
## Ends in an error in state: 398.
##
## if_then_else(closed_if) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE If WILD
##
## Ends in an error in state: 397.
##
## if_then_else(closed_if) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch VBAR
##
## Ends in an error in state: 344.
##
## switch_expr(base_if_then_else) -> Switch . switch_expr_ LBRACE cases(base_if_then_else) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR VBAR
##
## Ends in an error in state: 383.
##
## case_clause(base_if_then_else) -> VBAR . pattern ARROW base_if_then_else option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW Bytes SEMI WILD
##
## Ends in an error in state: 441.
##
## nseq(case_clause(base_if_then_else)) -> case_clause(base_if_then_else) . seq(case_clause(base_if_then_else)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_if_then_else)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW Bytes VBAR Bytes ARROW Bytes SEMI WILD
##
## Ends in an error in state: 443.
##
## seq(case_clause(base_if_then_else)) -> case_clause(base_if_then_else) . seq(case_clause(base_if_then_else)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_if_then_else)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE VBAR
##
## Ends in an error in state: 396.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE . closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE VBAR
##
## Ends in an error in state: 428.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE . base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 432.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE WILD VBAR
##
## Ends in an error in state: 431.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 434, spurious reduction of production base_if_then_else__open(base_if_then_else) -> base_expr
## In state 430, spurious reduction of production base_if_then_else -> base_if_then_else__open(base_if_then_else)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE Else WILD
##
## Ends in an error in state: 427.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE WILD
##
## Ends in an error in state: 426.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 425.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD VBAR
##
## Ends in an error in state: 424.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 423, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr
## In state 422, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR WILD
##
## Ends in an error in state: 395.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If WILD
##
## Ends in an error in state: 394.
##
## if_then_else(base_if_then_else) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW VBAR
##
## Ends in an error in state: 393.
##
## case_clause(base_if_then_else) -> VBAR pattern ARROW . base_if_then_else option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW WILD Type
##
## Ends in an error in state: 435.
##
## case_clause(base_if_then_else) -> VBAR pattern ARROW base_if_then_else . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW base_if_then_else
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 434, spurious reduction of production base_if_then_else__open(base_if_then_else) -> base_expr
## In state 430, spurious reduction of production base_if_then_else -> base_if_then_else__open(base_if_then_else)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD COMMA Bytes RPAR
##
## Ends in an error in state: 392.
##
## case_clause(base_if_then_else) -> VBAR pattern . ARROW base_if_then_else option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 137, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 140, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 390, spurious reduction of production pattern -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE WILD
##
## Ends in an error in state: 382.
##
## switch_expr(base_if_then_else) -> Switch switch_expr_ LBRACE . cases(base_if_then_else) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch switch_expr_ LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD WILD
##
## Ends in an error in state: 381.
##
## switch_expr(base_if_then_else) -> Switch switch_expr_ . LBRACE cases(base_if_then_else) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch switch_expr_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE VBAR
##
## Ends in an error in state: 343.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr LBRACE . closed_if option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE . closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE Else LBRACE VBAR
##
## Ends in an error in state: 453.
##
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE . expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE Else LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 455.
##
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) . RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE Else LBRACE WILD VBAR
##
## Ends in an error in state: 454.
##
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr . option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 408, spurious reduction of production expr_with_let_expr -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE Else WILD
##
## Ends in an error in state: 452.
##
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE WILD
##
## Ends in an error in state: 451.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 450.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR LBRACE WILD VBAR
##
## Ends in an error in state: 449.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 423, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr
## In state 422, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD RPAR WILD
##
## Ends in an error in state: 342.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD VBAR
##
## Ends in an error in state: 337.
##
## parenthesized_expr -> LPAR expr . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If WILD
##
## Ends in an error in state: 200.
##
## if_then(expr_with_let_expr) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Constr DOT Ident WILD
##
## Ends in an error in state: 363.
##
## projection -> Constr DOT Ident . selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Constr DOT WILD
##
## Ends in an error in state: 362.
##
## projection -> Constr DOT . Ident selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Constr WILD
##
## Ends in an error in state: 361.
##
## projection -> Constr . DOT Ident selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COLON
##
## Ends in an error in state: 365.
##
## update_record -> LBRACE ELLIPSIS path . COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 360, spurious reduction of production path -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA Ident COLON Bytes COMMA WILD
##
## Ends in an error in state: 379.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 378.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 371, spurious reduction of production field_path_assignment -> path COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA WILD
##
## Ends in an error in state: 375.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 374.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 371, spurious reduction of production field_path_assignment -> path COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON VBAR
##
## Ends in an error in state: 370.
##
## field_path_assignment -> path COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COMMA
##
## Ends in an error in state: 369.
##
## field_path_assignment -> path . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 360, spurious reduction of production path -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA WILD
##
## Ends in an error in state: 366.
##
## update_record -> LBRACE ELLIPSIS path COMMA . sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident WILD
##
## Ends in an error in state: 360.
##
## path -> Ident . [ COMMA COLON ]
## projection -> Ident . selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS WILD
##
## Ends in an error in state: 359.
##
## update_record -> LBRACE ELLIPSIS . path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON Bytes VBAR
##
## Ends in an error in state: 475.
##
## record_expr -> LBRACE field_assignment . option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 461, spurious reduction of production field_assignment -> Ident COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON VBAR
##
## Ends in an error in state: 460.
##
## field_assignment -> Ident COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 465.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 461, spurious reduction of production field_assignment -> Ident COLON expr
## In state 472, spurious reduction of production field_assignment_punning -> field_assignment
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 469.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 461, spurious reduction of production field_assignment -> Ident COLON expr
## In state 472, spurious reduction of production field_assignment_punning -> field_assignment
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 470.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 466.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident WILD
##
## Ends in an error in state: 459.
##
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## field_assignment_punning -> Ident . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA WILD
##
## Ends in an error in state: 458.
##
## more_field_assignments -> COMMA . sep_or_term_list(field_assignment_punning,COMMA) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident WILD
##
## Ends in an error in state: 457.
##
## common_expr -> Ident . [ TIMES SLASH SEMI RBRACE PLUS Or NE Mod MINUS LT LPAR LE GT GE EQEQ COLON CAT BOOL_OR BOOL_AND ARROW ]
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## projection -> Ident . selection [ TIMES SLASH SEMI RBRACE PLUS Or NE Mod MINUS LT LPAR LE GT GE EQEQ COLON CAT BOOL_OR BOOL_AND ARROW ]
## record_expr -> LBRACE Ident . more_field_assignments RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE VBAR
##
## Ends in an error in state: 198.
##
## record_expr -> LBRACE . field_assignment option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## record_expr -> LBRACE . Ident more_field_assignments RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## sequence -> LBRACE . exprs RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## update_record -> LBRACE . ELLIPSIS path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE WILD SEMI VBAR
##
## Ends in an error in state: 482.
##
## exprs -> expr_with_let_expr SEMI . exprs [ RBRACE ]
## option(SEMI) -> SEMI . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## expr_with_let_expr SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE WILD VBAR
##
## Ends in an error in state: 481.
##
## exprs -> expr_with_let_expr . option(SEMI) [ RBRACE ]
## exprs -> expr_with_let_expr . SEMI exprs [ RBRACE ]
##
## The known suffix of the stack is as follows:
## expr_with_let_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 408, spurious reduction of production expr_with_let_expr -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET VBAR
##
## Ends in an error in state: 196.
##
## list_or_spread -> LBRACKET . expr COMMA sep_or_term_list(expr,COMMA) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET . expr COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET . option(expr) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD COMMA ELLIPSIS VBAR
##
## Ends in an error in state: 499.
##
## list_or_spread -> LBRACKET expr COMMA ELLIPSIS . expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD COMMA ELLIPSIS WILD VBAR
##
## Ends in an error in state: 500.
##
## list_or_spread -> LBRACKET expr COMMA ELLIPSIS expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 498.
##
## list_or_spread -> LBRACKET expr COMMA . sep_or_term_list(expr,COMMA) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET expr COMMA . ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 507.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr COMMA . seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD COMMA WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 510.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr COMMA . seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD COMMA WILD COMMA WILD VBAR
##
## Ends in an error in state: 509.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD COMMA WILD VBAR
##
## Ends in an error in state: 506.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD VBAR
##
## Ends in an error in state: 497.
##
## list_or_spread -> LBRACKET expr . COMMA sep_or_term_list(expr,COMMA) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET expr . COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## option(expr) -> expr . [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR VBAR
##
## Ends in an error in state: 197.
##
## par(expr) -> LPAR . expr RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## par(tuple(disj_expr_level)) -> LPAR . tuple(disj_expr_level) RPAR [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA COLON BOOL_OR Attr ARROW ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR WILD COMMA Bytes RPAR COLON Ident TIMES
##
## Ends in an error in state: 276.
##
## base_expr -> disj_expr_level . [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
## fun_expr(expr) -> disj_expr_level . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production option(type_expr_simple_args) ->
## In state 250, spurious reduction of production type_expr_simple -> Ident option(type_expr_simple_args)
## In state 260, spurious reduction of production type_annotation_simple -> COLON type_expr_simple
## In state 261, spurious reduction of production option(type_annotation_simple) -> type_annotation_simple
## In state 262, spurious reduction of production disj_expr_level -> par(tuple(disj_expr_level)) option(type_annotation_simple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR WILD COMMA Bytes RPAR WILD
##
## Ends in an error in state: 236.
##
## disj_expr_level -> par(tuple(disj_expr_level)) . option(type_annotation_simple) [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
##
## The known suffix of the stack is as follows:
## par(tuple(disj_expr_level))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR WILD COMMA VBAR
##
## Ends in an error in state: 490.
##
## tuple(disj_expr_level) -> disj_expr_level COMMA . nsepseq(disj_expr_level,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 493.
##
## nsepseq(disj_expr_level,COMMA) -> disj_expr_level COMMA . nsepseq(disj_expr_level,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR WILD COMMA WILD VBAR
##
## Ends in an error in state: 492.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ RPAR Or COMMA BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ RPAR Or COMMA BOOL_OR ]
## nsepseq(disj_expr_level,COMMA) -> disj_expr_level . [ RPAR ]
## nsepseq(disj_expr_level,COMMA) -> disj_expr_level . COMMA nsepseq(disj_expr_level,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR WILD VBAR
##
## Ends in an error in state: 489.
##
## base_expr -> disj_expr_level . [ RPAR ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ RPAR Or COMMA BOOL_OR ARROW ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ RPAR Or COMMA BOOL_OR ARROW ]
## fun_expr(expr) -> disj_expr_level . ARROW expr [ RPAR ]
## tuple(disj_expr_level) -> disj_expr_level . COMMA nsepseq(disj_expr_level,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang VBAR
##
## Ends in an error in state: 192.
##
## code_inj -> Lang . expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Lang
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang WILD VBAR
##
## Ends in an error in state: 514.
##
## code_inj -> Lang expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec Verbatim
##
## Ends in an error in state: 403.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let Rec . let_binding SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec WILD EQ Bytes SEMI VBAR
##
## Ends in an error in state: 405.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let Rec let_binding SEMI . expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec WILD EQ Bytes VBAR
##
## Ends in an error in state: 404.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let Rec let_binding . SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 530, spurious reduction of production let_binding -> let_pattern_simple option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Verbatim
##
## Ends in an error in state: 402.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let . let_binding SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
## let_expr(expr_with_let_expr) -> seq(Attr) Let . Rec let_binding SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let WILD EQ Bytes SEMI VBAR
##
## Ends in an error in state: 410.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let let_binding SEMI . expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 409.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let let_binding . SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 530, spurious reduction of production let_binding -> let_pattern_simple option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS VBAR
##
## Ends in an error in state: 195.
##
## unary_expr_level -> MINUS . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: NOT VBAR
##
## Ends in an error in state: 193.
##
## unary_expr_level -> NOT . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Constr WILD
##
## Ends in an error in state: 218.
##
## module_field -> Constr . DOT module_fun [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Constr . DOT Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch LBRACE WILD
##
## Ends in an error in state: 358.
##
## update_record -> LBRACE . ELLIPSIS path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch LBRACKET VBAR
##
## Ends in an error in state: 345.
##
## list__(expr) -> LBRACKET . option(sep_or_term_list(expr,SEMI)) RBRACKET [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch LBRACKET WILD SEMI VBAR
##
## Ends in an error in state: 352.
##
## nsepseq(expr,SEMI) -> expr SEMI . nsepseq(expr,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(expr,SEMI)) -> expr SEMI . seq(__anonymous_0(expr,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch LBRACKET WILD SEMI WILD SEMI VBAR
##
## Ends in an error in state: 356.
##
## nsepseq(expr,SEMI) -> expr SEMI . nsepseq(expr,SEMI) [ RBRACKET ]
## seq(__anonymous_0(expr,SEMI)) -> expr SEMI . seq(__anonymous_0(expr,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch LBRACKET WILD SEMI WILD VBAR
##
## Ends in an error in state: 355.
##
## nsepseq(expr,SEMI) -> expr . [ RBRACKET ]
## nsepseq(expr,SEMI) -> expr . SEMI nsepseq(expr,SEMI) [ RBRACKET ]
## seq(__anonymous_0(expr,SEMI)) -> expr . SEMI seq(__anonymous_0(expr,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch LBRACKET WILD VBAR
##
## Ends in an error in state: 351.
##
## nsepseq(expr,SEMI) -> expr . [ RBRACKET ]
## nsepseq(expr,SEMI) -> expr . SEMI nsepseq(expr,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(expr,SEMI)) -> expr . SEMI seq(__anonymous_0(expr,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch LPAR VBAR
##
## Ends in an error in state: 194.
##
## par(expr) -> LPAR . expr RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch LPAR WILD VBAR
##
## Ends in an error in state: 487.
##
## par(expr) -> LPAR expr . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch VBAR
##
## Ends in an error in state: 188.
##
## switch_expr(base_cond) -> Switch . switch_expr_ LBRACE cases(base_cond) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR LBRACKET VBAR
##
## Ends in an error in state: 384.
##
## list__(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,SEMI)) RBRACKET [ COMMA ARROW ]
## pattern -> LBRACKET . sub_pattern COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR LBRACKET WILD COMMA ELLIPSIS VBAR
##
## Ends in an error in state: 387.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS . sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR LBRACKET WILD COMMA ELLIPSIS WILD WILD
##
## Ends in an error in state: 388.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern . RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR LBRACKET WILD COMMA WILD
##
## Ends in an error in state: 386.
##
## pattern -> LBRACKET sub_pattern COMMA . ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR LBRACKET WILD WILD
##
## Ends in an error in state: 385.
##
## nsepseq(sub_pattern,SEMI) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,SEMI) -> sub_pattern . SEMI nsepseq(sub_pattern,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,SEMI)) -> sub_pattern . SEMI seq(__anonymous_0(sub_pattern,SEMI)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern . COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR LPAR Bytes RPAR WILD
##
## Ends in an error in state: 391.
##
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR VBAR
##
## Ends in an error in state: 518.
##
## case_clause(base_cond) -> VBAR . pattern ARROW base_cond option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD ARROW Bytes SEMI WILD
##
## Ends in an error in state: 526.
##
## nseq(case_clause(base_cond)) -> case_clause(base_cond) . seq(case_clause(base_cond)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD ARROW Bytes VBAR Bytes ARROW Bytes SEMI WILD
##
## Ends in an error in state: 528.
##
## seq(case_clause(base_cond)) -> case_clause(base_cond) . seq(case_clause(base_cond)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD ARROW VBAR
##
## Ends in an error in state: 520.
##
## case_clause(base_cond) -> VBAR pattern ARROW . base_cond option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD ARROW WILD Type
##
## Ends in an error in state: 521.
##
## case_clause(base_cond) -> VBAR pattern ARROW base_cond . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW base_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD COMMA Bytes RPAR
##
## Ends in an error in state: 519.
##
## case_clause(base_cond) -> VBAR pattern . ARROW base_cond option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 137, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 140, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 390, spurious reduction of production pattern -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD COMMA VBAR
##
## Ends in an error in state: 136.
##
## tuple(sub_pattern) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 138.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD COMMA WILD WILD
##
## Ends in an error in state: 137.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RPAR ARROW ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE VBAR WILD WILD
##
## Ends in an error in state: 437.
##
## pattern -> core_pattern . [ ARROW ]
## sub_pattern -> core_pattern . [ COMMA ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD LBRACE WILD
##
## Ends in an error in state: 517.
##
## switch_expr(base_cond) -> Switch switch_expr_ LBRACE . cases(base_cond) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Switch switch_expr_ LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD WILD
##
## Ends in an error in state: 516.
##
## switch_expr(base_cond) -> Switch switch_expr_ . LBRACE cases(base_cond) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Switch switch_expr_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: VBAR
##
## Ends in an error in state: 540.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD ARROW VBAR
##
## Ends in an error in state: 326.
##
## fun_expr(expr) -> disj_expr_level ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD BOOL_AND VBAR
##
## Ends in an error in state: 280.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD BOOL_OR VBAR
##
## Ends in an error in state: 324.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD CAT VBAR
##
## Ends in an error in state: 303.
##
## bin_op(add_expr_level,CAT,cat_expr_level) -> add_expr_level CAT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level CAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON Ident LPAR Ident COMMA WILD
##
## Ends in an error in state: 242.
##
## nsepseq(type_expr_simple,COMMA) -> type_expr_simple COMMA . nsepseq(type_expr_simple,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr_simple COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON Ident LPAR Ident VBAR
##
## Ends in an error in state: 241.
##
## nsepseq(type_expr_simple,COMMA) -> type_expr_simple . [ RPAR ]
## nsepseq(type_expr_simple,COMMA) -> type_expr_simple . COMMA nsepseq(type_expr_simple,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr_simple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production option(type_expr_simple_args) ->
## In state 250, spurious reduction of production type_expr_simple -> Ident option(type_expr_simple_args)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON Ident LPAR WILD
##
## Ends in an error in state: 240.
##
## par(nsepseq(type_expr_simple,COMMA)) -> LPAR . nsepseq(type_expr_simple,COMMA) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON Ident WILD
##
## Ends in an error in state: 239.
##
## type_expr_simple -> Ident . option(type_expr_simple_args) [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON LPAR Ident ARROW Ident VBAR
##
## Ends in an error in state: 256.
##
## type_expr_simple -> LPAR type_expr_simple ARROW type_expr_simple . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr_simple ARROW type_expr_simple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production option(type_expr_simple_args) ->
## In state 250, spurious reduction of production type_expr_simple -> Ident option(type_expr_simple_args)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON LPAR Ident ARROW WILD
##
## Ends in an error in state: 255.
##
## type_expr_simple -> LPAR type_expr_simple ARROW . type_expr_simple RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr_simple ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON LPAR Ident COMMA WILD
##
## Ends in an error in state: 253.
##
## tuple(type_expr_simple) -> type_expr_simple COMMA . nsepseq(type_expr_simple,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr_simple COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON LPAR Ident RPAR WILD
##
## Ends in an error in state: 263.
##
## add_expr_level -> mult_expr_level . [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level . Mod unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON LPAR Ident VBAR
##
## Ends in an error in state: 251.
##
## par(type_expr_simple) -> LPAR type_expr_simple . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## tuple(type_expr_simple) -> type_expr_simple . COMMA nsepseq(type_expr_simple,COMMA) [ RPAR ]
## type_expr_simple -> LPAR type_expr_simple . ARROW type_expr_simple RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr_simple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 239, spurious reduction of production option(type_expr_simple_args) ->
## In state 250, spurious reduction of production type_expr_simple -> Ident option(type_expr_simple_args)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON LPAR WILD
##
## Ends in an error in state: 238.
##
## par(tuple(type_expr_simple)) -> LPAR . tuple(type_expr_simple) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## par(type_expr_simple) -> LPAR . type_expr_simple RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## type_expr_simple -> LPAR . type_expr_simple ARROW type_expr_simple RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD COLON WILD
##
## Ends in an error in state: 237.
##
## type_annotation_simple -> COLON . type_expr_simple [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD EQEQ VBAR
##
## Ends in an error in state: 313.
##
## bin_op(comp_expr_level,EQEQ,cat_expr_level) -> comp_expr_level EQEQ . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD GE VBAR
##
## Ends in an error in state: 311.
##
## bin_op(comp_expr_level,GE,cat_expr_level) -> comp_expr_level GE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD GT VBAR
##
## Ends in an error in state: 309.
##
## bin_op(comp_expr_level,GT,cat_expr_level) -> comp_expr_level GT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD LE VBAR
##
## Ends in an error in state: 307.
##
## bin_op(comp_expr_level,LE,cat_expr_level) -> comp_expr_level LE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD LPAR VBAR
##
## Ends in an error in state: 267.
##
## par(nsepseq(expr,COMMA)) -> LPAR . nsepseq(expr,COMMA) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD LPAR WILD COMMA VBAR
##
## Ends in an error in state: 274.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD LPAR WILD VBAR
##
## Ends in an error in state: 273.
##
## nsepseq(expr,COMMA) -> expr . [ RPAR ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD LT VBAR
##
## Ends in an error in state: 305.
##
## bin_op(comp_expr_level,LT,cat_expr_level) -> comp_expr_level LT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD MINUS VBAR
##
## Ends in an error in state: 301.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD MINUS WILD COLON LPAR Ident RPAR WILD
##
## Ends in an error in state: 302.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS mult_expr_level . [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level . Mod unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS mult_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD Mod VBAR
##
## Ends in an error in state: 299.
##
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level Mod . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Mod
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD NE VBAR
##
## Ends in an error in state: 282.
##
## bin_op(comp_expr_level,NE,cat_expr_level) -> comp_expr_level NE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD Or VBAR
##
## Ends in an error in state: 277.
##
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level Or . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
##
## The known suffix of the stack is as follows:
## disj_expr_level Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD PLUS VBAR
##
## Ends in an error in state: 295.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD PLUS WILD COLON LPAR Ident RPAR WILD
##
## Ends in an error in state: 296.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS mult_expr_level . [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level . Mod unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS mult_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD SLASH VBAR
##
## Ends in an error in state: 297.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD TIMES VBAR
##
## Ends in an error in state: 264.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD VBAR
##
## Ends in an error in state: 542.
##
## interactive_expr -> expr_with_let_expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr_with_let_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 408, spurious reduction of production expr_with_let_expr -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD WILD
##
## Ends in an error in state: 266.
##
## call_expr -> core_expr . par(nsepseq(expr,COMMA)) [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## call_expr -> core_expr . unit [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## call_expr_level_in -> core_expr . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr LBRACE
##
## Ends in an error in state: 88.
##
## let_declaration -> seq(Attr) . Let let_binding [ Type SEMI Let EOF Attr ]
## let_declaration -> seq(Attr) . Let Rec let_binding [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 34, spurious reduction of production seq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr WILD
##
## Ends in an error in state: 33.
##
## seq(Attr) -> Attr . seq(Attr) [ VBAR Let LBRACE Ident Constr ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident WILD
##
## Ends in an error in state: 173.
##
## let_pattern_simple -> Ident . [ EQ COLON ]
## sub_irrefutable -> Ident . [ COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes COMMA Ident EQ Bytes COMMA WILD
##
## Ends in an error in state: 153.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes COMMA Ident EQ Bytes WILD
##
## Ends in an error in state: 152.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes COMMA WILD
##
## Ends in an error in state: 149.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes RBRACE WILD
##
## Ends in an error in state: 177.
##
## let_pattern_simple -> record_pattern . [ EQ COLON ]
## sub_irrefutable -> record_pattern . [ COMMA ]
##
## The known suffix of the stack is as follows:
## record_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes WILD
##
## Ends in an error in state: 148.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ VBAR
##
## Ends in an error in state: 98.
##
## field_pattern -> Ident EQ . sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident WILD
##
## Ends in an error in state: 97.
##
## field_pattern -> Ident . EQ sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE WILD
##
## Ends in an error in state: 96.
##
## record_pattern -> LBRACE . sep_or_term_list(field_pattern,COMMA) RBRACE [ SEMI RPAR RBRACKET RBRACE EQ COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some VBAR
##
## Ends in an error in state: 109.
##
## constr_pattern -> C_Some . sub_pattern [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET VBAR
##
## Ends in an error in state: 104.
##
## list__(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,SEMI)) RBRACKET [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET WILD SEMI VBAR
##
## Ends in an error in state: 122.
##
## nsepseq(sub_pattern,SEMI) -> sub_pattern SEMI . nsepseq(sub_pattern,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,SEMI)) -> sub_pattern SEMI . seq(__anonymous_0(sub_pattern,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET WILD SEMI WILD SEMI VBAR
##
## Ends in an error in state: 124.
##
## nsepseq(sub_pattern,SEMI) -> sub_pattern SEMI . nsepseq(sub_pattern,SEMI) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,SEMI)) -> sub_pattern SEMI . seq(__anonymous_0(sub_pattern,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET WILD SEMI WILD WILD
##
## Ends in an error in state: 123.
##
## nsepseq(sub_pattern,SEMI) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,SEMI) -> sub_pattern . SEMI nsepseq(sub_pattern,SEMI) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,SEMI)) -> sub_pattern . SEMI seq(__anonymous_0(sub_pattern,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET WILD WILD
##
## Ends in an error in state: 121.
##
## nsepseq(sub_pattern,SEMI) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,SEMI) -> sub_pattern . SEMI nsepseq(sub_pattern,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,SEMI)) -> sub_pattern . SEMI seq(__anonymous_0(sub_pattern,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LPAR VBAR
##
## Ends in an error in state: 103.
##
## par(ptuple) -> LPAR . ptuple RPAR [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
## par(sub_pattern) -> LPAR . sub_pattern RPAR [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
## unit -> LPAR . RPAR [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LPAR WILD COMMA Bytes ARROW
##
## Ends in an error in state: 141.
##
## par(ptuple) -> LPAR ptuple . RPAR [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR ptuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 137, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 140, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 133, spurious reduction of production ptuple -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LPAR WILD WILD
##
## Ends in an error in state: 134.
##
## par(sub_pattern) -> LPAR sub_pattern . RPAR [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr VBAR
##
## Ends in an error in state: 108.
##
## constr_pattern -> Constr . sub_pattern [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
## constr_pattern -> Constr . [ SEMI RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR RPAR WILD
##
## Ends in an error in state: 174.
##
## let_pattern_simple -> unit . [ EQ COLON ]
## sub_irrefutable -> unit . [ COMMA ]
##
## The known suffix of the stack is as follows:
## unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR True WILD
##
## Ends in an error in state: 171.
##
## par(closed_irrefutable) -> LPAR closed_irrefutable . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR closed_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Verbatim
##
## Ends in an error in state: 92.
##
## par(closed_irrefutable) -> LPAR . closed_irrefutable RPAR [ RPAR EQ COMMA COLON ]
## unit -> LPAR . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR WILD COLON Verbatim
##
## Ends in an error in state: 168.
##
## typed_pattern -> irrefutable COLON . type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR WILD COMMA Ident EQ
##
## Ends in an error in state: 167.
##
## closed_irrefutable -> irrefutable . [ RPAR ]
## typed_pattern -> irrefutable . COLON type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable
## In state 166, spurious reduction of production tuple(sub_irrefutable) -> sub_irrefutable COMMA nsepseq(sub_irrefutable,COMMA)
## In state 158, spurious reduction of production irrefutable -> tuple(sub_irrefutable)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR WILD RPAR WILD
##
## Ends in an error in state: 178.
##
## let_pattern_simple -> par(closed_irrefutable) . [ EQ COLON ]
## sub_irrefutable -> par(closed_irrefutable) . [ COMMA ]
##
## The known suffix of the stack is as follows:
## par(closed_irrefutable)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR WILD WILD
##
## Ends in an error in state: 159.
##
## irrefutable -> sub_irrefutable . [ RPAR COLON ]
## tuple(sub_irrefutable) -> sub_irrefutable . COMMA nsepseq(sub_irrefutable,COMMA) [ RPAR COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Rec Verbatim
##
## Ends in an error in state: 91.
##
## let_declaration -> seq(Attr) Let Rec . let_binding [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Verbatim
##
## Ends in an error in state: 89.
##
## let_declaration -> seq(Attr) Let . let_binding [ Type SEMI Let EOF Attr ]
## let_declaration -> seq(Attr) Let . Rec let_binding [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Verbatim
##
## Ends in an error in state: 180.
##
## type_annotation -> COLON . type_expr [ EQ ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON WILD Type
##
## Ends in an error in state: 183.
##
## let_binding -> let_pattern_simple option(type_annotation) . EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## let_pattern_simple option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production fun_type -> cartesian
## In state 62, spurious reduction of production type_expr -> fun_type
## In state 181, spurious reduction of production type_annotation -> COLON type_expr
## In state 182, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA Ident RPAR
##
## Ends in an error in state: 179.
##
## let_binding -> let_pattern_simple . option(type_annotation) EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## let_pattern_simple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable
## In state 166, spurious reduction of production tuple(sub_irrefutable) -> sub_irrefutable COMMA nsepseq(sub_irrefutable,COMMA)
## In state 175, spurious reduction of production let_pattern_simple -> tuple(sub_irrefutable)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA Verbatim
##
## Ends in an error in state: 160.
##
## tuple(sub_irrefutable) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 162.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA WILD WILD
##
## Ends in an error in state: 161.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable . [ RPAR EQ COLON ]
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable . COMMA nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 533.
##
## declaration -> let_declaration . option(SEMI) [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## let_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level_in -> core_expr
## In state 284, spurious reduction of production option(type_annotation_simple) ->
## In state 285, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple)
## In state 286, spurious reduction of production unary_expr_level -> call_expr_level
## In state 234, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 294, spurious reduction of production cat_expr_level -> add_expr_level
## In state 315, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 322, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 329, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production base_expr -> disj_expr_level
## In state 333, spurious reduction of production base_cond -> base_expr
## In state 334, spurious reduction of production expr -> base_cond
## In state 530, spurious reduction of production let_binding -> let_pattern_simple option(type_annotation) EQ expr
## In state 532, spurious reduction of production let_declaration -> seq(Attr) Let let_binding
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD EQ VBAR
##
## Ends in an error in state: 184.
##
## let_binding -> let_pattern_simple option(type_annotation) EQ . expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## let_pattern_simple option(type_annotation) EQ
##

This is an incorrect let binding.
Examples of correct let bindings:
let a: int = 4;
let (a: int, b: int) = (1, 2);
let func = (a: int, b: int) => a + b;

contract: Let WILD WILD
##
## Ends in an error in state: 90.
##
## let_pattern_simple -> WILD . [ EQ COLON ]
## sub_irrefutable -> WILD . [ COMMA ]
##
## The known suffix of the stack is as follows:
## WILD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr Attr Let
##
## Ends in an error in state: 35.
##
## nseq(Attr) -> Attr seq(Attr) . [ Constr ]
## seq(Attr) -> Attr seq(Attr) . [ VBAR LBRACE ]
##
## The known suffix of the stack is as follows:
## Attr seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 34, spurious reduction of production seq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr Constr LPAR Verbatim
##
## Ends in an error in state: 43.
##
## variant -> nseq(Attr) Constr LPAR . fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr Constr LPAR WILD Type
##
## Ends in an error in state: 44.
##
## variant -> nseq(Attr) Constr LPAR fun_type . RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr LPAR fun_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production fun_type -> cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr Constr WILD
##
## Ends in an error in state: 42.
##
## variant -> nseq(Attr) Constr . [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## variant -> nseq(Attr) Constr . LPAR fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr WILD
##
## Ends in an error in state: 32.
##
## nseq(Attr) -> Attr . seq(Attr) [ Constr ]
## seq(Attr) -> Attr . seq(Attr) [ VBAR LBRACE ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr DOT WILD
##
## Ends in an error in state: 10.
##
## core_type -> Constr DOT . Ident [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr LPAR Ident RPAR WILD
##
## Ends in an error in state: 36.
##
## nsepseq(variant,VBAR) -> variant . [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## nsepseq(variant,VBAR) -> variant . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## variant
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr LPAR Verbatim
##
## Ends in an error in state: 29.
##
## variant -> Constr LPAR . fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr LPAR WILD Type
##
## Ends in an error in state: 30.
##
## variant -> Constr LPAR fun_type . RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr LPAR fun_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production fun_type -> cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr RPAR
##
## Ends in an error in state: 85.
##
## declaration -> type_decl . option(SEMI) [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production variant -> Constr
## In state 36, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 61, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 51, spurious reduction of production type_expr -> sum_type
## In state 84, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr SEMI WILD
##
## Ends in an error in state: 537.
##
## declarations -> declaration . [ EOF ]
## declarations -> declaration . declarations [ EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr VBAR WILD
##
## Ends in an error in state: 37.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr WILD
##
## Ends in an error in state: 28.
##
## core_type -> Constr . DOT Ident [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ARROW ]
## variant -> Constr . [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## variant -> Constr . LPAR fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR Verbatim
##
## Ends in an error in state: 8.
##
## par(type_args) -> LPAR . type_args RPAR [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR WILD COMMA Verbatim
##
## Ends in an error in state: 18.
##
## tuple(fun_type) -> fun_type COMMA . nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 21.
##
## nsepseq(fun_type,COMMA) -> fun_type COMMA . nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR WILD COMMA WILD Type
##
## Ends in an error in state: 20.
##
## nsepseq(fun_type,COMMA) -> fun_type . [ RPAR ]
## nsepseq(fun_type,COMMA) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production fun_type -> cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR WILD Type
##
## Ends in an error in state: 17.
##
## tuple(fun_type) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
## type_args -> fun_type . [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production fun_type -> cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident WILD
##
## Ends in an error in state: 7.
##
## core_type -> Ident . [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ARROW ]
## core_type -> Ident . par(type_args) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Attr Let
##
## Ends in an error in state: 56.
##
## field_decl -> seq(Attr) . Ident [ RBRACE COMMA ]
## field_decl -> seq(Attr) . Ident COLON type_expr_field [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 34, spurious reduction of production seq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COLON String WILD
##
## Ends in an error in state: 71.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COLON Verbatim
##
## Ends in an error in state: 58.
##
## field_decl -> seq(Attr) Ident COLON . type_expr_field [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COMMA Ident COLON String WILD
##
## Ends in an error in state: 75.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 76.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COMMA WILD
##
## Ends in an error in state: 72.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident WILD
##
## Ends in an error in state: 57.
##
## field_decl -> seq(Attr) Ident . [ RBRACE COMMA ]
## field_decl -> seq(Attr) Ident . COLON type_expr_field [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE WILD
##
## Ends in an error in state: 55.
##
## record_type -> seq(Attr) LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Constr Type
##
## Ends in an error in state: 47.
##
## par(type_expr) -> LPAR type_expr . RPAR [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production variant -> Constr
## In state 36, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 61, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 51, spurious reduction of production type_expr -> sum_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Verbatim
##
## Ends in an error in state: 6.
##
## par(tuple(core_type)) -> LPAR . tuple(core_type) RPAR [ Type SEMI RPAR Let EQ EOF COMMA Attr ARROW ]
## par(type_expr) -> LPAR . type_expr RPAR [ Type SEMI RPAR Let EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD COMMA LPAR Verbatim
##
## Ends in an error in state: 59.
##
## par(type_expr) -> LPAR . type_expr RPAR [ RPAR RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD COMMA Verbatim
##
## Ends in an error in state: 79.
##
## tuple(core_type) -> core_type COMMA . nsepseq(core_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 82.
##
## nsepseq(core_type,COMMA) -> core_type COMMA . nsepseq(core_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD COMMA WILD WILD
##
## Ends in an error in state: 81.
##
## nsepseq(core_type,COMMA) -> core_type . [ RPAR ]
## nsepseq(core_type,COMMA) -> core_type . COMMA nsepseq(core_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD WILD
##
## Ends in an error in state: 78.
##
## cartesian -> core_type . [ RPAR ARROW ]
## tuple(core_type) -> core_type . COMMA nsepseq(core_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR Attr Attr Let
##
## Ends in an error in state: 41.
##
## variant -> nseq(Attr) . Constr [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## variant -> nseq(Attr) . Constr LPAR fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 34, spurious reduction of production seq(Attr) -> Attr seq(Attr)
## In state 40, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR Attr WILD
##
## Ends in an error in state: 39.
##
## nseq(Attr) -> Attr . seq(Attr) [ Constr ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR Constr WILD
##
## Ends in an error in state: 38.
##
## variant -> Constr . [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## variant -> Constr . LPAR fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR WILD
##
## Ends in an error in state: 53.
##
## sum_type -> seq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Verbatim
##
## Ends in an error in state: 3.
##
## type_decl -> Type Ident EQ . type_expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ WILD ARROW Constr WILD
##
## Ends in an error in state: 9.
##
## core_type -> Constr . DOT Ident [ Type SEMI RPAR Let EQ EOF COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ WILD ARROW Verbatim
##
## Ends in an error in state: 25.
##
## fun_type -> cartesian ARROW . fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## cartesian ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ WILD WILD
##
## Ends in an error in state: 24.
##
## fun_type -> cartesian . [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## fun_type -> cartesian . ARROW fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident WILD
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . EQ type_expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type WILD
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Ident EQ type_expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: WILD
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>
