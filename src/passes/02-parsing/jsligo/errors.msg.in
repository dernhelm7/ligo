interactive_expr: LBRACE Constr XOR_EQ
##
## Ends in an error in state: 256.
##
## property -> Constr . [ RBRACE COMMA ]
## property_name -> Constr . [ COLON ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS True SEMI
##
## Ends in an error in state: 260.
##
## properties -> property . COMMA properties [ RBRACE ]
## properties -> property . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 255, spurious reduction of production property -> ELLIPSIS assignment_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS XOR_EQ
##
## Ends in an error in state: 87.
##
## property -> ELLIPSIS . assignment_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA XOR_EQ
##
## Ends in an error in state: 261.
##
## properties -> property COMMA . properties [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident XOR_EQ
##
## Ends in an error in state: 86.
##
## property -> Ident . [ RBRACE COMMA ]
## property_name -> Ident . [ COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE String COLON XOR_EQ
##
## Ends in an error in state: 258.
##
## property -> property_name COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_name COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE String XOR_EQ
##
## Ends in an error in state: 257.
##
## property -> property_name . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE XOR_EQ
##
## Ends in an error in state: 83.
##
## object_literal -> LBRACE . properties RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: True SEMI
##
## Ends in an error in state: 332.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: XOR_EQ
##
## Ends in an error in state: 330.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: BOOL_NOT XOR_EQ
##
## Ends in an error in state: 97.
##
## unary_expr_level -> BOOL_NOT . call_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## BOOL_NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const XOR_EQ
##
## Ends in an error in state: 234.
##
## declaration -> Const . binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Constr ARROW XOR_EQ
##
## Ends in an error in state: 95.
##
## arrow_function -> Constr ARROW . arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Constr ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Constr XOR_EQ
##
## Ends in an error in state: 94.
##
## arrow_function -> Constr . ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## member_expr -> Constr . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Ident ARROW LBRACE XOR_EQ
##
## Ends in an error in state: 91.
##
## arrow_function_body -> LBRACE . statements RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Ident ARROW XOR_EQ
##
## Ends in an error in state: 90.
##
## arrow_function -> Ident ARROW . arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Ident ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Ident XOR_EQ
##
## Ends in an error in state: 89.
##
## arrow_function -> Ident . ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## member_expr -> Ident . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR True RPAR True Else XOR_EQ
##
## Ends in an error in state: 239.
##
## if_else_statement -> If par(expr) statement Else . statement [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(expr) statement Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR True RPAR True RPAR
##
## Ends in an error in state: 238.
##
## if_else_statement -> If par(expr) statement . Else statement [ SEMI RBRACE Else EOF Default Case ]
## if_else_statement -> If par(expr) statement . [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(expr) statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 243, spurious reduction of production statement -> expr_statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR True RPAR XOR_EQ
##
## Ends in an error in state: 233.
##
## if_else_statement -> If par(expr) . statement Else statement [ SEMI RBRACE Else EOF Default Case ]
## if_else_statement -> If par(expr) . statement [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR True SEMI
##
## Ends in an error in state: 231.
##
## par(expr) -> LPAR expr . RPAR [ Type True Switch String Return New MINUS Let LPAR LBRACKET LBRACE Int If Ident False Constr Const Bytes BOOL_NOT ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR XOR_EQ
##
## Ends in an error in state: 230.
##
## par(expr) -> LPAR . expr RPAR [ Type True Switch String Return New MINUS Let LPAR LBRACKET LBRACE Int If Ident False Constr Const Bytes BOOL_NOT ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If XOR_EQ
##
## Ends in an error in state: 229.
##
## if_else_statement -> If . par(expr) statement Else statement [ SEMI RBRACE Else EOF Default Case ]
## if_else_statement -> If . par(expr) statement [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE True EOF
##
## Ends in an error in state: 248.
##
## statements -> statement . SEMI option(statements) [ RBRACE Default Case ]
## statements -> statement . [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 243, spurious reduction of production statement -> expr_statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE XOR_EQ
##
## Ends in an error in state: 228.
##
## block_statement -> LBRACE . statements RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACKET COMMA XOR_EQ
##
## Ends in an error in state: 271.
##
## array_items -> array_item COMMA . array_items [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## array_item COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACKET ELLIPSIS XOR_EQ
##
## Ends in an error in state: 265.
##
## array_item -> ELLIPSIS . expr [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACKET True COLON
##
## Ends in an error in state: 270.
##
## array_items -> array_item . COMMA array_items [ RBRACKET ]
## array_items -> array_item . [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## array_item
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
## In state 267, spurious reduction of production array_item -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACKET XOR_EQ
##
## Ends in an error in state: 82.
##
## array_literal -> LBRACKET . array_items RBRACKET [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR LBRACE Ident RBRACE XOR_EQ
##
## Ends in an error in state: 276.
##
## expr -> object_literal . [ COLON ]
## member_expr -> LPAR object_literal . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR object_literal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR MINUS Bytes SEMI
##
## Ends in an error in state: 278.
##
## assignment_expr -> expr_statement . [ COLON ]
## expr_sequence -> expr_statement . COMMA expr_sequence [ RPAR ]
## expr_sequence -> expr_statement . [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr_statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 302, spurious reduction of production unary_expr_level -> MINUS call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR ARROW XOR_EQ
##
## Ends in an error in state: 274.
##
## arrow_function -> LPAR RPAR ARROW . arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR COLON WILD ARROW XOR_EQ
##
## Ends in an error in state: 81.
##
## arrow_function -> LPAR RPAR COLON type_expr ARROW . arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR COLON type_expr ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR COLON WILD XOR_EQ
##
## Ends in an error in state: 80.
##
## arrow_function -> LPAR RPAR COLON type_expr . ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR COLON XOR_EQ
##
## Ends in an error in state: 79.
##
## arrow_function -> LPAR RPAR COLON . type_expr ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR XOR_EQ
##
## Ends in an error in state: 78.
##
## arrow_function -> LPAR RPAR . ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## arrow_function -> LPAR RPAR . COLON type_expr ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True As WILD XOR_EQ
##
## Ends in an error in state: 299.
##
## call_expr_level -> LPAR call_expr_level As type_expr . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR call_expr_level As type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True As XOR_EQ
##
## Ends in an error in state: 298.
##
## call_expr_level -> LPAR call_expr_level As . type_expr RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR call_expr_level As
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON Constr RPAR ARROW XOR_EQ
##
## Ends in an error in state: 290.
##
## arrow_function -> LPAR expr_annot_sequence RPAR ARROW . arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR expr_annot_sequence RPAR ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON Constr RPAR COLON WILD ARROW XOR_EQ
##
## Ends in an error in state: 288.
##
## arrow_function -> LPAR expr_annot_sequence RPAR COLON type_expr ARROW . arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR expr_annot_sequence RPAR COLON type_expr ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON Constr RPAR COLON WILD XOR_EQ
##
## Ends in an error in state: 287.
##
## arrow_function -> LPAR expr_annot_sequence RPAR COLON type_expr . ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR expr_annot_sequence RPAR COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON Constr RPAR COLON XOR_EQ
##
## Ends in an error in state: 286.
##
## arrow_function -> LPAR expr_annot_sequence RPAR COLON . type_expr ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR expr_annot_sequence RPAR COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON Constr RPAR XOR_EQ
##
## Ends in an error in state: 285.
##
## arrow_function -> LPAR expr_annot_sequence RPAR . ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## arrow_function -> LPAR expr_annot_sequence RPAR . COLON type_expr ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR expr_annot_sequence RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON WILD COMMA True SEMI
##
## Ends in an error in state: 292.
##
## expr_annot_sequence -> expr . COLON type_expr COMMA expr_annot_sequence [ RPAR ]
## expr_annot_sequence -> expr . COLON type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON WILD COMMA XOR_EQ
##
## Ends in an error in state: 295.
##
## expr_annot_sequence -> expr COLON type_expr COMMA . expr_annot_sequence [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COLON type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON WILD XOR_EQ
##
## Ends in an error in state: 294.
##
## expr_annot_sequence -> expr COLON type_expr . COMMA expr_annot_sequence [ RPAR ]
## expr_annot_sequence -> expr COLON type_expr . [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COLON XOR_EQ
##
## Ends in an error in state: 293.
##
## expr_annot_sequence -> expr COLON . type_expr COMMA expr_annot_sequence [ RPAR ]
## expr_annot_sequence -> expr COLON . type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True COMMA XOR_EQ
##
## Ends in an error in state: 279.
##
## expr_sequence -> expr_statement COMMA . expr_sequence [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr_statement COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR True SEMI
##
## Ends in an error in state: 297.
##
## call_expr_level -> LPAR call_expr_level . As type_expr RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## unary_expr_level -> call_expr_level . [ TIMES SLASH RPAR REM PLUS NE MINUS LT LE GT GE EQ2 EQ COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## LPAR call_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR XOR_EQ
##
## Ends in an error in state: 77.
##
## arrow_function -> LPAR . RPAR ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## arrow_function -> LPAR . RPAR COLON type_expr ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## arrow_function -> LPAR . expr_annot_sequence RPAR ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## arrow_function -> LPAR . expr_annot_sequence RPAR COLON type_expr ARROW arrow_function_body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## call_expr_level -> LPAR . call_expr_level As type_expr RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> LPAR . object_literal RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> LPAR . expr_sequence RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Constr COLON XOR_EQ
##
## Ends in an error in state: 213.
##
## object_binding_property -> Constr COLON . binding_initializer [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Constr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Constr XOR_EQ
##
## Ends in an error in state: 212.
##
## object_binding_property -> Constr . option(initializer_) [ RBRACE COMMA ]
## object_binding_property -> Constr . COLON binding_initializer [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE ELLIPSIS Constr XOR_EQ
##
## Ends in an error in state: 221.
##
## object_binding_pattern -> LBRACE object_binding_pattern_items . RBRACE [ EQ COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE object_binding_pattern_items
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COLON XOR_EQ
##
## Ends in an error in state: 199.
##
## object_binding_property -> Ident COLON . binding_initializer [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA XOR_EQ
##
## Ends in an error in state: 218.
##
## object_binding_pattern_items -> object_binding_property COMMA . option(object_binding_pattern_items) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## object_binding_property COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ True SEMI
##
## Ends in an error in state: 217.
##
## object_binding_pattern_items -> object_binding_property . COMMA option(object_binding_pattern_items) [ RBRACE ]
## object_binding_pattern_items -> object_binding_property . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## object_binding_property
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
## In state 198, spurious reduction of production initializer_expr -> expr
## In state 197, spurious reduction of production initializer_ -> EQ initializer_expr
## In state 211, spurious reduction of production option(initializer_) -> initializer_
## In state 210, spurious reduction of production object_binding_property -> Ident option(initializer_)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident XOR_EQ
##
## Ends in an error in state: 195.
##
## object_binding_property -> Ident . option(initializer_) [ RBRACE COMMA ]
## object_binding_property -> Ident . COLON binding_initializer [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE XOR_EQ
##
## Ends in an error in state: 194.
##
## object_binding_pattern -> LBRACE . object_binding_pattern_items RBRACE [ EQ COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACKET COMMA XOR_EQ
##
## Ends in an error in state: 191.
##
## array_binding_pattern_items -> array_binding_pattern_item COMMA . array_binding_pattern_items [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## array_binding_pattern_item COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACKET ELLIPSIS XOR_EQ
##
## Ends in an error in state: 183.
##
## rest -> ELLIPSIS . Constr [ RBRACKET RBRACE COMMA ]
## rest -> ELLIPSIS . Ident [ RBRACKET RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACKET WILD COLON
##
## Ends in an error in state: 190.
##
## array_binding_pattern_items -> array_binding_pattern_item . COMMA array_binding_pattern_items [ RBRACKET ]
## array_binding_pattern_items -> array_binding_pattern_item . [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## array_binding_pattern_item
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACKET XOR_EQ
##
## Ends in an error in state: 180.
##
## array_binding_pattern -> LBRACKET . array_binding_pattern_items RBRACKET [ RBRACKET EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON WILD XOR_EQ
##
## Ends in an error in state: 205.
##
## binding_initializer -> binding_pattern COLON type_expr . initializer_ [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON XOR_EQ
##
## Ends in an error in state: 204.
##
## binding_initializer -> binding_pattern COLON . type_expr initializer_ [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD EQ Bytes COMMA XOR_EQ
##
## Ends in an error in state: 226.
##
## nsepseq(binding_initializer,COMMA) -> binding_initializer COMMA . nsepseq(binding_initializer,COMMA) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## binding_initializer COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD EQ Bytes RPAR
##
## Ends in an error in state: 225.
##
## nsepseq(binding_initializer,COMMA) -> binding_initializer . [ SEMI RBRACE Else EOF Default Case ]
## nsepseq(binding_initializer,COMMA) -> binding_initializer . COMMA nsepseq(binding_initializer,COMMA) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## binding_initializer
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
## In state 198, spurious reduction of production initializer_expr -> expr
## In state 197, spurious reduction of production initializer_ -> EQ initializer_expr
## In state 207, spurious reduction of production binding_initializer -> binding_pattern initializer_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD EQ XOR_EQ
##
## Ends in an error in state: 196.
##
## initializer_ -> EQ . initializer_expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD XOR_EQ
##
## Ends in an error in state: 203.
##
## binding_initializer -> binding_pattern . initializer_ [ SEMI RBRACE Else EOF Default Case COMMA ]
## binding_initializer -> binding_pattern . COLON type_expr initializer_ [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let XOR_EQ
##
## Ends in an error in state: 178.
##
## declaration -> Let . binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: MINUS LPAR XOR_EQ
##
## Ends in an error in state: 76.
##
## call_expr_level -> LPAR . call_expr_level As type_expr RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## member_expr -> LPAR . object_literal RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND ]
## member_expr -> LPAR . expr_sequence RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: MINUS XOR_EQ
##
## Ends in an error in state: 75.
##
## unary_expr_level -> MINUS . call_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: New LPAR LBRACE Ident RBRACE XOR_EQ
##
## Ends in an error in state: 301.
##
## member_expr -> LPAR object_literal . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR object_literal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: New LPAR True SEMI
##
## Ends in an error in state: 280.
##
## expr_sequence -> expr_statement . COMMA expr_sequence [ RPAR ]
## expr_sequence -> expr_statement . [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr_statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: New LPAR XOR_EQ
##
## Ends in an error in state: 74.
##
## member_expr -> LPAR . object_literal RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> LPAR . expr_sequence RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: New True XOR_EQ
##
## Ends in an error in state: 304.
##
## member_expr -> member_expr . LBRACKET expr RBRACKET [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr . DOT Constr [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr . DOT Ident [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## new_expr -> member_expr . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: New XOR_EQ
##
## Ends in an error in state: 73.
##
## new_expr -> New . new_expr [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## New
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Return XOR_EQ
##
## Ends in an error in state: 92.
##
## return_statement -> Return . option(expr) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Return
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR True RPAR LBRACE Case True COLON XOR_EQ
##
## Ends in an error in state: 313.
##
## case_block -> Case expr COLON . option(statements) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR True RPAR LBRACE Case True SEMI
##
## Ends in an error in state: 312.
##
## case_block -> Case expr . COLON option(statements) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR True RPAR LBRACE Case XOR_EQ
##
## Ends in an error in state: 311.
##
## case_block -> Case . expr COLON option(statements) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR True RPAR LBRACE Default COLON XOR_EQ
##
## Ends in an error in state: 309.
##
## case_block -> Default COLON . option(statements) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Default COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR True RPAR LBRACE Default XOR_EQ
##
## Ends in an error in state: 308.
##
## case_block -> Default . COLON option(statements) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Default
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR True RPAR LBRACE XOR_EQ
##
## Ends in an error in state: 307.
##
## switch_statement -> Switch LPAR expr RPAR LBRACE . nseq(case_block) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch LPAR expr RPAR LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR True RPAR XOR_EQ
##
## Ends in an error in state: 306.
##
## switch_statement -> Switch LPAR expr RPAR . LBRACE nseq(case_block) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR True SEMI
##
## Ends in an error in state: 305.
##
## switch_statement -> Switch LPAR expr . RPAR LBRACE nseq(case_block) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR XOR_EQ
##
## Ends in an error in state: 71.
##
## switch_statement -> Switch LPAR . expr RPAR LBRACE nseq(case_block) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch XOR_EQ
##
## Ends in an error in state: 70.
##
## switch_statement -> Switch . LPAR expr RPAR LBRACE nseq(case_block) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True As
##
## Ends in an error in state: 108.
##
## add_expr_level -> mult_expr_level . [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level . REM unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True BOOL_AND XOR_EQ
##
## Ends in an error in state: 122.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True BOOL_OR XOR_EQ
##
## Ends in an error in state: 162.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True DOT XOR_EQ
##
## Ends in an error in state: 169.
##
## member_expr -> member_expr DOT . Constr [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr DOT . Ident [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True EQ XOR_EQ
##
## Ends in an error in state: 120.
##
## expr_statement -> disj_expr_level EQ . assignment_expr [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## disj_expr_level EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True EQ2 XOR_EQ
##
## Ends in an error in state: 148.
##
## bin_op(comp_expr_level,EQ2,add_expr_level) -> comp_expr_level EQ2 . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQ2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True GE XOR_EQ
##
## Ends in an error in state: 146.
##
## bin_op(comp_expr_level,GE,add_expr_level) -> comp_expr_level GE . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True GT XOR_EQ
##
## Ends in an error in state: 144.
##
## bin_op(comp_expr_level,GT,add_expr_level) -> comp_expr_level GT . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LBRACKET True SEMI
##
## Ends in an error in state: 167.
##
## member_expr -> member_expr LBRACKET expr . RBRACKET [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LBRACKET XOR_EQ
##
## Ends in an error in state: 166.
##
## member_expr -> member_expr LBRACKET . expr RBRACKET [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LE XOR_EQ
##
## Ends in an error in state: 142.
##
## bin_op(comp_expr_level,LE,add_expr_level) -> comp_expr_level LE . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LPAR RPAR LPAR XOR_EQ
##
## Ends in an error in state: 113.
##
## call_expr -> call_expr LPAR . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## par(nsepseq(expr,COMMA)) -> LPAR . nsepseq(expr,COMMA) RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## call_expr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LPAR RPAR XOR_EQ
##
## Ends in an error in state: 112.
##
## call_expr -> call_expr . par(nsepseq(expr,COMMA)) [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## call_expr -> call_expr . LPAR RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## call_expr_level -> call_expr . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## call_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LPAR True COMMA XOR_EQ
##
## Ends in an error in state: 117.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LPAR True SEMI
##
## Ends in an error in state: 116.
##
## nsepseq(expr,COMMA) -> expr . [ RPAR ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 115, spurious reduction of production assignment_expr -> expr_statement
## In state 164, spurious reduction of production expr -> assignment_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LPAR XOR_EQ
##
## Ends in an error in state: 102.
##
## call_expr -> member_expr LPAR . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## par(nsepseq(expr,COMMA)) -> LPAR . nsepseq(expr,COMMA) RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True LT XOR_EQ
##
## Ends in an error in state: 140.
##
## bin_op(comp_expr_level,LT,add_expr_level) -> comp_expr_level LT . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True MINUS True As
##
## Ends in an error in state: 139.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS mult_expr_level . [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level . REM unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS mult_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True MINUS XOR_EQ
##
## Ends in an error in state: 138.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True NE XOR_EQ
##
## Ends in an error in state: 124.
##
## bin_op(comp_expr_level,NE,add_expr_level) -> comp_expr_level NE . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True PLUS True As
##
## Ends in an error in state: 133.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS mult_expr_level . [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level . REM unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS mult_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True PLUS XOR_EQ
##
## Ends in an error in state: 132.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True REM XOR_EQ
##
## Ends in an error in state: 136.
##
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level REM . unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True RPAR
##
## Ends in an error in state: 324.
##
## nsepseq(toplevel_statement,SEMI) -> toplevel_statement . [ EOF ]
## nsepseq(toplevel_statement,SEMI) -> toplevel_statement . SEMI nsepseq(toplevel_statement,SEMI) [ EOF ]
##
## The known suffix of the stack is as follows:
## toplevel_statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 243, spurious reduction of production statement -> expr_statement
## In state 326, spurious reduction of production toplevel_statement -> statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True SEMI XOR_EQ
##
## Ends in an error in state: 325.
##
## nsepseq(toplevel_statement,SEMI) -> toplevel_statement SEMI . nsepseq(toplevel_statement,SEMI) [ EOF ]
##
## The known suffix of the stack is as follows:
## toplevel_statement SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True SLASH XOR_EQ
##
## Ends in an error in state: 134.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True TIMES XOR_EQ
##
## Ends in an error in state: 109.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: True XOR_EQ
##
## Ends in an error in state: 101.
##
## call_expr -> member_expr . par(nsepseq(expr,COMMA)) [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## call_expr -> member_expr . LPAR RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr . LBRACKET expr RBRACKET [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr . DOT Constr [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr . DOT Ident [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## new_expr -> member_expr . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Constr EQ XOR_EQ
##
## Ends in an error in state: 67.
##
## type_decl -> Type Constr EQ . type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type Constr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Constr XOR_EQ
##
## Ends in an error in state: 66.
##
## type_decl -> Type Constr . EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr DOT XOR_EQ
##
## Ends in an error in state: 16.
##
## core_type -> Constr DOT . Ident [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr XOR_EQ
##
## Ends in an error in state: 15.
##
## core_type -> Constr . [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
## core_type -> Constr . DOT Ident [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LT WILD RBRACKET
##
## Ends in an error in state: 28.
##
## core_type -> Ident LT nsepseq(type_expr,COMMA) . GT [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Ident LT nsepseq(type_expr,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production nsepseq(type_expr,COMMA) -> type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LT XOR_EQ
##
## Ends in an error in state: 14.
##
## core_type -> Ident LT . nsepseq(type_expr,COMMA) GT [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Ident LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident XOR_EQ
##
## Ends in an error in state: 13.
##
## core_type -> Ident . [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
## core_type -> Ident . LT nsepseq(type_expr,COMMA) GT [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COLON String XOR_EQ
##
## Ends in an error in state: 35.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COLON XOR_EQ
##
## Ends in an error in state: 12.
##
## field_decl -> Ident COLON . type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COMMA Ident COLON String XOR_EQ
##
## Ends in an error in state: 39.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COMMA Ident COMMA XOR_EQ
##
## Ends in an error in state: 40.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COMMA XOR_EQ
##
## Ends in an error in state: 36.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident XOR_EQ
##
## Ends in an error in state: 11.
##
## field_decl -> Ident . [ RBRACE COMMA ]
## field_decl -> Ident . COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE XOR_EQ
##
## Ends in an error in state: 10.
##
## record_type -> LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACKET WILD COMMA XOR_EQ
##
## Ends in an error in state: 19.
##
## nsepseq(type_expr,COMMA) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RBRACKET GT ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACKET WILD GT
##
## Ends in an error in state: 42.
##
## brackets(nsepseq(type_expr,COMMA)) -> LBRACKET nsepseq(type_expr,COMMA) . RBRACKET [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET nsepseq(type_expr,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production nsepseq(type_expr,COMMA) -> type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACKET WILD XOR_EQ
##
## Ends in an error in state: 18.
##
## nsepseq(type_expr,COMMA) -> type_expr . [ RBRACKET GT ]
## nsepseq(type_expr,COMMA) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RBRACKET GT ]
##
## The known suffix of the stack is as follows:
## type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACKET XOR_EQ
##
## Ends in an error in state: 9.
##
## brackets(nsepseq(type_expr,COMMA)) -> LBRACKET . nsepseq(type_expr,COMMA) RBRACKET [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Constr COLON XOR_EQ
##
## Ends in an error in state: 48.
##
## fun_type_arg -> Constr COLON . type_expr [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Constr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Constr XOR_EQ
##
## Ends in an error in state: 47.
##
## core_type -> Constr . [ RPAR ]
## core_type -> Constr . DOT Ident [ RPAR ]
## fun_type_arg -> Constr . COLON type_expr [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COLON Constr COMMA Constr XOR_EQ
##
## Ends in an error in state: 59.
##
## fun_type_arg -> Constr . COLON type_expr [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COLON Constr COMMA Ident XOR_EQ
##
## Ends in an error in state: 58.
##
## fun_type_arg -> Ident . COLON type_expr [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COLON Constr COMMA XOR_EQ
##
## Ends in an error in state: 57.
##
## nsepseq(fun_type_arg,COMMA) -> fun_type_arg COMMA . nsepseq(fun_type_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type_arg COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COLON Constr RPAR ARROW XOR_EQ
##
## Ends in an error in state: 54.
##
## fun_type -> LPAR nsepseq(fun_type_arg,COMMA) RPAR ARROW . fun_type [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(fun_type_arg,COMMA) RPAR ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COLON Constr RPAR XOR_EQ
##
## Ends in an error in state: 53.
##
## fun_type -> LPAR nsepseq(fun_type_arg,COMMA) RPAR . ARROW fun_type [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(fun_type_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COLON String XOR_EQ
##
## Ends in an error in state: 56.
##
## nsepseq(fun_type_arg,COMMA) -> fun_type_arg . [ RPAR ]
## nsepseq(fun_type_arg,COMMA) -> fun_type_arg . COMMA nsepseq(fun_type_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COLON XOR_EQ
##
## Ends in an error in state: 45.
##
## fun_type_arg -> Ident COLON . type_expr [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident XOR_EQ
##
## Ends in an error in state: 44.
##
## core_type -> Ident . [ RPAR ]
## core_type -> Ident . LT nsepseq(type_expr,COMMA) GT [ RPAR ]
## fun_type_arg -> Ident . COLON type_expr [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD XOR_EQ
##
## Ends in an error in state: 50.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR XOR_EQ
##
## Ends in an error in state: 8.
##
## fun_type -> LPAR . nsepseq(fun_type_arg,COMMA) RPAR ARROW fun_type [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
## par(type_expr) -> LPAR . type_expr RPAR [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR LPAR XOR_EQ
##
## Ends in an error in state: 7.
##
## par(type_expr) -> LPAR . type_expr RPAR [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR WILD VBAR XOR_EQ
##
## Ends in an error in state: 63.
##
## nsepseq(cartesian,VBAR) -> cartesian VBAR . nsepseq(cartesian,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## cartesian VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR WILD XOR_EQ
##
## Ends in an error in state: 62.
##
## nsepseq(cartesian,VBAR) -> cartesian . [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
## nsepseq(cartesian,VBAR) -> cartesian . VBAR nsepseq(cartesian,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR XOR_EQ
##
## Ends in an error in state: 5.
##
## sum_type -> VBAR . nsepseq(cartesian,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ XOR_EQ
##
## Ends in an error in state: 3.
##
## type_decl -> Type Ident EQ . type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type Ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident XOR_EQ
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type XOR_EQ
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Constr EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
## type_decl -> Type . Ident EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: XOR_EQ
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE True Default
##
## Ends in an error in state: 246.
##
## block_statement -> LBRACE statements . RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## LBRACE statements
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 243, spurious reduction of production statement -> expr_statement
## In state 248, spurious reduction of production statements -> statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE True SEMI XOR_EQ
##
## Ends in an error in state: 249.
##
## statements -> statement SEMI . option(statements) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## statement SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Ident ARROW LBRACE True Default
##
## Ends in an error in state: 252.
##
## arrow_function_body -> LBRACE statements . RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE statements
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production new_expr -> member_expr
## In state 100, spurious reduction of production call_expr_level -> new_expr
## In state 111, spurious reduction of production unary_expr_level -> call_expr_level
## In state 104, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 108, spurious reduction of production add_expr_level -> mult_expr_level
## In state 156, spurious reduction of production comp_expr_level -> add_expr_level
## In state 157, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 121, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 119, spurious reduction of production expr_statement -> disj_expr_level
## In state 243, spurious reduction of production statement -> expr_statement
## In state 248, spurious reduction of production statements -> statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>
