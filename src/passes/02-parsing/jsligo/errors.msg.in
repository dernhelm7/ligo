interactive_expr: Bytes SEMI
##
## Ends in an error in state: 476.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Bytes SEMI
##
## Ends in an error in state: 232.
##
## nsepseq(property,COMMA) -> property . [ RBRACE ]
## nsepseq(property,COMMA) -> property . COMMA nsepseq(property,COMMA) [ RBRACE ]
## nseq(__anonymous_0(property,COMMA)) -> property . COMMA seq(__anonymous_0(property,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 226, spurious reduction of production property -> ELLIPSIS expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS ZWSP
##
## Ends in an error in state: 124.
##
## property -> ELLIPSIS . expr_stmt [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 230.
##
## property -> property_name COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_name COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA ELLIPSIS Bytes SEMI
##
## Ends in an error in state: 235.
##
## nsepseq(property,COMMA) -> property . [ RBRACE ]
## nsepseq(property,COMMA) -> property . COMMA nsepseq(property,COMMA) [ RBRACE ]
## seq(__anonymous_0(property,COMMA)) -> property . COMMA seq(__anonymous_0(property,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 226, spurious reduction of production property -> ELLIPSIS expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 236.
##
## nsepseq(property,COMMA) -> property COMMA . nsepseq(property,COMMA) [ RBRACE ]
## seq(__anonymous_0(property,COMMA)) -> property COMMA . seq(__anonymous_0(property,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 233.
##
## nsepseq(property,COMMA) -> property COMMA . nsepseq(property,COMMA) [ RBRACE ]
## nseq(__anonymous_0(property,COMMA)) -> property COMMA . seq(__anonymous_0(property,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident ZWSP
##
## Ends in an error in state: 123.
##
## property -> Ident . [ RBRACE COMMA ]
## property_name -> Ident . [ COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Int ZWSP
##
## Ends in an error in state: 229.
##
## property -> property_name . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ZWSP
##
## Ends in an error in state: 119.
##
## braces(__anonymous_2) -> LBRACE . sep_or_term_list(property,COMMA) RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ZWSP
##
## Ends in an error in state: 474.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Attr ZWSP
##
## Ends in an error in state: 34.
##
## seq(Attr) -> Attr . seq(Attr) [ VBAR Let LBRACE Ident Const ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Const ZWSP
##
## Ends in an error in state: 329.
##
## const_decl -> nseq(Attr) Const . binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Let ZWSP
##
## Ends in an error in state: 327.
##
## let_decl -> nseq(Attr) Let . binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr VBAR
##
## Ends in an error in state: 326.
##
## const_decl -> nseq(Attr) . Const binding_list [ SEMI RBRACE Else EOF Default Case ]
## let_decl -> nseq(Attr) . Let binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 36, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr ZWSP
##
## Ends in an error in state: 33.
##
## nseq(Attr) -> Attr . seq(Attr) [ VBAR Let LBRACE Ident Const ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: BOOL_NOT Ident ZWSP
##
## Ends in an error in state: 131.
##
## member_expr -> Ident . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> Ident . Verbatim [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: BOOL_NOT LPAR Bytes SEMI
##
## Ends in an error in state: 414.
##
## nsepseq(expr_stmt,COMMA) -> expr_stmt . [ RPAR ]
## nsepseq(expr_stmt,COMMA) -> expr_stmt . COMMA nsepseq(expr_stmt,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: BOOL_NOT LPAR LBRACE Ident RBRACE ZWSP
##
## Ends in an error in state: 431.
##
## par(object_literal) -> LPAR object_literal . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR object_literal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: BOOL_NOT LPAR ZWSP
##
## Ends in an error in state: 10.
##
## par(expr_sequence) -> LPAR . expr_sequence RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## par(object_literal) -> LPAR . object_literal RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: BOOL_NOT ZWSP
##
## Ends in an error in state: 130.
##
## unary_expr_level -> BOOL_NOT . call_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## BOOL_NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Attr LBRACE ZWSP
##
## Ends in an error in state: 50.
##
## object_type -> nseq(Attr) LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Attr Let
##
## Ends in an error in state: 47.
##
## object_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,COMMA) RBRACE [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
## sum_type -> nseq(Attr) . VBAR nsepseq(core_type,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 36, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Attr VBAR ZWSP
##
## Ends in an error in state: 48.
##
## sum_type -> nseq(Attr) VBAR . nsepseq(core_type,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Ident GT
##
## Ends in an error in state: 160.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level . BOOL_AND comp_expr_level [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## disj_expr_level -> conj_expr_level . [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR ]
##
## The known suffix of the stack is as follows:
## conj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 203, spurious reduction of production as_annot_expr -> call_expr_level As type_expr
## In state 206, spurious reduction of production conj_expr_level -> as_annot_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Ident LT Ident GT While
##
## Ends in an error in state: 78.
##
## chevrons(nsepseq(type_expr,COMMA)) -> LT nsepseq(type_expr,COMMA) GT . [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
## chevrons(nsepseq(type_expr,COMMA)) -> LT nsepseq(type_expr,COMMA) GT . ZWSP [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LT nsepseq(type_expr,COMMA) GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Ident LT Ident RBRACKET
##
## Ends in an error in state: 77.
##
## chevrons(nsepseq(type_expr,COMMA)) -> LT nsepseq(type_expr,COMMA) . GT [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
## chevrons(nsepseq(type_expr,COMMA)) -> LT nsepseq(type_expr,COMMA) . GT ZWSP [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LT nsepseq(type_expr,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 38, spurious reduction of production nsepseq(type_expr,COMMA) -> type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Ident LT ZWSP
##
## Ends in an error in state: 32.
##
## chevrons(nsepseq(type_expr,COMMA)) -> LT . nsepseq(type_expr,COMMA) GT [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
## chevrons(nsepseq(type_expr,COMMA)) -> LT . nsepseq(type_expr,COMMA) GT ZWSP [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Ident VBAR ZWSP
##
## Ends in an error in state: 61.
##
## sum_type -> core_type VBAR . nsepseq(core_type,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## core_type VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Ident ZWSP
##
## Ends in an error in state: 31.
##
## core_type -> Ident . [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
## type_ctor_app -> Ident . chevrons(nsepseq(type_expr,COMMA)) [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As Int ZWSP
##
## Ends in an error in state: 60.
##
## sum_type -> core_type . VBAR nsepseq(core_type,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
## type_expr -> core_type . [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Attr Ident COLON ZWSP
##
## Ends in an error in state: 56.
##
## field_decl -> nseq(Attr) Ident COLON . type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Attr Ident ZWSP
##
## Ends in an error in state: 55.
##
## field_decl -> nseq(Attr) Ident . [ RBRACE COMMA ]
## field_decl -> nseq(Attr) Ident . COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Attr VBAR
##
## Ends in an error in state: 54.
##
## field_decl -> nseq(Attr) . Ident [ RBRACE COMMA ]
## field_decl -> nseq(Attr) . Ident COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 36, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Ident COLON Ident SEMI
##
## Ends in an error in state: 68.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 81, spurious reduction of production field_decl -> Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 29.
##
## field_decl -> Ident COLON . type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Ident COMMA Ident COLON Ident SEMI
##
## Ends in an error in state: 72.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 81, spurious reduction of production field_decl -> Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 73.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 69.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE Ident ZWSP
##
## Ends in an error in state: 28.
##
## field_decl -> Ident . [ RBRACE COMMA ]
## field_decl -> Ident . COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACE ZWSP
##
## Ends in an error in state: 27.
##
## object_type -> LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACKET Ident COMMA ZWSP
##
## Ends in an error in state: 39.
##
## nsepseq(type_expr,COMMA) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RBRACKET GT ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACKET Ident GT
##
## Ends in an error in state: 84.
##
## brackets(nsepseq(type_expr,COMMA)) -> LBRACKET nsepseq(type_expr,COMMA) . RBRACKET [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET nsepseq(type_expr,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 38, spurious reduction of production nsepseq(type_expr,COMMA) -> type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACKET Ident SEMI
##
## Ends in an error in state: 38.
##
## nsepseq(type_expr,COMMA) -> type_expr . [ RBRACKET GT ]
## nsepseq(type_expr,COMMA) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RBRACKET GT ]
##
## The known suffix of the stack is as follows:
## type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LBRACKET ZWSP
##
## Ends in an error in state: 26.
##
## brackets(nsepseq(type_expr,COMMA)) -> LBRACKET . nsepseq(type_expr,COMMA) RBRACKET [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR Ident COLON Ident COMMA Ident ZWSP
##
## Ends in an error in state: 95.
##
## fun_param -> Ident . COLON type_expr [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR Ident COLON Ident COMMA ZWSP
##
## Ends in an error in state: 94.
##
## nsepseq(fun_param,COMMA) -> fun_param COMMA . nsepseq(fun_param,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR Ident COLON Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 44.
##
## fun_type -> par(nsepseq(fun_param,COMMA)) ARROW . type_expr [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## par(nsepseq(fun_param,COMMA)) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR Ident COLON Ident RPAR ZWSP
##
## Ends in an error in state: 43.
##
## fun_type -> par(nsepseq(fun_param,COMMA)) . ARROW type_expr [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## par(nsepseq(fun_param,COMMA))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR Ident COLON Ident SEMI
##
## Ends in an error in state: 93.
##
## nsepseq(fun_param,COMMA) -> fun_param . [ RPAR ]
## nsepseq(fun_param,COMMA) -> fun_param . COMMA nsepseq(fun_param,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 88, spurious reduction of production fun_param -> Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR Ident COLON ZWSP
##
## Ends in an error in state: 87.
##
## fun_param -> Ident COLON . type_expr [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR Ident ZWSP
##
## Ends in an error in state: 86.
##
## core_type -> Ident . [ VBAR RPAR ]
## fun_param -> Ident . COLON type_expr [ RPAR COMMA ]
## type_ctor_app -> Ident . chevrons(nsepseq(type_expr,COMMA)) [ VBAR RPAR ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR Int SEMI
##
## Ends in an error in state: 89.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production type_expr -> core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As LPAR ZWSP
##
## Ends in an error in state: 25.
##
## par(nsepseq(fun_param,COMMA)) -> LPAR . nsepseq(fun_param,COMMA) RPAR [ ARROW ]
## par(type_expr) -> LPAR . type_expr RPAR [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As UIdent DOT ZWSP
##
## Ends in an error in state: 19.
##
## module_access_t -> UIdent DOT . module_var_t [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As UIdent ZWSP
##
## Ends in an error in state: 18.
##
## module_access_t -> UIdent . DOT module_var_t [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As VBAR Attr VBAR
##
## Ends in an error in state: 49.
##
## object_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,COMMA) RBRACE [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 36, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As VBAR Ident VBAR ZWSP
##
## Ends in an error in state: 64.
##
## nsepseq(core_type,VBAR) -> core_type VBAR . nsepseq(core_type,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## core_type VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As VBAR Int ZWSP
##
## Ends in an error in state: 63.
##
## nsepseq(core_type,VBAR) -> core_type . [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
## nsepseq(core_type,VBAR) -> core_type . VBAR nsepseq(core_type,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As VBAR LPAR ZWSP
##
## Ends in an error in state: 24.
##
## par(type_expr) -> LPAR . type_expr RPAR [ VBAR SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As VBAR ZWSP
##
## Ends in an error in state: 17.
##
## sum_type -> VBAR . nsepseq(core_type,VBAR) [ SEMI RPAR RBRACKET RBRACE GT Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ARROW ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes As ZWSP
##
## Ends in an error in state: 202.
##
## as_annot_expr -> call_expr_level As . type_expr [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## call_expr_level As
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes BOOL_AND ZWSP
##
## Ends in an error in state: 161.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes BOOL_OR Ident As Ident GT
##
## Ends in an error in state: 208.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level . BOOL_AND comp_expr_level [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR conj_expr_level . [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR conj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 203, spurious reduction of production as_annot_expr -> call_expr_level As type_expr
## In state 206, spurious reduction of production conj_expr_level -> as_annot_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes BOOL_OR ZWSP
##
## Ends in an error in state: 207.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ SEMI RPAR RBRACKET RBRACE Else EQ EOF Default Case COMMA COLON BOOL_OR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes DOT ZWSP
##
## Ends in an error in state: 220.
##
## member_expr -> member_expr DOT . Ident [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes EQ ZWSP
##
## Ends in an error in state: 158.
##
## expr_stmt -> disj_expr_level EQ . expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## disj_expr_level EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes EQ2 ZWSP
##
## Ends in an error in state: 188.
##
## bin_op(comp_expr_level,EQ2,add_expr_level) -> comp_expr_level EQ2 . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQ2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes GE ZWSP
##
## Ends in an error in state: 186.
##
## bin_op(comp_expr_level,GE,add_expr_level) -> comp_expr_level GE . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes GT While
##
## Ends in an error in state: 184.
##
## gt -> GT . [ WILD UIdent String New MINUS LPAR LBRACKET Int Ident Bytes BOOL_NOT ]
## gt -> GT . ZWSP [ WILD UIdent String New MINUS LPAR LBRACKET Int Ident Bytes BOOL_NOT ]
##
## The known suffix of the stack is as follows:
## GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes GT ZWSP ZWSP
##
## Ends in an error in state: 190.
##
## bin_op(comp_expr_level,gt,add_expr_level) -> comp_expr_level gt . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level gt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LBRACKET Bytes SEMI
##
## Ends in an error in state: 218.
##
## brackets(expr) -> LBRACKET expr . RBRACKET [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LBRACKET ZWSP
##
## Ends in an error in state: 217.
##
## brackets(expr) -> LBRACKET . expr RBRACKET [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LE ZWSP
##
## Ends in an error in state: 182.
##
## bin_op(comp_expr_level,LE,add_expr_level) -> comp_expr_level LE . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LPAR Bytes COMMA ZWSP
##
## Ends in an error in state: 155.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LPAR Bytes SEMI
##
## Ends in an error in state: 154.
##
## nsepseq(expr,COMMA) -> expr . [ RPAR ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LPAR RPAR LPAR ZWSP
##
## Ends in an error in state: 147.
##
## call_expr -> call_expr LPAR . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## par(nsepseq(expr,COMMA)) -> LPAR . nsepseq(expr,COMMA) RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## call_expr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LPAR RPAR ZWSP
##
## Ends in an error in state: 146.
##
## call_expr -> call_expr . par(nsepseq(expr,COMMA)) [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## call_expr -> call_expr . LPAR RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## call_expr_level -> call_expr . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## call_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LPAR ZWSP
##
## Ends in an error in state: 137.
##
## call_expr -> member_expr LPAR . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## par(nsepseq(expr,COMMA)) -> LPAR . nsepseq(expr,COMMA) RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes LT ZWSP
##
## Ends in an error in state: 180.
##
## bin_op(comp_expr_level,LT,add_expr_level) -> comp_expr_level LT . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes MINUS Ident As
##
## Ends in an error in state: 179.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS mult_expr_level . [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level . REM unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS mult_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 131, spurious reduction of production member_expr -> Ident
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 145, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes MINUS ZWSP
##
## Ends in an error in state: 178.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes NE ZWSP
##
## Ends in an error in state: 163.
##
## bin_op(comp_expr_level,NE,add_expr_level) -> comp_expr_level NE . add_expr_level [ SEMI RPAR RBRACKET RBRACE NE LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes PLUS Ident As
##
## Ends in an error in state: 173.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS mult_expr_level . [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level . REM unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS mult_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 131, spurious reduction of production member_expr -> Ident
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 145, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes PLUS ZWSP
##
## Ends in an error in state: 172.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes RBRACKET
##
## Ends in an error in state: 467.
##
## toplevel_stmts -> stmt_opt_namespace . SEMI toplevel_stmts [ EOF ]
## toplevel_stmts -> stmt_opt_namespace . option(SEMI) [ EOF ]
##
## The known suffix of the stack is as follows:
## stmt_opt_namespace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 374, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 353, spurious reduction of production statement -> base_stmt(statement)
## In state 454, spurious reduction of production stmt_opt_namespace -> statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes REM ZWSP
##
## Ends in an error in state: 176.
##
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level REM . unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes SEMI ZWSP
##
## Ends in an error in state: 468.
##
## option(SEMI) -> SEMI . [ EOF ]
## toplevel_stmts -> stmt_opt_namespace SEMI . toplevel_stmts [ EOF ]
##
## The known suffix of the stack is as follows:
## stmt_opt_namespace SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes SLASH ZWSP
##
## Ends in an error in state: 174.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes TIMES ZWSP
##
## Ends in an error in state: 143.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Bytes ZWSP
##
## Ends in an error in state: 136.
##
## call_expr -> member_expr . par(nsepseq(expr,COMMA)) [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## call_expr -> member_expr . LPAR RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr . brackets(expr) [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr . DOT Ident [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## new_expr -> member_expr . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Attr VBAR
##
## Ends in an error in state: 257.
##
## var_pattern -> nseq(Attr) . Ident [ RBRACKET RBRACE EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production seq(Attr) ->
## In state 36, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON Ident EQ ZWSP
##
## Ends in an error in state: 278.
##
## binding_initializer -> binding_pattern type_annotation EQ . expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern type_annotation EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON Ident SEMI
##
## Ends in an error in state: 277.
##
## binding_initializer -> binding_pattern type_annotation . EQ expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern type_annotation
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 98, spurious reduction of production type_annotation -> COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON ZWSP
##
## Ends in an error in state: 15.
##
## type_annotation -> COLON . type_expr [ RPAR EQ COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident EQ Bytes COMMA ZWSP
##
## Ends in an error in state: 293.
##
## nsepseq(binding_initializer,COMMA) -> binding_initializer COMMA . nsepseq(binding_initializer,COMMA) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## binding_initializer COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident EQ Bytes RBRACKET
##
## Ends in an error in state: 292.
##
## nsepseq(binding_initializer,COMMA) -> binding_initializer . [ SEMI RBRACE Else EOF Default Case ]
## nsepseq(binding_initializer,COMMA) -> binding_initializer . COMMA nsepseq(binding_initializer,COMMA) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## binding_initializer
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
## In state 276, spurious reduction of production binding_initializer -> binding_pattern EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident EQ ZWSP
##
## Ends in an error in state: 275.
##
## binding_initializer -> binding_pattern EQ . expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident ZWSP
##
## Ends in an error in state: 274.
##
## binding_initializer -> binding_pattern . EQ expr [ SEMI RBRACE Else EOF Default Case COMMA ]
## binding_initializer -> binding_pattern . type_annotation EQ expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Attr Ident ZWSP
##
## Ends in an error in state: 286.
##
## object_pattern_items -> object_binding_property . COMMA option(object_pattern_items) [ RBRACE ]
## object_pattern_items -> object_binding_property . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## object_binding_property
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE ELLIPSIS Ident ZWSP
##
## Ends in an error in state: 284.
##
## braces(object_pattern_items) -> LBRACE object_pattern_items . RBRACE [ EQ COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE object_pattern_items
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE ELLIPSIS ZWSP
##
## Ends in an error in state: 253.
##
## rest -> ELLIPSIS . Ident [ RBRACKET RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 270.
##
## object_binding_property -> Ident COLON . binding_initializer [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 287.
##
## object_pattern_items -> object_binding_property COMMA . option(object_pattern_items) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## object_binding_property COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Ident EQ ZWSP
##
## Ends in an error in state: 268.
##
## object_binding_property -> Ident EQ . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Ident ZWSP
##
## Ends in an error in state: 267.
##
## object_binding_property -> Ident . EQ expr [ RBRACE COMMA ]
## object_binding_property -> Ident . COLON binding_initializer [ RBRACE COMMA ]
## var_pattern -> Ident . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE ZWSP
##
## Ends in an error in state: 266.
##
## braces(object_pattern_items) -> LBRACE . object_pattern_items RBRACE [ EQ COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACKET COMMA ZWSP
##
## Ends in an error in state: 262.
##
## nsepseq(cell_pattern,COMMA) -> cell_pattern COMMA . nsepseq(cell_pattern,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## cell_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACKET Ident ZWSP
##
## Ends in an error in state: 261.
##
## nsepseq(cell_pattern,COMMA) -> cell_pattern . [ RBRACKET ]
## nsepseq(cell_pattern,COMMA) -> cell_pattern . COMMA nsepseq(cell_pattern,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## cell_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACKET ZWSP
##
## Ends in an error in state: 250.
##
## brackets(nsepseq(cell_pattern,COMMA)) -> LBRACKET . nsepseq(cell_pattern,COMMA) RBRACKET [ RBRACKET EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const ZWSP
##
## Ends in an error in state: 323.
##
## const_decl -> Const . binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive ZWSP
##
## Ends in an error in state: 465.
##
## toplevel_stmts -> Directive . toplevel_stmts [ EOF ]
##
## The known suffix of the stack is as follows:
## Directive
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Export ZWSP
##
## Ends in an error in state: 446.
##
## export_decl -> Export . declaration [ SEMI RBRACE EOF ]
## export_stmt -> Export . namespace_raw [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## Export
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: For LPAR Const Ident Of Bytes RPAR ZWSP
##
## Ends in an error in state: 370.
##
## for_of_stmt(statement) -> For LPAR index_kind Ident Of expr_stmt RPAR . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of expr_stmt RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: For LPAR Const Ident Of Bytes SEMI
##
## Ends in an error in state: 369.
##
## for_of_stmt(statement) -> For LPAR index_kind Ident Of expr_stmt . RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of expr_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: For LPAR Const Ident Of ZWSP
##
## Ends in an error in state: 368.
##
## for_of_stmt(statement) -> For LPAR index_kind Ident Of . expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: For LPAR Const Ident ZWSP
##
## Ends in an error in state: 367.
##
## for_of_stmt(statement) -> For LPAR index_kind Ident . Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: For LPAR Const ZWSP
##
## Ends in an error in state: 366.
##
## for_of_stmt(statement) -> For LPAR index_kind . Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: For LPAR ZWSP
##
## Ends in an error in state: 365.
##
## for_of_stmt(statement) -> For LPAR . index_kind Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: For ZWSP
##
## Ends in an error in state: 364.
##
## for_of_stmt(statement) -> For . LPAR index_kind Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Ident ARROW ZWSP
##
## Ends in an error in state: 128.
##
## fun_expr -> Ident ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Ident ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Ident ZWSP
##
## Ends in an error in state: 126.
##
## fun_expr -> Ident . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## member_expr -> Ident . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> Ident . Verbatim [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR Bytes Else ZWSP
##
## Ends in an error in state: 363.
##
## if_else_stmt(statement) -> If par(expr) closed_stmt Else . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(expr) closed_stmt Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR Bytes RBRACKET
##
## Ends in an error in state: 347.
##
## base_stmt(closed_stmt) -> expr_stmt . [ Else ]
## base_stmt(statement) -> expr_stmt . [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## expr_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR Export Type Ident EQ Ident RBRACKET
##
## Ends in an error in state: 348.
##
## base_stmt(closed_stmt) -> export_decl . [ Else ]
## base_stmt(statement) -> export_decl . [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## export_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 115, spurious reduction of production type_decl -> Type type_ident option(type_params) EQ type_expr
## In state 325, spurious reduction of production declaration -> type_decl
## In state 332, spurious reduction of production export_decl -> Export declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR For LPAR Const Ident Of Bytes RPAR ZWSP
##
## Ends in an error in state: 321.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind Ident Of expr_stmt RPAR . closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind Ident Of expr_stmt RPAR . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of expr_stmt RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR For LPAR Const Ident Of Bytes SEMI
##
## Ends in an error in state: 320.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind Ident Of expr_stmt . RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind Ident Of expr_stmt . RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of expr_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR For LPAR Const Ident Of ZWSP
##
## Ends in an error in state: 319.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind Ident Of . expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind Ident Of . expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR For LPAR Const Ident ZWSP
##
## Ends in an error in state: 318.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind Ident . Of expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind Ident . Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR For LPAR Const ZWSP
##
## Ends in an error in state: 317.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind . Ident Of expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind . Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR For LPAR ZWSP
##
## Ends in an error in state: 314.
##
## for_of_stmt(closed_stmt) -> For LPAR . index_kind Ident Of expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR . index_kind Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR For ZWSP
##
## Ends in an error in state: 313.
##
## for_of_stmt(closed_stmt) -> For . LPAR index_kind Ident Of expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For . LPAR index_kind Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR If LPAR Bytes RPAR Bytes Else ZWSP
##
## Ends in an error in state: 357.
##
## if_else_stmt(closed_stmt) -> If par(expr) closed_stmt Else . closed_stmt [ Else ]
## if_else_stmt(statement) -> If par(expr) closed_stmt Else . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(expr) closed_stmt Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR If LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 312.
##
## if_else_stmt(closed_stmt) -> If par(expr) . closed_stmt Else closed_stmt [ Else ]
## if_else_stmt(statement) -> If par(expr) . closed_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(statement) -> If par(expr) . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR If ZWSP
##
## Ends in an error in state: 311.
##
## if_else_stmt(closed_stmt) -> If . par(expr) closed_stmt Else closed_stmt [ Else ]
## if_else_stmt(statement) -> If . par(expr) closed_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(statement) -> If . par(expr) statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR LBRACE Bytes RBRACE ZWSP
##
## Ends in an error in state: 352.
##
## base_stmt(closed_stmt) -> block_stmt . [ Else ]
## base_stmt(statement) -> block_stmt . [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## block_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR Return Bytes RBRACKET
##
## Ends in an error in state: 338.
##
## base_stmt(closed_stmt) -> return_stmt . [ Else ]
## base_stmt(statement) -> return_stmt . [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## return_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
## In state 247, spurious reduction of production return_stmt -> Return expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR Switch LPAR Bytes RPAR LBRACE Default COLON RBRACE ZWSP
##
## Ends in an error in state: 336.
##
## base_stmt(closed_stmt) -> switch_stmt . [ Else ]
## base_stmt(statement) -> switch_stmt . [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## switch_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR Type Ident EQ Ident RBRACKET
##
## Ends in an error in state: 349.
##
## base_stmt(closed_stmt) -> declaration . [ Else ]
## base_stmt(statement) -> declaration . [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 115, spurious reduction of production type_decl -> Type type_ident option(type_params) EQ type_expr
## In state 325, spurious reduction of production declaration -> type_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR While LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 310.
##
## while_stmt(closed_stmt) -> While LPAR expr RPAR . closed_stmt [ Else ]
## while_stmt(statement) -> While LPAR expr RPAR . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR While LPAR Bytes SEMI
##
## Ends in an error in state: 309.
##
## while_stmt(closed_stmt) -> While LPAR expr . RPAR closed_stmt [ Else ]
## while_stmt(statement) -> While LPAR expr . RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR While LPAR ZWSP
##
## Ends in an error in state: 308.
##
## while_stmt(closed_stmt) -> While LPAR . expr RPAR closed_stmt [ Else ]
## while_stmt(statement) -> While LPAR . expr RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR While ZWSP
##
## Ends in an error in state: 307.
##
## while_stmt(closed_stmt) -> While . LPAR expr RPAR closed_stmt [ Else ]
## while_stmt(statement) -> While . LPAR expr RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 306.
##
## if_else_stmt(statement) -> If par(expr) . closed_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(statement) -> If par(expr) . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR Bytes SEMI
##
## Ends in an error in state: 304.
##
## par(expr) -> LPAR expr . RPAR [ While WILD UIdent Type Switch String Return New MINUS Let LPAR LBRACKET LBRACE Int Import If Ident For Export Const Bytes BOOL_NOT Attr ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If LPAR ZWSP
##
## Ends in an error in state: 303.
##
## par(expr) -> LPAR . expr RPAR [ While WILD UIdent Type Switch String Return New MINUS Let LPAR LBRACKET LBRACE Int Import If Ident For Export Const Bytes BOOL_NOT Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: If ZWSP
##
## Ends in an error in state: 302.
##
## if_else_stmt(statement) -> If . par(expr) closed_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(statement) -> If . par(expr) statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import UIdent EQ UIdent DOT ZWSP
##
## Ends in an error in state: 299.
##
## nsepseq(module_name,DOT) -> UIdent DOT . nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import UIdent EQ UIdent ZWSP
##
## Ends in an error in state: 298.
##
## nsepseq(module_name,DOT) -> UIdent . [ SEMI RBRACE Else EOF Default Case ]
## nsepseq(module_name,DOT) -> UIdent . DOT nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import UIdent EQ ZWSP
##
## Ends in an error in state: 297.
##
## import_stmt -> Import UIdent EQ . nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import UIdent EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import UIdent ZWSP
##
## Ends in an error in state: 296.
##
## import_stmt -> Import UIdent . EQ nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import ZWSP
##
## Ends in an error in state: 295.
##
## import_stmt -> Import . UIdent EQ nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE Bytes Default
##
## Ends in an error in state: 399.
##
## braces(statements) -> LBRACE statements . RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE statements
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 374, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 353, spurious reduction of production statement -> base_stmt(statement)
## In state 379, spurious reduction of production nsepseq(statement,SEMI) -> statement
## In state 388, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI)
## In state 386, spurious reduction of production statements -> sep_or_term_list(statement,SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE Bytes RBRACKET
##
## Ends in an error in state: 379.
##
## nsepseq(statement,SEMI) -> statement . [ RBRACE Default Case ]
## nsepseq(statement,SEMI) -> statement . SEMI nsepseq(statement,SEMI) [ RBRACE Default Case ]
## nseq(__anonymous_0(statement,SEMI)) -> statement . SEMI seq(__anonymous_0(statement,SEMI)) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 374, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 353, spurious reduction of production statement -> base_stmt(statement)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE Bytes SEMI Bytes RBRACKET
##
## Ends in an error in state: 381.
##
## nsepseq(statement,SEMI) -> statement . [ RBRACE Default Case ]
## nsepseq(statement,SEMI) -> statement . SEMI nsepseq(statement,SEMI) [ RBRACE Default Case ]
## seq(__anonymous_0(statement,SEMI)) -> statement . SEMI seq(__anonymous_0(statement,SEMI)) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 374, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 353, spurious reduction of production statement -> base_stmt(statement)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE Bytes SEMI Bytes SEMI ZWSP
##
## Ends in an error in state: 382.
##
## nsepseq(statement,SEMI) -> statement SEMI . nsepseq(statement,SEMI) [ RBRACE Default Case ]
## seq(__anonymous_0(statement,SEMI)) -> statement SEMI . seq(__anonymous_0(statement,SEMI)) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## statement SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE Bytes SEMI ZWSP
##
## Ends in an error in state: 380.
##
## nsepseq(statement,SEMI) -> statement SEMI . nsepseq(statement,SEMI) [ RBRACE Default Case ]
## nseq(__anonymous_0(statement,SEMI)) -> statement SEMI . seq(__anonymous_0(statement,SEMI)) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## statement SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE Export ZWSP
##
## Ends in an error in state: 322.
##
## export_decl -> Export . declaration [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Export
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACE ZWSP
##
## Ends in an error in state: 100.
##
## braces(statements) -> LBRACE . statements RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACKET Bytes SEMI
##
## Ends in an error in state: 427.
##
## nsepseq(array_item,COMMA) -> array_item . [ RBRACKET ]
## nsepseq(array_item,COMMA) -> array_item . COMMA nsepseq(array_item,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## array_item
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
## In state 426, spurious reduction of production array_item -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACKET COMMA ZWSP
##
## Ends in an error in state: 428.
##
## nsepseq(array_item,COMMA) -> array_item COMMA . nsepseq(array_item,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## array_item COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACKET ELLIPSIS ZWSP
##
## Ends in an error in state: 422.
##
## array_item -> ELLIPSIS . expr [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LBRACKET ZWSP
##
## Ends in an error in state: 12.
##
## brackets(nsepseq(array_item,COMMA)) -> LBRACKET . nsepseq(array_item,COMMA) RBRACKET [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes COLON Ident COMMA Bytes SEMI
##
## Ends in an error in state: 417.
##
## colon_annot_expr -> expr . type_annotation [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes COLON Ident COMMA ZWSP
##
## Ends in an error in state: 420.
##
## nsepseq(colon_annot_expr,COMMA) -> colon_annot_expr COMMA . nsepseq(colon_annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## colon_annot_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes COLON Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 141.
##
## fun_expr -> par(parameters) ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## par(parameters) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes COLON Ident RPAR COLON Ident ARROW ZWSP
##
## Ends in an error in state: 215.
##
## fun_expr -> par(parameters) type_annotation ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## par(parameters) type_annotation ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes COLON Ident RPAR COLON Ident SEMI
##
## Ends in an error in state: 214.
##
## fun_expr -> par(parameters) type_annotation . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## par(parameters) type_annotation
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 98, spurious reduction of production type_annotation -> COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes COLON Ident RPAR ZWSP
##
## Ends in an error in state: 140.
##
## fun_expr -> par(parameters) . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> par(parameters) . type_annotation ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## par(parameters)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes COLON Ident SEMI
##
## Ends in an error in state: 419.
##
## nsepseq(colon_annot_expr,COMMA) -> colon_annot_expr . [ RPAR ]
## nsepseq(colon_annot_expr,COMMA) -> colon_annot_expr . COMMA nsepseq(colon_annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## colon_annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 98, spurious reduction of production type_annotation -> COLON type_expr
## In state 418, spurious reduction of production colon_annot_expr -> expr type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes COMMA ZWSP
##
## Ends in an error in state: 412.
##
## nsepseq(expr_stmt,COMMA) -> expr_stmt COMMA . nsepseq(expr_stmt,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr_stmt COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR Bytes SEMI
##
## Ends in an error in state: 411.
##
## expr -> expr_stmt . [ COLON ]
## nsepseq(expr_stmt,COMMA) -> expr_stmt . [ RPAR ]
## nsepseq(expr_stmt,COMMA) -> expr_stmt . COMMA nsepseq(expr_stmt,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR LBRACE Ident RBRACE ZWSP
##
## Ends in an error in state: 407.
##
## expr -> object_literal . [ COLON ]
## par(object_literal) -> LPAR object_literal . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR object_literal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR ARROW ZWSP
##
## Ends in an error in state: 99.
##
## fun_expr -> LPAR RPAR ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR COLON Ident ARROW ZWSP
##
## Ends in an error in state: 403.
##
## fun_expr -> LPAR RPAR type_annotation ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR type_annotation ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR COLON Ident SEMI
##
## Ends in an error in state: 402.
##
## fun_expr -> LPAR RPAR type_annotation . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR type_annotation
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production core_type -> Ident
## In state 60, spurious reduction of production type_expr -> core_type
## In state 98, spurious reduction of production type_annotation -> COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR RPAR ZWSP
##
## Ends in an error in state: 14.
##
## fun_expr -> LPAR RPAR . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> LPAR RPAR . type_annotation ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: LPAR ZWSP
##
## Ends in an error in state: 13.
##
## fun_expr -> LPAR . RPAR ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> LPAR . RPAR type_annotation ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## par(expr_sequence) -> LPAR . expr_sequence RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## par(object_literal) -> LPAR . object_literal RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## par(parameters) -> LPAR . parameters RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let ZWSP
##
## Ends in an error in state: 248.
##
## let_decl -> Let . binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: MINUS Ident As
##
## Ends in an error in state: 142.
##
## add_expr_level -> mult_expr_level . [ SEMI RPAR RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level . REM unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 131, spurious reduction of production member_expr -> Ident
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 430, spurious reduction of production unary_expr_level -> MINUS call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: MINUS ZWSP
##
## Ends in an error in state: 11.
##
## unary_expr_level -> MINUS . call_expr_level [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Bytes RBRACKET
##
## Ends in an error in state: 450.
##
## nsepseq(stmt_opt_namespace,SEMI) -> stmt_opt_namespace . [ RBRACE ]
## nsepseq(stmt_opt_namespace,SEMI) -> stmt_opt_namespace . SEMI nsepseq(stmt_opt_namespace,SEMI) [ RBRACE ]
## nseq(__anonymous_0(stmt_opt_namespace,SEMI)) -> stmt_opt_namespace . SEMI seq(__anonymous_0(stmt_opt_namespace,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt_opt_namespace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 374, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 353, spurious reduction of production statement -> base_stmt(statement)
## In state 454, spurious reduction of production stmt_opt_namespace -> statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Bytes SEMI Bytes RBRACKET
##
## Ends in an error in state: 452.
##
## nsepseq(stmt_opt_namespace,SEMI) -> stmt_opt_namespace . [ RBRACE ]
## nsepseq(stmt_opt_namespace,SEMI) -> stmt_opt_namespace . SEMI nsepseq(stmt_opt_namespace,SEMI) [ RBRACE ]
## seq(__anonymous_0(stmt_opt_namespace,SEMI)) -> stmt_opt_namespace . SEMI seq(__anonymous_0(stmt_opt_namespace,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt_opt_namespace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 374, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 353, spurious reduction of production statement -> base_stmt(statement)
## In state 454, spurious reduction of production stmt_opt_namespace -> statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Bytes SEMI Bytes SEMI ZWSP
##
## Ends in an error in state: 453.
##
## nsepseq(stmt_opt_namespace,SEMI) -> stmt_opt_namespace SEMI . nsepseq(stmt_opt_namespace,SEMI) [ RBRACE ]
## seq(__anonymous_0(stmt_opt_namespace,SEMI)) -> stmt_opt_namespace SEMI . seq(__anonymous_0(stmt_opt_namespace,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt_opt_namespace SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Bytes SEMI ZWSP
##
## Ends in an error in state: 451.
##
## nsepseq(stmt_opt_namespace,SEMI) -> stmt_opt_namespace SEMI . nsepseq(stmt_opt_namespace,SEMI) [ RBRACE ]
## nseq(__anonymous_0(stmt_opt_namespace,SEMI)) -> stmt_opt_namespace SEMI . seq(__anonymous_0(stmt_opt_namespace,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt_opt_namespace SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE ZWSP
##
## Ends in an error in state: 445.
##
## braces(stmts_opt_namespace) -> LBRACE . stmts_opt_namespace RBRACE [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent ZWSP
##
## Ends in an error in state: 444.
##
## namespace_raw -> Namespace UIdent . braces(stmts_opt_namespace) [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## Namespace UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace ZWSP
##
## Ends in an error in state: 443.
##
## namespace_raw -> Namespace . UIdent braces(stmts_opt_namespace) [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## Namespace
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: New Ident LPAR
##
## Ends in an error in state: 433.
##
## member_expr -> member_expr . brackets(expr) [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## member_expr -> member_expr . DOT Ident [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## new_expr -> member_expr . [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 131, spurious reduction of production member_expr -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: New ZWSP
##
## Ends in an error in state: 9.
##
## new_expr -> New . new_expr [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LE GT GE Else EQ2 EQ EOF Default Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## New
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Return ZWSP
##
## Ends in an error in state: 246.
##
## return_stmt -> Return . [ SEMI RBRACE Else EOF Default Case ]
## return_stmt -> Return . expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Return
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR Bytes RPAR LBRACE Case Bytes COLON ZWSP
##
## Ends in an error in state: 391.
##
## case -> Case expr COLON . [ RBRACE Default Case ]
## case -> Case expr COLON . statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR Bytes RPAR LBRACE Case Bytes SEMI
##
## Ends in an error in state: 390.
##
## case -> Case expr . COLON [ RBRACE Default Case ]
## case -> Case expr . COLON statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR Bytes RPAR LBRACE Case ZWSP
##
## Ends in an error in state: 389.
##
## case -> Case . expr COLON [ RBRACE Default Case ]
## case -> Case . expr COLON statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR Bytes RPAR LBRACE Default COLON ZWSP
##
## Ends in an error in state: 245.
##
## case -> Default COLON . [ RBRACE Default Case ]
## case -> Default COLON . statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Default COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR Bytes RPAR LBRACE Default ZWSP
##
## Ends in an error in state: 244.
##
## case -> Default . COLON [ RBRACE Default Case ]
## case -> Default . COLON statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Default
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR Bytes RPAR LBRACE ZWSP
##
## Ends in an error in state: 243.
##
## switch_stmt -> Switch LPAR expr RPAR LBRACE . nseq(case) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch LPAR expr RPAR LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 242.
##
## switch_stmt -> Switch LPAR expr RPAR . LBRACE nseq(case) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR Bytes SEMI
##
## Ends in an error in state: 241.
##
## switch_stmt -> Switch LPAR expr . RPAR LBRACE nseq(case) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch LPAR ZWSP
##
## Ends in an error in state: 118.
##
## switch_stmt -> Switch LPAR . expr RPAR LBRACE nseq(case) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Switch ZWSP
##
## Ends in an error in state: 117.
##
## switch_stmt -> Switch . LPAR expr RPAR LBRACE nseq(case) RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ZWSP
##
## Ends in an error in state: 114.
##
## type_decl -> Type type_ident option(type_params) EQ . type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type type_ident option(type_params) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LT Ident COMMA ZWSP
##
## Ends in an error in state: 107.
##
## nsepseq(type_var,COMMA) -> Ident COMMA . nsepseq(type_var,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## Ident COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LT Ident GT While
##
## Ends in an error in state: 110.
##
## chevrons(nsepseq(type_var,COMMA)) -> LT nsepseq(type_var,COMMA) GT . [ EQ ]
## chevrons(nsepseq(type_var,COMMA)) -> LT nsepseq(type_var,COMMA) GT . ZWSP [ EQ ]
##
## The known suffix of the stack is as follows:
## LT nsepseq(type_var,COMMA) GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LT Ident GT ZWSP ZWSP
##
## Ends in an error in state: 113.
##
## type_decl -> Type type_ident option(type_params) . EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type type_ident option(type_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LT Ident ZWSP
##
## Ends in an error in state: 106.
##
## nsepseq(type_var,COMMA) -> Ident . [ GT ]
## nsepseq(type_var,COMMA) -> Ident . COMMA nsepseq(type_var,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LT ZWSP
##
## Ends in an error in state: 105.
##
## chevrons(nsepseq(type_var,COMMA)) -> LT . nsepseq(type_var,COMMA) GT [ EQ ]
## chevrons(nsepseq(type_var,COMMA)) -> LT . nsepseq(type_var,COMMA) GT ZWSP [ EQ ]
##
## The known suffix of the stack is as follows:
## LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident ZWSP
##
## Ends in an error in state: 104.
##
## type_decl -> Type type_ident . option(type_params) EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type type_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type ZWSP
##
## Ends in an error in state: 101.
##
## type_decl -> Type . type_ident option(type_params) EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: UIdent DOT UIdent ZWSP
##
## Ends in an error in state: 437.
##
## module_access_e -> UIdent . DOT module_var_e [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## module_access_e -> UIdent . LPAR RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## module_access_e -> UIdent . LPAR expr_sequence RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: UIdent DOT ZWSP
##
## Ends in an error in state: 436.
##
## module_access_e -> UIdent DOT . module_var_e [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: UIdent LPAR ZWSP
##
## Ends in an error in state: 6.
##
## module_access_e -> UIdent LPAR . RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## module_access_e -> UIdent LPAR . expr_sequence RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## UIdent LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: UIdent ZWSP
##
## Ends in an error in state: 4.
##
## member_expr -> UIdent . Verbatim [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## module_access_e -> UIdent . DOT module_var_e [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## module_access_e -> UIdent . LPAR RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
## module_access_e -> UIdent . LPAR expr_sequence RPAR [ TIMES SLASH SEMI RPAR REM RBRACKET RBRACE PLUS NE MINUS LT LPAR LE LBRACKET GT GE Else EQ2 EQ EOF Default DOT Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: While LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 442.
##
## while_stmt(statement) -> While LPAR expr RPAR . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: While LPAR Bytes SEMI
##
## Ends in an error in state: 441.
##
## while_stmt(statement) -> While LPAR expr . RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 136, spurious reduction of production new_expr -> member_expr
## In state 134, spurious reduction of production call_expr_level -> new_expr
## In state 201, spurious reduction of production unary_expr_level -> call_expr_level
## In state 139, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 142, spurious reduction of production add_expr_level -> mult_expr_level
## In state 198, spurious reduction of production comp_expr_level -> add_expr_level
## In state 200, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 160, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 157, spurious reduction of production expr_stmt -> disj_expr_level
## In state 153, spurious reduction of production expr -> expr_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: While LPAR ZWSP
##
## Ends in an error in state: 2.
##
## while_stmt(statement) -> While LPAR . expr RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: While ZWSP
##
## Ends in an error in state: 1.
##
## while_stmt(statement) -> While . LPAR expr RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: ZWSP
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

