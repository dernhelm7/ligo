interactive_expr: Begin Case Verbatim Of LBRACKET WILD ARROW Skip With
##
## Ends in an error in state: 508.
##
## case(test_clause) -> Case expr Of LBRACKET option(VBAR) cases(test_clause) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR) cases(test_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 510, spurious reduction of production nsepseq(case_clause(test_clause),VBAR) -> case_clause(test_clause)
## In state 507, spurious reduction of production cases(test_clause) -> nsepseq(case_clause(test_clause),VBAR)
##

Ill-formed case instruction.
At this point, if the case clause is complete, one of the following is
expected:
  * a vertical bar '|' followed by another clause;
  * a closing bracket ']' if the case is complete.
Note: A clause, here, is made of a pattern and an instruction or
a block, separated by an arrow '->'.

interactive_expr: Begin Case Verbatim Of LBRACKET With
##
## Ends in an error in state: 424.
##
## case(test_clause) -> Case expr Of LBRACKET option(VBAR) . cases(test_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 423, spurious reduction of production option(VBAR) ->
##
interactive_expr: Begin Case Verbatim Of With
##
## Ends in an error in state: 513.
##
## case(test_clause) -> Case expr Of option(VBAR) . cases(test_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 421, spurious reduction of production option(VBAR) ->
##
interactive_expr: Begin Case Verbatim Of WILD ARROW Skip VBAR With
##
## Ends in an error in state: 511.
##
## nsepseq(case_clause(test_clause),VBAR) -> case_clause(test_clause) VBAR . nsepseq(case_clause(test_clause),VBAR) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## case_clause(test_clause) VBAR
##

Ill-formed case instruction.
At this point, a case clause is expected, made of a pattern and an
instruction or block, separated by an arrow '->'.

interactive_expr: Begin Case Verbatim Of WILD ARROW Skip With
##
## Ends in an error in state: 514.
##
## case(test_clause) -> Case expr Of option(VBAR) cases(test_clause) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR) cases(test_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 510, spurious reduction of production nsepseq(case_clause(test_clause),VBAR) -> case_clause(test_clause)
## In state 507, spurious reduction of production cases(test_clause) -> nsepseq(case_clause(test_clause),VBAR)
##

Ill-formed case instruction.
At this point, if the clause is complete, one of the following is
expected:
  * a vertical bar '|' followed by another clause;
  * the keyword 'end' if the case is complete.
Note: A clause, here, is made of a pattern and an instruction or
a block, separated by an arrow '->'.

interactive_expr: Begin Case Verbatim Of WILD ARROW With
##
## Ends in an error in state: 482.
##
## case_clause(test_clause) -> pattern ARROW . test_clause [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Ill-formed clause of a case instruction.
At this point, one of the following is expected:
  * a single instruction;
  * a block of statements (instructions and declarations).
Note: A clause, here, is made of a pattern and an instruction or a
block, separated by an arrow '->'. A block is either delimited by
'block {' and '}' or 'begin' and 'end'.

interactive_expr: Begin Case Verbatim Of WILD With
##
## Ends in an error in state: 481.
##
## case_clause(test_clause) -> pattern . ARROW test_clause [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production pattern -> core_pattern
##

Ill-formed clause of a case instruction.
At this point, if the pattern is complete, an arrow '->' is expected,
followed by one of the following:
  * a single instruction;
  * a block of statements (instructions and declarations).
Note: A block is either delimited by 'block {' and '}' or 'begin' and
'end'.

interactive_expr: Begin Case Verbatim With
##
## Ends in an error in state: 420.
##
## case(test_clause) -> Case expr . Of option(VBAR) cases(test_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## case(test_clause) -> Case expr . Of LBRACKET option(VBAR) cases(test_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed case instruction.
At this point, if the condition is complete, the keyword 'of' is
expected, followed with a series of case clauses separated by vertical
bars '|'.
Note: A clause, here, is made of a pattern and an instruction or
a block, separated by an arrow '->'.

interactive_expr: Begin Case With
##
## Ends in an error in state: 419.
##
## case(test_clause) -> Case . expr Of option(VBAR) cases(test_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## case(test_clause) -> Case . expr Of LBRACKET option(VBAR) cases(test_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case
##

Ill-formed case instruction.
At this point, the condition is expected as an expression, followed by
the keyword 'of'.

interactive_expr: Begin UIdent DOT And With
##
## Ends in an error in state: 484.
##
## fun_call -> value_in_module . arguments [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## value_in_module
##

Ill-formed function call.
At this point, if the function name is fully qualified, the arguments
are expected between parentheses.

interactive_expr: Begin UIdent With
##
## Ends in an error in state: 168.
##
## module_path(selected_expr) -> UIdent . DOT module_path(selected_expr) [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## module_path(selected_expr) -> UIdent . DOT selected_expr [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

Ill-formed selection of a value from a module.
At this point, the selection operator '.' is expected, followed by the
qualified name of a value.

interactive_expr: Begin For Ident ARROW Ident In With
##
## Ends in an error in state: 415.
##
## for_in -> For Ident ARROW Ident In . Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW Ident In
##

Ill-formed bounded loop over a map.
At this point, the keyword 'map' is expected.

interactive_expr: Begin For Ident ARROW Ident In Map With
##
## Ends in an error in state: 416.
##
## for_in -> For Ident ARROW Ident In Map . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW Ident In Map
##

Ill-formed bounded loop over a map.
At this point, the map to be iterated is expected as an expression.

interactive_expr: Begin For Ident ARROW Ident In Map Verbatim With
##
## Ends in an error in state: 417.
##
## for_in -> For Ident ARROW Ident In Map expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW Ident In Map expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed bounded loop over a map.
At this point, the body of the loop is expected as a block of
instructions.

interactive_expr: Begin For Ident ARROW Ident With
##
## Ends in an error in state: 414.
##
## for_in -> For Ident ARROW Ident . In Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW Ident
##

Ill-formed bounded loop over a map.
At this point, the keywords 'in map' are expected, followed by the map
to be iterated, as an expression.

interactive_expr: Begin For Ident ARROW With
##
## Ends in an error in state: 413.
##
## for_in -> For Ident ARROW . Ident In Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW
##

Ill-formed bounded loop over a map.
At this point, an identifier matching values (as opposed to keys) in a
map is expected.

interactive_expr: Begin For Ident ASSIGN Verbatim To Verbatim Step Verbatim Attr
##
## Ends in an error in state: 410.
##
## for_int -> For Ident ASSIGN expr To expr step_clause . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASSIGN expr To expr step_clause
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 409, spurious reduction of production step_clause -> Step expr
##

Ill-formed bounded loop over a numerical interval.
At this point, if the step clause is complete, the loop body is
expected as a block of instructions.

interactive_expr: Begin For Ident ASSIGN Verbatim To Verbatim Step With
##
## Ends in an error in state: 408.
##
## step_clause -> Step . expr [ LBRACE Block Begin ]
##
## The known suffix of the stack is as follows:
## Step
##

Ill-formed bounded loop over a numerical interval.
At this point, the index increment is expected as an expression.

interactive_expr: Begin For Ident ASSIGN Verbatim To Verbatim With
##
## Ends in an error in state: 407.
##
## for_int -> For Ident ASSIGN expr To expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_int -> For Ident ASSIGN expr To expr . step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASSIGN expr To expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed bounded loop over a numerical interval.
At this point, if the final value of the index is complete, one of the
following is expected:
  * a step clause introduced by the keyword 'step' and followed by
    the index increment as an expression;
  * a loop body as a block of instructions.

interactive_expr: Begin For Ident ASSIGN Verbatim To With
##
## Ends in an error in state: 406.
##
## for_int -> For Ident ASSIGN expr To . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_int -> For Ident ASSIGN expr To . expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASSIGN expr To
##

Ill-formed bounded loop over a numerical interval.
At this point, the final value of the index is expected as an
expression.

interactive_expr: Begin For Ident ASSIGN Verbatim With
##
## Ends in an error in state: 405.
##
## for_int -> For Ident ASSIGN expr . To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_int -> For Ident ASSIGN expr . To expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASSIGN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed bounded loop over a numerical interval.
At this point, if the initial value of the index is complete, the
keyword 'to' is expected, followed by an expression whose value is the
final value of the index.

interactive_expr: Begin For Ident ASSIGN With
##
## Ends in an error in state: 404.
##
## for_int -> For Ident ASSIGN . expr To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_int -> For Ident ASSIGN . expr To expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASSIGN
##

Ill-formed bounded loop over a numerical interval.
At this point, the expression for the initial value of the index is
expected.

interactive_expr: Begin For Ident In Set Verbatim With
##
## Ends in an error in state: 402.
##
## for_in -> For Ident In collection expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident In collection expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed bounded loop over a list or a set.
At this point, if the collection is complete, the body of the loop is
expected as a block of instructions.

interactive_expr: Begin For Ident In Set With
##
## Ends in an error in state: 401.
##
## for_in -> For Ident In collection . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident In collection
##

Ill-formed bounded loop over a collection.
At this point, the collection is expected as an expression.

interactive_expr: Begin For Ident In With
##
## Ends in an error in state: 398.
##
## for_in -> For Ident In . collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident In
##

Ill-formed bounded loop over a set or a list.
At this point, the keywords 'set' or 'list' are expected, followed by
the actual collection as an expression.

interactive_expr: Begin For Ident With
##
## Ends in an error in state: 397.
##
## for_in -> For Ident . ARROW Ident In Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_in -> For Ident . In collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_int -> For Ident . ASSIGN expr To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_int -> For Ident . ASSIGN expr To expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident
##

Ill-formed bounded loop.
At this point, one of the following is expected:
  * if iterating over a numerical interval, then the assignment
    operator ':=' is expected, followed by the initial value of the
    index as an expression;
  * if iterating over a list or a set, then the keyword 'in' is
    expected, followed by either the keyword 'list' or 'map';
  * if iterating over a map, then a binding arrow '->' followed by a
    variable matching the range of the map (that is, 'values', as
    opposed to 'keys').

interactive_expr: Begin For With
##
## Ends in an error in state: 396.
##
## for_in -> For . Ident ARROW Ident In Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_in -> For . Ident In collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_int -> For . Ident ASSIGN expr To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_int -> For . Ident ASSIGN expr To expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For
##

Ill-formed bounded loop.
At this point, one of the following is expected:
  * if iterating over a numerical interval, then the index is expected
    as an identifier;
 * if iterating over a list or a set, then the element is expected as
   an identifier;
 * of iterating over a map, then the key (ranging over the domain of
   the map) is expected as an identifier.

interactive_expr: Begin Ident ASSIGN With
##
## Ends in an error in state: 495.
##
## assignment -> lhs ASSIGN . rhs [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## lhs ASSIGN
##

Ill-formed assignment.
At this point, the right-hand side of the assignment is expected as an
expression.

interactive_expr: Begin Ident With
##
## Ends in an error in state: 494.
##
## assignment -> lhs . ASSIGN rhs [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## lhs
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 395, spurious reduction of production path -> Ident
## In state 490, spurious reduction of production lhs -> path
##

Ill-formed assignment.
At this point, if the left-hand side of the assignment is complete,
the assignment operator ':=' is expected, followed by an expression.

interactive_expr: Begin If Verbatim Then LBRACE Skip With
##
## Ends in an error in state: 576.
##
## block -> LBRACE sep_or_term_list(statement,SEMI) . RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## LBRACE sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 520, spurious reduction of production nsepseq(statement,SEMI) -> statement
## In state 535, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI)
##

Ill-formed block of statements.
At this point, if the statement is complete, one of the following is
expected:
  * a semicolons ';' followed by another statement (instruction or
    declaration);
  * a closing brace '}' if the block is complete.

interactive_expr: Begin If Verbatim Then Skip Else With
##
## Ends in an error in state: 518.
##
## conditional -> If expr Then test_clause option(SEMI) Else . test_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then test_clause option(SEMI) Else
##

Ill-formed conditional instruction.
At this point, one of the following is expected:
  * a single instruction;
  * a block of statements (instructions and declarations).
Note: A block, in this context, is either delimited by '{' and '}' or
'begin' and 'end'.

interactive_expr: Begin If Verbatim Then Skip With
##
## Ends in an error in state: 517.
##
## conditional -> If expr Then test_clause option(SEMI) . Else test_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then test_clause option(SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 516, spurious reduction of production option(SEMI) ->
##

Ill-formed conditional instruction.
At this point, if the 'then' branch is complete, the keyword 'else' is
expected, followed by one of the following:
  * a single instruction;
  * a block of statements (instructions and declarations).
Note: A block, in this context, is either delimited by '{' and '}' or
'begin' and 'end'.

interactive_expr: Begin If Verbatim Then With
##
## Ends in an error in state: 394.
##
## conditional -> If expr Then . test_clause option(SEMI) Else test_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then
##

Ill-formed conditional instruction.
At this point, one of the following is expected for the contents of
the 'then' branch:
* a single instruction;
  * a block of statements (instructions and declarations).
Note: A block, in this context, is either delimited by '{' and '}' or
'begin' and 'end'.

interactive_expr: Begin If Verbatim With
##
## Ends in an error in state: 393.
##
## conditional -> If expr . Then test_clause option(SEMI) Else test_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed conditional instruction.
At this point, if the condition is complete, the keyword 'then' is
expected, followed by one of the following:
  * a single instruction;
  * a block of statements (instructions and declarations).
Note: A block, in this context, is either delimited by '{' and '}' or
'begin' and 'end'.

interactive_expr: Begin If With
##
## Ends in an error in state: 392.
##
## conditional -> If . expr Then test_clause option(SEMI) Else test_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If
##

Ill-formed conditional instruction.
At this point, a condition is expected as an expression.

interactive_expr: Ident DOT Int DOT With
##
## Ends in an error in state: 144.
##
## nsepseq(selection,DOT) -> selection DOT . nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACKET LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## selection DOT
##
interactive_expr: Ident DOT With
##
## Ends in an error in state: 140.
##
## projection -> Ident DOT . nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACKET LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## Ident DOT
##

Ill-formed selection in a record or a tuple.
At this point, one of the following is expected:
  * a record field name, if selecting from a record;
  * the index of a tuple component, '0' denoting the first component.

interactive_expr: Begin Patch Ident While
##
## Ends in an error in state: 289.
##
## map_patch -> Patch path . With ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch path . With record_expr [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch path . With ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 196, spurious reduction of production path -> Ident
##

Ill-formed patch.
At this point, if the data structure (map, set or record) being
patched is fully qualified, the keyword 'with' is expected, followed
by a map, a set or a record expression.

interactive_expr: Begin Patch Ident With Map LBRACKET Verbatim ARROW Bytes With
##
## Ends in an error in state: 305.
##
## ne_injection(Map,binding) -> Map LBRACKET sep_or_term_list(binding,SEMI) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 311, spurious reduction of production binding -> expr ARROW expr
## In state 312, spurious reduction of production nsepseq(binding,SEMI) -> binding
## In state 308, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI)
##

Ill-formed map patch.
At this point, if the key/value binding is complete, one of the
following is expected:
  * a semicolon ';' followed by another key/value binding;
  * a closing bracket ']' if the map is complete.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Begin Patch Ident With Map LBRACKET With
##
## Ends in an error in state: 304.
##
## ne_injection(Map,binding) -> Map LBRACKET . sep_or_term_list(binding,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET
##

Ill-formed map patch.
At this point, key/value bindings are expected, separated by
semicolons ';' and followed by a closing bracket ']'.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Begin Patch Ident With Map Verbatim ARROW Bytes With
##
## Ends in an error in state: 316.
##
## ne_injection(Map,binding) -> Map sep_or_term_list(binding,SEMI) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 311, spurious reduction of production binding -> expr ARROW expr
## In state 312, spurious reduction of production nsepseq(binding,SEMI) -> binding
## In state 308, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI)
##

Ill-formed map patch.
At this point, if the key/value binding is complete, one of the following
is expected:
  * a semicolon ';' followed by another key/value binding (update);
  * the keyword 'end' if the patch is complete.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Begin Patch Ident With Map With
##
## Ends in an error in state: 303.
##
## ne_injection(Map,binding) -> Map . sep_or_term_list(binding,SEMI) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## ne_injection(Map,binding) -> Map . LBRACKET sep_or_term_list(binding,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map
##

Ill-formed map patch.
At this point, one of the following is expected:
  * key/value bindings (updates) separated by semicolons ';' and
    followed by the keyword 'end';
  * an opening bracket '[' followed by key/value bindings and a
    closing bracket ']'.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Record With
##
## Ends in an error in state: 122.
##
## ne_injection(Record,field_assignment) -> Record . sep_or_term_list(field_assignment,SEMI) End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## ne_injection(Record,field_assignment) -> Record . LBRACKET sep_or_term_list(field_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record
##

Ill-formed record expression.
At this point, one of the following is expected:
  * assignments to record fields, separated by semicolons
    ';' and followed by the keyword 'end';
  * an opening bracket '[' followed by assignments and a closing
    bracket ']'.

interactive_expr: Begin Patch Ident With Set LBRACKET Verbatim With
##
## Ends in an error in state: 293.
##
## ne_injection(Set,expr) -> Set LBRACKET sep_or_term_list(expr,SEMI) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 297, spurious reduction of production nsepseq(expr,SEMI) -> expr
## In state 296, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI)
##

Ill-formed set patch.
At this point, if the set element (update) is complete, one of the
following is expected:
  * a semicolon ';' followed by another set element;
  * a closing bracket ']' if the set is complete.

interactive_expr: Begin Patch Ident With Set LBRACKET With
##
## Ends in an error in state: 292.
##
## ne_injection(Set,expr) -> Set LBRACKET . sep_or_term_list(expr,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET
##

Ill-formed set patch.
At this point, set elements (updates) separated by semicolons ';' are
expected and followed by a closing brace ']'.

interactive_expr: Begin Patch Ident With Set Verbatim With
##
## Ends in an error in state: 301.
##
## ne_injection(Set,expr) -> Set sep_or_term_list(expr,SEMI) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 297, spurious reduction of production nsepseq(expr,SEMI) -> expr
## In state 296, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI)
##

Ill-formed set patch.
At this point, if the set element (update) is complete, one of the
following is expected:
  * a semicolon ';' followed by another set element;
  * the keyword 'end' if the patch is complete.

interactive_expr: Begin Patch Ident With Set With
##
## Ends in an error in state: 291.
##
## ne_injection(Set,expr) -> Set . sep_or_term_list(expr,SEMI) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## ne_injection(Set,expr) -> Set . LBRACKET sep_or_term_list(expr,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set
##

Ill-formed set of expressions.
At this point, one of the following is expected:
  * set elements separated by semicolons ';' and followed by the
    keyword 'end';
  * as previously, but enclosed between brackets '[' and ']'.

interactive_expr: Begin Patch Ident With With
##
## Ends in an error in state: 290.
##
## map_patch -> Patch path With . ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch path With . record_expr [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch path With . ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch path With
##

Ill-formed patch.
At this point, a map, a record or a set is expected, starting with the
keywors 'map', 'record' or 'set', respectively.

interactive_expr: Begin Patch With
##
## Ends in an error in state: 288.
##
## map_patch -> Patch . path With ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch . path With record_expr [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch . path With ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch
##

Ill-formed patch.
At this point, the fully qualified name of a record, a set or a map is
expected.

interactive_expr: Begin Remove Verbatim From Map With
##
## Ends in an error in state: 286.
##
## map_remove -> Remove expr From Map . path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From Map
##

Ill-formed removal in a map.
At this point, the fully qualified name of a map is expected.

interactive_expr: Begin Remove Verbatim From Set With
##
## Ends in an error in state: 284.
##
## set_remove -> Remove expr From Set . path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From Set
##

Ill-formed removal in a set.
At this point, the fully qualified name of a set is expected.

interactive_expr: Begin Remove Verbatim From With
##
## Ends in an error in state: 283.
##
## map_remove -> Remove expr From . Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove expr From . Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From
##

Ill-formed removal in a map or a set.
At this point, either the keyword 'map' or 'set' is expected.

interactive_expr: Begin Remove Verbatim With
##
## Ends in an error in state: 282.
##
## map_remove -> Remove expr . From Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove expr . From Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed removal in a map or a set.
At this point, if the expression denoting the collection is complete,
the keyword 'from' is expected, followed by the keyword 'map' or
'set'.

interactive_expr: Begin Remove With
##
## Ends in an error in state: 179.
##
## map_remove -> Remove . expr From Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove . expr From Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove
##

Ill-formed removal in a map or a set.
At this point, one of the following is expected:
  * if removing an element from a set, that set element as an
    expression;
  * if removing a binding from a map, the key of that binding as an
    expression.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Begin Skip End While
##
## Ends in an error in state: 266.
##
## block_with -> block . With expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## block
##

Ill-formed block of instructions.
At this point, the keyword 'with' is expected, followed by an
expression whose value is that of the whole block.

interactive_expr: Begin Skip End With With
##
## Ends in an error in state: 267.
##
## block_with -> block With . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## block With
##

Ill-formed block of instructions.
At this point, an expression is expected, whose value is that of the
block.

interactive_expr: Begin Skip With
##
## Ends in an error in state: 532.
##
## block -> Begin sep_or_term_list(statement,SEMI) . End [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Begin sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 520, spurious reduction of production nsepseq(statement,SEMI) -> statement
## In state 535, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI)
##

Ill-formed block of statements.
At this point, if the statement is complete, one of the following is
expected:
  * a semicolon ';' followed by another statement (instruction or
    declaration);
  * the keyword 'end' if the block is complete.

interactive_expr: Begin Var Ident ASSIGN With
##
## Ends in an error in state: 164.
##
## unqualified_decl(ASSIGN) -> Ident ASSIGN . expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident ASSIGN
##

Ill-formed variable declaration.
At this point, an expression is expected, whose value is the initial
value of the variable being defined.

interactive_expr: Begin Var Ident COLON UIdent ARROW
##
## Ends in an error in state: 542.
##
## unqualified_decl(ASSIGN) -> Ident type_annot . ASSIGN expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 163, spurious reduction of production type_annot -> COLON type_expr
##

Ill-formed variable declaration.
At this point, if the type annotation is complete, the assignment
operator ':=' is expected, followed by the expression whose value is
the initial value of the variable being defined.

interactive_expr: Begin Var Ident With
##
## Ends in an error in state: 161.
##
## unqualified_decl(ASSIGN) -> Ident . ASSIGN expr [ SEMI RBRACE End ]
## unqualified_decl(ASSIGN) -> Ident . type_annot ASSIGN expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed variable declaration.
At this point, one of the following is expected:
  * a type annotation introduced by a colon ':';
  * the assignment operator ':=' followed by an expression whose
    value is the initial value of the variable being defined.

interactive_expr: Begin Var With
##
## Ends in an error in state: 160.
##
## open_var_decl -> Var . unqualified_decl(ASSIGN) [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Var
##

Ill-formed variable declaration.
At this point, a variable name is expected.

interactive_expr: Begin While Verbatim With
##
## Ends in an error in state: 574.
##
## while_loop -> While expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## While expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed general loop.
At this point, if the condition is complete, the body of the loop is
expected as a block of instructions (starting either with the keyword
'block' or 'begin').

interactive_expr: Begin While With
##
## Ends in an error in state: 136.
##
## while_loop -> While . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## While
##

Ill-formed general loop.
At this point, the condition is expected as an expression.

interactive_expr: BigMap LBRACKET Verbatim ARROW Bytes With
##
## Ends in an error in state: 537.
##
## injection(BigMap,binding) -> BigMap LBRACKET option(sep_or_term_list(binding,SEMI)) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap LBRACKET option(sep_or_term_list(binding,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 311, spurious reduction of production binding -> expr ARROW expr
## In state 312, spurious reduction of production nsepseq(binding,SEMI) -> binding
## In state 308, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI)
## In state 536, spurious reduction of production option(sep_or_term_list(binding,SEMI)) -> sep_or_term_list(binding,SEMI)
##

Ill-formed big_map expression.
At this point, if the key/value binding is complete, one of the
following is expected:
  * a semicolon ';' followed by more bindings and a closing bracket
    ']';
  * a closing bracket ']' if the big_map is complete.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: BigMap LBRACKET With
##
## Ends in an error in state: 166.
##
## injection(BigMap,binding) -> BigMap LBRACKET . option(sep_or_term_list(binding,SEMI)) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap LBRACKET
##

Ill-formed big_map expression.
At this point, one of the following is expected:
  * key/value bindings separated by semicolons ';' and concluded by a
    closing bracket ']';
  * a closing bracket ']' if the big_map is empty.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: BigMap Verbatim ARROW Bytes With
##
## Ends in an error in state: 539.
##
## injection(BigMap,binding) -> BigMap option(sep_or_term_list(binding,SEMI)) . End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap option(sep_or_term_list(binding,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 311, spurious reduction of production binding -> expr ARROW expr
## In state 312, spurious reduction of production nsepseq(binding,SEMI) -> binding
## In state 308, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI)
## In state 536, spurious reduction of production option(sep_or_term_list(binding,SEMI)) -> sep_or_term_list(binding,SEMI)
##

Ill-formed big_map expression.
At this point, if the key/value binding is complete, one of the
following is expected:
  * a semicolon ';' followed by more bindings and concluded by the
    keyword 'end';
    * the keyword 'end' if the big_map is complete.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: BigMap With
##
## Ends in an error in state: 165.
##
## injection(BigMap,binding) -> BigMap . option(sep_or_term_list(binding,SEMI)) End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## injection(BigMap,binding) -> BigMap . LBRACKET option(sep_or_term_list(binding,SEMI)) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap
##

Ill-formed big_map expression.
At this point, one of the following is expected:
  * key/value bindings separated by semicolons ';' and concluded by
    the keyword 'end';
  * an opening bracket '[' followed by key/value bindings,
    or none (empty big_map), and a closing bracket ']';
  * the keyword 'end' if the big_map is empty.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Block LBRACE Skip With
##
## Ends in an error in state: 546.
##
## block -> Block LBRACE sep_or_term_list(statement,SEMI) . RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block LBRACE sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 520, spurious reduction of production nsepseq(statement,SEMI) -> statement
## In state 535, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI)
##

Ill-formed block of statements.
At this point, if the statement is complete, a closing brace '}' is
expected.

interactive_expr: Block With
##
## Ends in an error in state: 158.
##
## block -> Block . LBRACE sep_or_term_list(statement,SEMI) RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block
##

Ill-formed block of statements.
At this point, an opening brace '{' is expected, followed by
statements (instructions and declarations) separated or terminated by
semicolons ';', and concluded by a closing brace '}'.

interactive_expr: Ctor_Some With
##
## Ends in an error in state: 153.
##
## some_expr -> Ctor_Some . arguments [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Ctor_Some
##

Ill-formed application of the constructor 'Some'.
At this point, the arguments are expected as a tuple of expressions.

interactive_expr: Case Verbatim Of Ctor_Some LPAR WILD With
##
## Ends in an error in state: 449.
##
## par(core_pattern) -> LPAR core_pattern . RPAR [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR core_pattern
##

Ill-formed application of the constructor 'Some' in a pattern.
At this point, if the pattern is complete, a closing parenthesis ')'
is expected

interactive_expr: Case Verbatim Of Ctor_Some LPAR With
##
## Ends in an error in state: 439.
##
## par(core_pattern) -> LPAR . core_pattern RPAR [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed application of the constructor 'Some' in a pattern.
At this point, the parameter is expected as a pattern.

interactive_expr: Case Verbatim Of Ctor_Some With
##
## Ends in an error in state: 438.
##
## some_pattern -> Ctor_Some . par(core_pattern) [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Ctor_Some
##

Ill-formed application of the constructor 'Some' in a pattern.
At this point, the parameters are expected in a tuple of patterns.

interactive_expr: Case Verbatim Of UIdent LPAR With
##
## Ends in an error in state: 428.
##
## par(tuple(pattern)) -> LPAR . tuple(pattern) RPAR [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed tuple of patterns.
At this point, the first component is expected as a pattern.

interactive_expr: Case Verbatim Of LBRACKET WILD ARROW Bytes With
##
## Ends in an error in state: 556.
##
## case(expr) -> Case expr Of LBRACKET option(VBAR) cases(expr) . RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR) cases(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 554, spurious reduction of production case_clause(expr) -> pattern ARROW expr
## In state 558, spurious reduction of production nsepseq(case_clause(expr),VBAR) -> case_clause(expr)
## In state 555, spurious reduction of production cases(expr) -> nsepseq(case_clause(expr),VBAR)
##

Ill-formed case expression.
At this point, if the case clause is complete, one of the following is
expected:
  * more clauses, separated by vertical bars '|';
  * a closing bracket ']' if the case is complete.
Note: A clause, here, is made of a pattern and an expression separated
by an arrow '->'.

interactive_expr: Case Verbatim Of LBRACKET With
##
## Ends in an error in state: 551.
##
## case(expr) -> Case expr Of LBRACKET option(VBAR) . cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 550, spurious reduction of production option(VBAR) ->
##
interactive_expr: Case Verbatim Of With
##
## Ends in an error in state: 561.
##
## case(expr) -> Case expr Of option(VBAR) . cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 549, spurious reduction of production option(VBAR) ->
##
interactive_expr: Case Verbatim Of WILD ARROW Bytes VBAR With
##
## Ends in an error in state: 559.
##
## nsepseq(case_clause(expr),VBAR) -> case_clause(expr) VBAR . nsepseq(case_clause(expr),VBAR) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## case_clause(expr) VBAR
##

Ill-formed case expression.
At this point, a case clause is expected, made of a pattern and an
expression separated by an arrow '->'.

interactive_expr: Case Verbatim Of LPAR WILD COMMA With
##
## Ends in an error in state: 456.
##
## tuple(pattern) -> pattern COMMA . nsepseq(pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

Ill-formed tuple of patterns in a case expression.
At this point, a tuple component is expected as a pattern.

interactive_expr: Case Verbatim Of LPAR WILD With
##
## Ends in an error in state: 454.
##
## par(pattern) -> LPAR pattern . RPAR [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
## tuple(pattern) -> pattern . COMMA nsepseq(pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production pattern -> core_pattern
##
interactive_expr: Case Verbatim Of LPAR WILD COMMA WILD With
##
## Ends in an error in state: 457.
##
## nsepseq(pattern,COMMA) -> pattern . [ RPAR ]
## nsepseq(pattern,COMMA) -> pattern . COMMA nsepseq(pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production pattern -> core_pattern
##

Ill-formed tuple of patterns.
At this point, if the tuple component is complete, one of the
following is expected:
  * a comma ',' followed by another component as a pattern;
  * a closing parenthesis ')' if the tuple is complete

interactive_expr: Case Verbatim Of LPAR With
##
## Ends in an error in state: 434.
##
## par(pattern) -> LPAR . pattern RPAR [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
## par(tuple(pattern)) -> LPAR . tuple(pattern) RPAR [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed list pattern.
At this point, a pattern matching non-empty lists is expected.

interactive_expr: Case Verbatim Of List LBRACKET WILD With
##
## Ends in an error in state: 469.
##
## injection(List,core_pattern) -> List LBRACKET option(sep_or_term_list(core_pattern,SEMI)) . RBRACKET [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET option(sep_or_term_list(core_pattern,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 473, spurious reduction of production nsepseq(core_pattern,SEMI) -> core_pattern
## In state 472, spurious reduction of production sep_or_term_list(core_pattern,SEMI) -> nsepseq(core_pattern,SEMI)
## In state 468, spurious reduction of production option(sep_or_term_list(core_pattern,SEMI)) -> sep_or_term_list(core_pattern,SEMI)
##

Ill-formed list of patterns.
At this point, if pattern matching a list element is complete, one of
the following is expected:
  * a semicolon ';' followed by another pattern;
  * a closing bracket ']' if the list is complete.

interactive_expr: Case Verbatim Of List LBRACKET With
##
## Ends in an error in state: 467.
##
## injection(List,core_pattern) -> List LBRACKET . option(sep_or_term_list(core_pattern,SEMI)) RBRACKET [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET
##

Ill-formed list of patterns.
At this point, one of the following is expected:
  * patterns matching list elements and separated by semicolons ';';
  * a closing bracket ']' if matching the empty list.

interactive_expr: Case Verbatim Of List With
##
## Ends in an error in state: 433.
##
## injection(List,core_pattern) -> List . option(sep_or_term_list(core_pattern,SEMI)) End [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
## injection(List,core_pattern) -> List . LBRACKET option(sep_or_term_list(core_pattern,SEMI)) RBRACKET [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

Ill-formed list of patterns.
At this point, one of the following is expected:
  * patterns matching list elements, separated by semicolons ';';
  * an opening bracket '[' followed by patterns separated by
    semicolons ';', and a closing bracket ']';
  * the brackets '[]' or the keyword 'end' if matching the empty list.

interactive_expr: Case Verbatim Of WILD ARROW Bytes With
##
## Ends in an error in state: 562.
##
## case(expr) -> Case expr Of option(VBAR) cases(expr) . End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR) cases(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 554, spurious reduction of production case_clause(expr) -> pattern ARROW expr
## In state 558, spurious reduction of production nsepseq(case_clause(expr),VBAR) -> case_clause(expr)
## In state 555, spurious reduction of production cases(expr) -> nsepseq(case_clause(expr),VBAR)
##

Ill-formed case expression
At this point, if the clause is complete, one of the following is
expected:
  * more clauses separated by vertical bars '|';
  * the keyword 'end' if the case is complete.
Note: A clause, here, is made of a pattern and an expression separated
by an arrow '->'.

interactive_expr: Case Verbatim Of WILD ARROW With
##
## Ends in an error in state: 553.
##
## case_clause(expr) -> pattern ARROW . expr [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Ill-formed clause of a case expression.
At this point, the right-hand side of the clause is expected as an
expression.
Note: A clause, here, is made of a pattern and an expression separated
by an arrow '->'.

interactive_expr: Case Verbatim Of WILD SHARP WILD SHARP With
##
## Ends in an error in state: 464.
##
## nsepseq(core_pattern,SHARP) -> core_pattern SHARP . nsepseq(core_pattern,SHARP) [ RPAR COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern SHARP
##
interactive_expr: Case Verbatim Of WILD SHARP With
##
## Ends in an error in state: 461.
##
## pattern -> core_pattern SHARP . nsepseq(core_pattern,SHARP) [ RPAR COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern SHARP
##

Ill-formed list of patterns.
At this point, a pattern matching a non-empty list is expected.

interactive_expr: Case Verbatim Of WILD With
##
## Ends in an error in state: 552.
##
## case_clause(expr) -> pattern . ARROW expr [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production pattern -> core_pattern
##

Ill-formed case clause.
At this point, if the pattern is complete, an arrow '->' is expected,
followed by the right-hand side as an expression.

interactive_expr: Case Verbatim With
##
## Ends in an error in state: 548.
##
## case(expr) -> Case expr . Of option(VBAR) cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
## case(expr) -> Case expr . Of LBRACKET option(VBAR) cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed case expression.
At this point, if the condition is complete, the keyword 'of' is
expected, followed by case clauses separated by vertical bars '|'.
Note: A clause, here, is made of a pattern and an expression separated
by an arrow '->'.

interactive_expr: Case With
##
## Ends in an error in state: 156.
##
## case(expr) -> Case . expr Of option(VBAR) cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
## case(expr) -> Case . expr Of LBRACKET option(VBAR) cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case
##

Ill-formed case expression.
At this point, the condition is expected as an expression.

interactive_expr: UIdent DOT With
##
## Ends in an error in state: 169.
##
## module_path(selected_expr) -> UIdent DOT . module_path(selected_expr) [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## module_path(selected_expr) -> UIdent DOT . selected_expr [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

Ill-formed selection of a value from a module.
At this point, the qualified name of a value is expected.

interactive_expr: Function LPAR Const Ident RPAR COLON Ident With
##
## Ends in an error in state: 565.
##
## fun_expr -> Function parameters type_annot . Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 25, spurious reduction of production core_type -> Ident
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 163, spurious reduction of production type_annot -> COLON type_expr
##

Ill-formed function expression.
At this point, the keyword 'is' is expected, followed with the
function body as an expression or a block of statements (instructions
or declarations) ending with an expression.
Note: A block, in this context, is delimited by 'block {' and '} with'.

interactive_expr: Function LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 151.
##
## fun_expr -> Function parameters Is . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters Is
##

Ill-formed function expression.
At this point, the function body is expected as an expression.

interactive_expr: Function LPAR Const Ident RPAR With
##
## Ends in an error in state: 150.
##
## fun_expr -> Function parameters . Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
## fun_expr -> Function parameters . type_annot Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters
##
contract: Attr Function Ident LPAR Const Ident RPAR With
##
## Ends in an error in state: 371.
##
## open_fun_decl -> nseq(Attr) Function Ident parameters . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Function Ident parameters . type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident parameters
##

Ill-formed function expression.
At this point, one of the following is expected:
  * a type annotation for the returned value;
  * the keyword 'is' followed by the function body as an expression.

interactive_expr: Function LPAR Const Ident With
##
## Ends in an error in state: 106.
##
## param_decl -> Const Ident . option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Const Ident
##
interactive_expr: Function LPAR Var Ident With
##
## Ends in an error in state: 101.
##
## param_decl -> Var Ident . option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Var Ident
##

Ill-formed function parameter declaration.
At this point, one of the following is expected:
  * a type annotation starting with a colon ':';
  * a semicolon ';' followed with another parameter declaration;
  * a closing parenthesis ')' if no more parameters.

interactive_expr: Function LPAR Const With
##
## Ends in an error in state: 103.
##
## param_decl -> Const . Ident option(param_type) [ SEMI RPAR ]
## param_decl -> Const . WILD option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Const
##

Ill-formed function parameter declaration.
At this point, the name of the constant parameter is expected.

interactive_expr: Function LPAR Var Ident COLON String With
##
## Ends in an error in state: 111.
##
## par(nsepseq(param_decl,SEMI)) -> LPAR nsepseq(param_decl,SEMI) . RPAR [ Is COLON ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(param_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 98, spurious reduction of production param_type -> COLON fun_type
## In state 99, spurious reduction of production option(param_type) -> param_type
## In state 102, spurious reduction of production param_decl -> Var Ident option(param_type)
## In state 108, spurious reduction of production nsepseq(param_decl,SEMI) -> param_decl
##

Ill-formed function parameter declaration.
At this point, if the parameter declaration is complete, a closing
parenthesis ')' is expected.

interactive_expr: Function LPAR Var Ident COLON With
##
## Ends in an error in state: 97.
##
## param_type -> COLON . fun_type [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## COLON
##

Ill-formed function parameter type.
At this point, a type is expected.

interactive_expr: Function LPAR Var Ident SEMI With
##
## Ends in an error in state: 109.
##
## nsepseq(param_decl,SEMI) -> param_decl SEMI . nsepseq(param_decl,SEMI) [ RPAR ]
##
## The known suffix of the stack is as follows:
## param_decl SEMI
##

Ill-formed function parameters.
At this point, a function parameter declaration is expected.

interactive_expr: Function LPAR Var With
##
## Ends in an error in state: 95.
##
## param_decl -> Var . Ident option(param_type) [ SEMI RPAR ]
## param_decl -> Var . WILD option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Var
##

Ill-formed function parameter declaration.
At this point, the name of the variable parameter is expected.

interactive_expr: Function LPAR With
##
## Ends in an error in state: 94.
##
## par(nsepseq(param_decl,SEMI)) -> LPAR . nsepseq(param_decl,SEMI) RPAR [ Is COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed function parameter declaration.
At this point, a parameter declaration is expected.

interactive_expr: Function With
##
## Ends in an error in state: 149.
##
## fun_expr -> Function . parameters Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
## fun_expr -> Function . parameters type_annot Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function
##

Ill-formed function expression.
At this point, parameter declarations are expected between parentheses.

interactive_expr: Ident LBRACKET Verbatim With
##
## Ends in an error in state: 279.
##
## brackets(expr) -> LBRACKET expr . RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed map lookup.
At this point, if the key is complete, a closing bracket ']' is
expected.

interactive_expr: Ident LBRACKET With
##
## Ends in an error in state: 278.
##
## brackets(expr) -> LBRACKET . expr RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed map lookup.
At this point, a key is expected as an expression.

interactive_expr: Ident LPAR Verbatim COMMA With
##
## Ends in an error in state: 585.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed tuple expression.
At this point, another component is expected as an expression.

interactive_expr: Ident LPAR Verbatim With
##
## Ends in an error in state: 622.
##
## par(nsepseq(expr,COMMA)) -> LPAR nsepseq(expr,COMMA) . RPAR [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(expr,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 584, spurious reduction of production nsepseq(expr,COMMA) -> expr
##

Ill-formed function call.
At this point, if the argument is complete, a closing parenthesis ')'
is expected.

interactive_expr: Ident LPAR With
##
## Ends in an error in state: 118.
##
## par(nsepseq(expr,COMMA)) -> LPAR . nsepseq(expr,COMMA) RPAR [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed function call.
At this point, an argument is expected as an expression.

interactive_expr: Ident While
##
## Ends in an error in state: 192.
##
## map_lookup -> path . brackets(expr) [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## record_update -> path . With ne_injection(Record,field_path_assignment) [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production path -> Ident
##

Ill-formed map lookup or record update.
At this point, if the name is fully qualified, one of the following is
expected:
  * if the name denotes a map, then a key as an expression between
    brackets '[' and ']';
  * if the name denotes a record, then the keyword 'with', followed by
    a record (update)

interactive_expr: Ident With Record Ident EQ Bytes SEMI With
##
## Ends in an error in state: 275.
##
## ne_injection(Record,field_path_assignment) -> Record sep_or_term_list(field_path_assignment,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_path_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 272, spurious reduction of production nseq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment SEMI
## In state 269, spurious reduction of production sep_or_term_list(field_path_assignment,SEMI) -> nseq(__anonymous_0(field_path_assignment,SEMI))
##

Ill-formed record update.
At this point, if the field update is complete, one of the following
is expected:
  * a semicolon ';' followed by another field update (assignment);
  * the keyword 'end' if the record update is complete.

interactive_expr: Ident With Record Ident With
##
## Ends in an error in state: 200.
##
## field_path_assignment -> path . EQ expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 196, spurious reduction of production path -> Ident
##

Ill-formed record update.
At this point, if the field to update is fully qualified, the symbol
'=' is expected, followed by an expression whose value is the new
value of the field.

interactive_expr: Ident With Record LBRACKET Ident EQ Bytes With
##
## Ends in an error in state: 197.
##
## ne_injection(Record,field_path_assignment) -> Record LBRACKET sep_or_term_list(field_path_assignment,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_path_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 229, spurious reduction of production field_path_assignment -> path EQ expr
## In state 271, spurious reduction of production nsepseq(field_path_assignment,SEMI) -> field_path_assignment
## In state 270, spurious reduction of production sep_or_term_list(field_path_assignment,SEMI) -> nsepseq(field_path_assignment,SEMI)
##

Ill-formed record update.
At this point, if the field assignment is complete, one of the
following is expected:
  * a semicolon ';' followed by another field assignment (update);
  * a closing bracket ']' if the update is complete.

interactive_expr: Ident With Record LBRACKET With
##
## Ends in an error in state: 195.
##
## ne_injection(Record,field_path_assignment) -> Record LBRACKET . sep_or_term_list(field_path_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

Ill-formed record update.
At this point, a field assignment (update) is expected.

interactive_expr: Ident With Record With
##
## Ends in an error in state: 194.
##
## ne_injection(Record,field_path_assignment) -> Record . sep_or_term_list(field_path_assignment,SEMI) End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## ne_injection(Record,field_path_assignment) -> Record . LBRACKET sep_or_term_list(field_path_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record
##

Ill-formed record update.
At this point, one of the following is expected:
  * a series of field assignments (updates), separated by semicolons ';';
  * an opening bracket '[' followed by field assignments and a closing
    bracket ']'.

interactive_expr: Ident With With
##
## Ends in an error in state: 193.
##
## record_update -> path With . ne_injection(Record,field_path_assignment) [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## path With
##

Ill-formed record update.
At this point, a record is expected, starting with the keyword
'record'.

interactive_expr: If Verbatim Then Verbatim With
##
## Ends in an error in state: 571.
##
## cond_expr -> If expr Then expr option(SEMI) . Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then expr option(SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 570, spurious reduction of production option(SEMI) ->
##

Ill-formed conditional expression.
At this point, if the expression of the 'then' branch is complete, the
keyword 'else' is expected, followed by an expression.

interactive_expr: If Verbatim Then Verbatim Else With
##
## Ends in an error in state: 572.
##
## cond_expr -> If expr Then expr option(SEMI) Else . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then expr option(SEMI) Else
##

Ill-formed conditional expression.
At this point, the contents of the 'else' branch is expected as an
expression.

interactive_expr: If Verbatim Then With
##
## Ends in an error in state: 569.
##
## cond_expr -> If expr Then . expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then
##

Ill-formed conditional expression.
At this point, the contents of the 'then' branch is expected as an
expression.

interactive_expr: If Verbatim With
##
## Ends in an error in state: 568.
##
## cond_expr -> If expr . Then expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed conditional expression.
At this point, if the condition is complete, the keyword 'then' is
expected, followed by an expression.

interactive_expr: If With
##
## Ends in an error in state: 138.
##
## cond_expr -> If . expr Then expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If
##

Ill-formed if conditional expression.
At this point, the condition is expected as an expression.

interactive_expr: LPAR Verbatim COLON Ident With
##
## Ends in an error in state: 589.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 25, spurious reduction of production core_type -> Ident
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 163, spurious reduction of production type_annot -> COLON type_expr
## In state 588, spurious reduction of production annot_expr -> disj_expr type_annot
##

Ill-formed annotated expression.
At this point, if the type annotation is complete, a closing
parenthesis ')' is expected.

interactive_expr: LPAR Verbatim COMMA Bytes With
##
## Ends in an error in state: 578.
##
## par(tuple(expr)) -> LPAR tuple(expr) . RPAR [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR tuple(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 584, spurious reduction of production nsepseq(expr,COMMA) -> expr
## In state 583, spurious reduction of production tuple(expr) -> expr COMMA nsepseq(expr,COMMA)
##

Ill-formed tuple of expressions.
At this point, if the component is complete, one of the following is
expected:
  * a comma ',' followed by another component as an expression;
  * a closing parenthesis ')' if the tuple is complete.

interactive_expr: LPAR Verbatim COMMA With
##
## Ends in an error in state: 582.
##
## tuple(expr) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed tuples of expressions.
At this point, a tuple component is expected as an expression.

interactive_expr: LPAR Verbatim With
##
## Ends in an error in state: 580.
##
## par(expr) -> LPAR expr . RPAR [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## tuple(expr) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 587, spurious reduction of production expr -> disj_expr
##

Ill-formed expression.
At this point, if the expression is complete, one of the following is
expected:
  * a comma ',' followed by an expression, if defining a tuple;
  * a closing parenthesis ')' if defining a parenthesised expression.

interactive_expr: LPAR With
##
## Ends in an error in state: 134.
##
## par(annot_expr) -> LPAR . annot_expr RPAR [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## par(expr) -> LPAR . expr RPAR [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## par(tuple(expr)) -> LPAR . tuple(expr) RPAR [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed expression.
At this point, an expression is expected, denoting either
  * an expression annotated with its type,
  * a parenthesised expression,
  * a tuple component.

interactive_expr: Lang Verbatim With
##
## Ends in an error in state: 591.
##
## code_inj -> Lang expr . RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed code injection.
At this point, if the expression denoting the code to inject is
complete, then a closing bracket ']' is expected.

interactive_expr: Lang With
##
## Ends in an error in state: 133.
##
## code_inj -> Lang . expr RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Lang
##

Ill-formed code injection.
At this point, the code is expected as an expression whose value is a
verbatim string.

interactive_expr: List LBRACKET Verbatim With
##
## Ends in an error in state: 595.
##
## injection(List,expr) -> List LBRACKET option(sep_or_term_list(expr,SEMI)) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET option(sep_or_term_list(expr,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 297, spurious reduction of production nsepseq(expr,SEMI) -> expr
## In state 296, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI)
## In state 594, spurious reduction of production option(sep_or_term_list(expr,SEMI)) -> sep_or_term_list(expr,SEMI)
##

Ill-formed list of expressions.
At this point, if the list element is complete, one of the following
is expected:
  * a semicolon ';' followed by another element as an expression;
  * a closing bracket ']' if the list is complete.

interactive_expr: List LBRACKET With
##
## Ends in an error in state: 593.
##
## injection(List,expr) -> List LBRACKET . option(sep_or_term_list(expr,SEMI)) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET
##

Ill-formed list of expressions.
At this point, one of the following is expected:
  * list elements as expressions separated by semicolons ';';
  * a closing bracket ']' if the list is empty.

interactive_expr: List Verbatim With
##
## Ends in an error in state: 597.
##
## injection(List,expr) -> List option(sep_or_term_list(expr,SEMI)) . End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## List option(sep_or_term_list(expr,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 297, spurious reduction of production nsepseq(expr,SEMI) -> expr
## In state 296, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI)
## In state 594, spurious reduction of production option(sep_or_term_list(expr,SEMI)) -> sep_or_term_list(expr,SEMI)
##

Ill-formed list of expressions.
At this point, if the list element is complete, one of the following
is expected:
  * a semicolon ';' followed by another element as an expression;
  * the keyword 'end' if the list is complete.

interactive_expr: List With
##
## Ends in an error in state: 132.
##
## injection(List,expr) -> List . option(sep_or_term_list(expr,SEMI)) End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## injection(List,expr) -> List . LBRACKET option(sep_or_term_list(expr,SEMI)) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

Ill-formed list of expressions.
At this point, one of the following is expected:
  * the brackets '[]' or the keyword 'end' if the list is empty;
  * list elements as expressions separated by semicolons ';';
  * as the previous case, but enclosed between brackets '[' and ']'.

interactive_expr: MINUS With
##
## Ends in an error in state: 131.
##
## unary_expr -> MINUS . core_expr [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Ill-formed unary expression.
At this point, an expression is expected.

interactive_expr: Map LBRACKET Verbatim ARROW Bytes With
##
## Ends in an error in state: 601.
##
## injection(Map,binding) -> Map LBRACKET option(sep_or_term_list(binding,SEMI)) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET option(sep_or_term_list(binding,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 311, spurious reduction of production binding -> expr ARROW expr
## In state 312, spurious reduction of production nsepseq(binding,SEMI) -> binding
## In state 308, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI)
## In state 536, spurious reduction of production option(sep_or_term_list(binding,SEMI)) -> sep_or_term_list(binding,SEMI)
##

Ill-formed map expression.
At this point, if the key/value binding is complete, one of the
following is expected:
  * a semicolon ';' followed by another key/value binding;
  * a closing bracket ']' if the map is complete.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Map LBRACKET With
##
## Ends in an error in state: 600.
##
## injection(Map,binding) -> Map LBRACKET . option(sep_or_term_list(binding,SEMI)) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET
##

Ill-formed map expression.
At this point, one of the following is expected:
  * key/value bindings separated by semicolons ';';
  * a closing bracket ']' if the map is empty.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Map Verbatim ARROW With
##
## Ends in an error in state: 310.
##
## binding -> expr ARROW . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr ARROW
##

Ill-formed key/value binding in a map.
At this point, the value is expected as an expression.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Map Verbatim With
##
## Ends in an error in state: 309.
##
## binding -> expr . ARROW expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##

Ill-formed key/value binding in a map.
At this point, if the key is complete, an arrow '->' is expected,
followed by an expression denoting the value associated to the key.

interactive_expr: Map With
##
## Ends in an error in state: 130.
##
## injection(Map,binding) -> Map . option(sep_or_term_list(binding,SEMI)) End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## injection(Map,binding) -> Map . LBRACKET option(sep_or_term_list(binding,SEMI)) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Map
##

Ill-formed map expression.
At this point, one of the following is expected:
  * the brackets '[]' or the keyword 'end' if the map is empty;
  * key/value bindings separated by semicolons ';';
  * as the previous case, but enclosed between brackets '[' and ']'.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Not With
##
## Ends in an error in state: 126.
##
## unary_expr -> Not . core_expr [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Not
##

Ill-formed unary expression.
At this point, an expression is expected.

interactive_expr: Ident With Record Ident EQ With
##
## Ends in an error in state: 201.
##
## field_path_assignment -> path EQ . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## path EQ
##
interactive_expr: Record Ident EQ With
##
## Ends in an error in state: 125.
##
## field_assignment -> Ident EQ . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

Ill-formed record field assignment.
At this point, an expression is expected, whose value is that of the
field.

interactive_expr: Record Ident With
##
## Ends in an error in state: 124.
##
## field_assignment -> Ident . EQ expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record field assignment.
At this point, the symbol '=' is expected, followed by an
expression.

interactive_expr: Record LBRACKET Ident EQ Bytes With
##
## Ends in an error in state: 607.
##
## ne_injection(Record,field_assignment) -> Record LBRACKET sep_or_term_list(field_assignment,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 606, spurious reduction of production field_assignment -> Ident EQ expr
## In state 611, spurious reduction of production nsepseq(field_assignment,SEMI) -> field_assignment
## In state 610, spurious reduction of production sep_or_term_list(field_assignment,SEMI) -> nsepseq(field_assignment,SEMI)
##

Ill-formed record expression.
At this point, if the field assignment is complete, one of the
following is expected:
  * a semicolon ';' followed by another record field assignment;
  * a closing bracket ']' if the record is complete.

interactive_expr: Record LBRACKET With
##
## Ends in an error in state: 123.
##
## ne_injection(Record,field_assignment) -> Record LBRACKET . sep_or_term_list(field_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

Ill-formed record expression.
At this point, field assignments separated by semicolons ';' are
expected.

interactive_expr: Set LBRACKET Verbatim With
##
## Ends in an error in state: 618.
##
## injection(Set,expr) -> Set LBRACKET option(sep_or_term_list(expr,SEMI)) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET option(sep_or_term_list(expr,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 297, spurious reduction of production nsepseq(expr,SEMI) -> expr
## In state 296, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI)
## In state 594, spurious reduction of production option(sep_or_term_list(expr,SEMI)) -> sep_or_term_list(expr,SEMI)
##

Ill-formed set expression.
At this point, one of the following is expected:
  * a semicolon ';' followed by another set element as an expression;
  * a closing bracket ']' if the set is complete.

interactive_expr: Set LBRACKET With
##
## Ends in an error in state: 617.
##
## injection(Set,expr) -> Set LBRACKET . option(sep_or_term_list(expr,SEMI)) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET
##

Ill-formed set expression.
At this point, set elements separated by semicolons ';' are expected.

interactive_expr: Set Verbatim With
##
## Ends in an error in state: 620.
##
## injection(Set,expr) -> Set option(sep_or_term_list(expr,SEMI)) . End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Set option(sep_or_term_list(expr,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
## In state 297, spurious reduction of production nsepseq(expr,SEMI) -> expr
## In state 296, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI)
## In state 594, spurious reduction of production option(sep_or_term_list(expr,SEMI)) -> sep_or_term_list(expr,SEMI)
##

Ill-formed set expression.
At this point, if the set element is complete, one of the following is
expected:
  * a semicolon ';' followed by another element as an expression;
  * the keyword 'end' if the set is complete.

interactive_expr: Set With
##
## Ends in an error in state: 121.
##
## injection(Set,expr) -> Set . option(sep_or_term_list(expr,SEMI)) End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## injection(Set,expr) -> Set . LBRACKET option(sep_or_term_list(expr,SEMI)) RBRACKET [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Set
##

Ill-formed set expression.
At this point, one of the following is expected:
  * the brackets '[]' or the keyword 'end' if the set is empty;
  * set elements (expressions) separated by semicolons ';';
  * as the previous case, but enclosed between brackets '[' and ']'.

interactive_expr: Verbatim CARET With
##
## Ends in an error in state: 236.
##
## cat_expr -> cons_expr CARET . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## cons_expr CARET
##

Ill-formed string expression.
At this point, an expression is expected.

interactive_expr: Verbatim SHARP With
##
## Ends in an error in state: 239.
##
## cons_expr -> add_expr SHARP . cons_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr SHARP
##

Ill-formed list expression.
At this point, an expression denoting a list is expected.

interactive_expr: Verbatim Contains With
##
## Ends in an error in state: 233.
##
## set_membership -> core_expr Contains . set_membership [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Module LBRACE Function From End Else EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## core_expr Contains
##

Ill-formed membership test in a set.
At this point, an expression denoting a set element is expected.

interactive_expr: Verbatim And With
##
## Ends in an error in state: 260.
##
## conj_expr -> conj_expr And . set_membership [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Module LBRACE Function From End Else EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## conj_expr And
##
interactive_expr: Verbatim Or With
##
## Ends in an error in state: 231.
##
## disj_expr -> disj_expr Or . conj_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Module LBRACE Function From End Else EOF Const COMMA COLON Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## disj_expr Or
##

Ill-formed Boolean expression.
At this point, a Boolean expression is expected.

interactive_expr: Verbatim EQ With
##
## Ends in an error in state: 256.
##
## comp_expr -> comp_expr EQ . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr EQ
##
interactive_expr: Verbatim NE With
##
## Ends in an error in state: 246.
##
## comp_expr -> comp_expr NE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr NE
##
interactive_expr: Verbatim GE With
##
## Ends in an error in state: 254.
##
## comp_expr -> comp_expr GE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr GE
##
interactive_expr: Verbatim GT With
##
## Ends in an error in state: 252.
##
## comp_expr -> comp_expr GT . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr GT
##
interactive_expr: Verbatim LE With
##
## Ends in an error in state: 250.
##
## comp_expr -> comp_expr LE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr LE
##
interactive_expr: Verbatim LT With
##
## Ends in an error in state: 248.
##
## comp_expr -> comp_expr LT . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr LT
##

Ill-formed Boolean expression.
At this point, an expression is expected.

interactive_expr: Verbatim MINUS With
##
## Ends in an error in state: 243.
##
## add_expr -> add_expr MINUS . mult_expr [ VBAR Type To Then Step SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr MINUS
##
interactive_expr: Verbatim Mod With
##
## Ends in an error in state: 226.
##
## mult_expr -> mult_expr Mod . unary_expr [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr Mod
##
interactive_expr: Verbatim PLUS With
##
## Ends in an error in state: 241.
##
## add_expr -> add_expr PLUS . mult_expr [ VBAR Type To Then Step SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr PLUS
##
interactive_expr: Verbatim SLASH With
##
## Ends in an error in state: 224.
##
## mult_expr -> mult_expr SLASH . unary_expr [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr SLASH
##
interactive_expr: Verbatim TIMES With
##
## Ends in an error in state: 208.
##
## mult_expr -> mult_expr TIMES . unary_expr [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr TIMES
##

Ill-formed arithmetic expression.
At this point, an expression is expected.

interactive_expr: Verbatim With
##
## Ends in an error in state: 634.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production unary_expr -> core_expr
## In state 182, spurious reduction of production mult_expr -> unary_expr
## In state 207, spurious reduction of production add_expr -> mult_expr
## In state 238, spurious reduction of production cons_expr -> add_expr
## In state 235, spurious reduction of production cat_expr -> cons_expr
## In state 258, spurious reduction of production comp_expr -> cat_expr
## In state 245, spurious reduction of production set_membership -> comp_expr
## In state 185, spurious reduction of production conj_expr -> set_membership
## In state 262, spurious reduction of production disj_expr -> conj_expr
## In state 230, spurious reduction of production expr -> disj_expr
##
interactive_expr: With
##
## Ends in an error in state: 632.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

Ill-formed expression.

contract: Const Ident EQ With
##
## Ends in an error in state: 340.
##
## unqualified_decl(EQ) -> Ident EQ . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##
contract: Const Ident COLON UIdent EQ With
##
## Ends in an error in state: 343.
##
## unqualified_decl(EQ) -> Ident type_annot EQ . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Ident type_annot EQ
##

Ill-formed constant declaration.
At this point, an expression is expected, whose value is that of the
constant.

contract: Const Ident With
##
## Ends in an error in state: 339.
##
## unqualified_decl(EQ) -> Ident . EQ expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## unqualified_decl(EQ) -> Ident . type_annot EQ expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed constant declaration.
At this point, one of the following is expected:
  * a type annotation starting with a colon ':';
  * the symbol '=' followed by an expression whose value is that of
    the constant being defined.

contract: Const With
##
## Ends in an error in state: 338.
##
## open_const_decl -> Const . unqualified_decl(EQ) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Const
##
contract: Attr Const With
##
## Ends in an error in state: 377.
##
## open_const_decl -> nseq(Attr) Const . unqualified_decl(EQ) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Const
##

Ill-formed constant declaration.
At this point, the name of the constant is expected.

contract: Function Ident LPAR Const Ident RPAR COLON Ident With
##
## Ends in an error in state: 334.
##
## open_fun_decl -> Function Ident parameters type_annot . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 25, spurious reduction of production core_type -> Ident
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 163, spurious reduction of production type_annot -> COLON type_expr
##
contract: Recursive Function Ident LPAR Const Ident RPAR COLON String With
##
## Ends in an error in state: 626.
##
## open_fun_decl -> Recursive Function Ident parameters type_annot . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 163, spurious reduction of production type_annot -> COLON type_expr
##
contract: Attr Recursive Function Ident LPAR Const Ident RPAR COLON UIdent With
##
## Ends in an error in state: 366.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters type_annot . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 163, spurious reduction of production type_annot -> COLON type_expr
##
contract: Attr Function Ident LPAR Const Ident RPAR COLON UIdent With
##
## Ends in an error in state: 374.
##
## open_fun_decl -> nseq(Attr) Function Ident parameters type_annot . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 163, spurious reduction of production type_annot -> COLON type_expr
##

Ill-formed function declaration.
At this point, the keyword 'is' is expected, followed by the function
body as an expression.

contract: Function Ident LPAR Const Ident RPAR COLON UIdent Is With
##
## Ends in an error in state: 335.
##
## open_fun_decl -> Function Ident parameters type_annot Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters type_annot Is
##
contract: Attr Function Ident LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 372.
##
## open_fun_decl -> nseq(Attr) Function Ident parameters Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident parameters Is
##
contract: Function Ident LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 332.
##
## open_fun_decl -> Function Ident parameters Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters Is
##
contract: Recursive Function Ident LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 114.
##
## open_fun_decl -> Recursive Function Ident parameters Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters Is
##
contract: Attr Recursive Function Ident LPAR Const Ident RPAR COLON UIdent Is With
##
## Ends in an error in state: 367.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters type_annot Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident parameters type_annot Is
##
contract: Attr Function Ident LPAR Const Ident RPAR COLON UIdent Is With
##
## Ends in an error in state: 375.
##
## open_fun_decl -> nseq(Attr) Function Ident parameters type_annot Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident parameters type_annot Is
##
interactive_expr: Function LPAR Const Ident RPAR COLON WILD Is With
##
## Ends in an error in state: 566.
##
## fun_expr -> Function parameters type_annot Is . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module LBRACE Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters type_annot Is
##
contract: Recursive Function Ident LPAR Const Ident RPAR COLON WILD Is With
##
## Ends in an error in state: 627.
##
## open_fun_decl -> Recursive Function Ident parameters type_annot Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters type_annot Is
##
contract: Attr Recursive Function Ident LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 364.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident parameters Is
##

Ill-formed function declaration.
At this point, the function body is expected as an expression.

contract: Function Ident LPAR Const Ident RPAR With
##
## Ends in an error in state: 331.
##
## open_fun_decl -> Function Ident parameters . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Function Ident parameters . type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters
##

Ill-formed function declaration.
At this point, if the parameters are complete, one of the following is
expected:
  * a type annotation starting with a colon ':';
  * the keyword 'is' followed by the function body an expression.

contract: Function Ident With
##
## Ends in an error in state: 330.
##
## open_fun_decl -> Function Ident . parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Function Ident . parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident
##
contract: Recursive Function Ident With
##
## Ends in an error in state: 93.
##
## open_fun_decl -> Recursive Function Ident . parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Recursive Function Ident . parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident
##

Ill-formed function declaration.
At this point, the parameter declarations are expected between
parentheses.

contract: Function With
##
## Ends in an error in state: 329.
##
## open_fun_decl -> Function . Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Function . Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function
##
contract: Recursive Function With
##
## Ends in an error in state: 92.
##
## open_fun_decl -> Recursive Function . Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Recursive Function . Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function
##
contract: Attr Function With
##
## Ends in an error in state: 369.
##
## open_fun_decl -> nseq(Attr) Function . Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Function . Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function
##
contract: Attr Recursive Function With
##
## Ends in an error in state: 361.
##
## open_fun_decl -> nseq(Attr) Recursive Function . Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Recursive Function . Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function
##

Ill-formed function declaration.
At this point, the name of the function is expected.

contract: Recursive Function Ident LPAR Const Ident RPAR With
##
## Ends in an error in state: 113.
##
## open_fun_decl -> Recursive Function Ident parameters . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Recursive Function Ident parameters . type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters
##

Ill-formed function declaration.
At this point, if the paramters are complete, one of the following is
expected:
  * a type annotation for the result, starting with a colon ':';
  * the keyword 'is' followed by the function body as an expression.

contract: Recursive With
##
## Ends in an error in state: 91.
##
## open_fun_decl -> Recursive . Function Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Recursive . Function Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive
##
contract: Attr Recursive With
##
## Ends in an error in state: 360.
##
## open_fun_decl -> nseq(Attr) Recursive . Function Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Recursive . Function Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive
##

Ill-formed function declaration.
At this point, the keyword 'function' is expected, followed by the name
of the function.

contract: Type Ident Is BigMap With
##
## Ends in an error in state: 28.
##
## core_type -> BigMap . type_tuple [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap
##

Ill-formed big_map type.
At this point, a pair of types is expected: the type of the keys and
the type of the values.

contract: Type Ident Is Map With
##
## Ends in an error in state: 20.
##
## core_type -> Map . type_tuple [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## Map
##

Ill-formed map type.
At this point, a pair of types is expected: the type of the keys and
the type of the values.

contract: Type Ident Is UIdent DOT With
##
## Ends in an error in state: 9.
##
## module_path(type_name) -> UIdent DOT . module_path(type_name) [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
## module_path(type_name) -> UIdent DOT . Ident [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

Ill-formed selection of a type in a module.
At this point, the qualified name of a type is expected.

contract: Type Ident Is UIdent Of With
##
## Ends in an error in state: 7.
##
## variant -> UIdent Of . fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## UIdent Of
##
contract: Type Ident Is Attr UIdent Of With
##
## Ends in an error in state: 36.
##
## variant -> nseq(Attr) UIdent Of . fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) UIdent Of
##

Ill-formed variant definition.
At this point, a type that is neither a record or a sum type is
expected as the parameter of the constructor.

contract: Type Ident Is UIdent VBAR With
##
## Ends in an error in state: 33.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##
contract: Type Ident Is VBAR With
##
## Ends in an error in state: 5.
##
## sum_type -> VBAR . nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed variant type.
At this point, a variant is expected, starting with a data constructor.

contract: Type Ident Is WILD TIMES UIdent With
##
## Ends in an error in state: 8.
##
## module_path(type_name) -> UIdent . DOT module_path(type_name) [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
## module_path(type_name) -> UIdent . DOT Ident [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

Ill-formed selection of a type in a module.
At this point, the selection operator '.' is expected, followed by the
qualified name of a type.

contract: Type Ident Is With
##
## Ends in an error in state: 3.
##
## open_type_decl -> Type Ident Is . type_expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident Is
##

Ill-formed type declaration.
At this point, a type expression is expected.

contract: Type Ident Is LPAR With
##
## Ends in an error in state: 14.
##
## par(type_expr) -> LPAR . type_expr RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

At this point, a type expression is expected, follwed by a closing
parenthesis ')'.

contract: Type Ident Is LPAR String With
##
## Ends in an error in state: 85.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
##

Ill-formed parenthesised type expression.
At this point, if the type expression is complete, a closing
parenthesis ')' is expected.

contract: Type Ident Is List With
##
## Ends in an error in state: 22.
##
## core_type -> List . par(type_expr) [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

Ill-formed list type.
At this point, a parenthesised type is expected, which is the type of
the list elements.

contract: Type Ident Is Map LPAR String With
##
## Ends in an error in state: 77.
##
## par(nsepseq(type_expr,COMMA)) -> LPAR nsepseq(type_expr,COMMA) . RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(type_expr,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 51, spurious reduction of production nsepseq(type_expr,COMMA) -> type_expr
##

Ill-formed tuple of types.
At this point, if the type expression is complete, one of the
following is expected:
  * a comma ',' followed by another type expression (component);
  * a closing parenthesis ')' if the type tuple is complete.

contract: Type Ident Is Record Ident COLON Ident With
##
## Ends in an error in state: 83.
##
## record_type -> Record sep_or_term_list(field_decl,SEMI) . End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 25, spurious reduction of production core_type -> Ident
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 80, spurious reduction of production field_decl -> Ident COLON type_expr
## In state 70, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl
## In state 69, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI)
##
contract: Type Ident Is Attr Record Ident COLON UIdent With
##
## Ends in an error in state: 74.
##
## record_type -> nseq(Attr) Record sep_or_term_list(field_decl,SEMI) . End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Record sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 80, spurious reduction of production field_decl -> Ident COLON type_expr
## In state 70, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl
## In state 69, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI)
##

Ill-formed record type.
At this point, if the field declaration is complete, one of the
following is expected:
  * a semicolon ';' followed by another field;
  * the keyword 'end' if the record is complete.

contract: Type Ident Is Record Ident With
##
## Ends in an error in state: 18.
##
## field_decl -> Ident . COLON type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record field declaration.
At this point, a colon ':' is expected, followed by a type
expression for the field.

contract: Type Ident Is Record Ident COLON With
##
## Ends in an error in state: 19.
##
## field_decl -> Ident COLON . type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

Ill-formed record field declaration.
At this point the type of the field is expected.

contract: Type Ident Is Record LBRACKET Ident COLON Ident With
##
## Ends in an error in state: 81.
##
## record_type -> Record LBRACKET sep_or_term_list(field_decl,SEMI) . RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 25, spurious reduction of production core_type -> Ident
## In state 41, spurious reduction of production cartesian -> core_type
## In state 47, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 80, spurious reduction of production field_decl -> Ident COLON type_expr
## In state 70, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl
## In state 69, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI)
##

Ill-formed record type.
At this point, if the field declaration is complete, one of the
following is expected:
  * a semicolon ';' followed by another field;
  * a closing bracket ']' if the record type is complete.

contract: Type Ident Is Record LBRACKET With
##
## Ends in an error in state: 17.
##
## record_type -> Record LBRACKET . sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

Ill-formed record type.
At this point, field declarations are expected, separated by
semicolons ';'.

contract: Type Ident Is Set With
##
## Ends in an error in state: 13.
##
## core_type -> Set . par(type_expr) [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## Set
##

Ill-formed set type.
At this point, the type of the set elements is expected between
parentheses.

contract: Type Ident Is String ARROW With
##
## Ends in an error in state: 48.
##
## fun_type -> cartesian ARROW . fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## cartesian ARROW
##

Ill-formed function type.
At this point, the type of the function calls is expected.

contract: Type Ident Is String TIMES String TIMES With
##
## Ends in an error in state: 45.
##
## nsepseq(core_type,TIMES) -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##
contract: Type Ident Is String TIMES With
##
## Ends in an error in state: 42.
##
## cartesian -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##

Ill-formed product of types.
At this point, a type expression is expected.

contract: Type Ident With
##
## Ends in an error in state: 2.
##
## open_type_decl -> Type Ident . Is type_expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

Ill-formed type declaration.
At this point, the keyword 'is' is expected, followed by a type
expression.

contract: Type With
##
## Ends in an error in state: 1.
##
## open_type_decl -> Type . Ident Is type_expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

Ill-formed type declaration.
At this point, the name of the type is expected.

contract: Type Ident Is VBAR Attr With
##
## Ends in an error in state: 34.
##
## variant -> nseq(Attr) . UIdent [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
## variant -> nseq(Attr) . UIdent Of fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed variant.
At this point, one of the following is expected:
  * the data constructor of the variant;
  * another attribute for the variant.

contract: Const Ident COLON UIdent With
##
## Ends in an error in state: 342.
##
## unqualified_decl(EQ) -> Ident type_annot . EQ expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Ident type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 163, spurious reduction of production type_annot -> COLON type_expr
##

Ill-formed constant declaration.
At this point, if the type annotation is complete, the keyword '=' is
expected, followed by an expression.

interactive_expr: Map Verbatim ARROW Bytes SEMI With
##
## Ends in an error in state: 603.
##
## injection(Map,binding) -> Map option(sep_or_term_list(binding,SEMI)) . End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Map option(sep_or_term_list(binding,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 313, spurious reduction of production nseq(__anonymous_0(binding,SEMI)) -> binding SEMI
## In state 307, spurious reduction of production sep_or_term_list(binding,SEMI) -> nseq(__anonymous_0(binding,SEMI))
## In state 536, spurious reduction of production option(sep_or_term_list(binding,SEMI)) -> sep_or_term_list(binding,SEMI)
##

Ill-formed map expression.
At this point, if the key/value binding is complete, one of the
following is expected:
  * a semicolon ';' followed by another key/value binding;
  * the keyword 'end' if the map is complete.
Note: A binding is made of two expressions (a key and a value)
separated by an arrow '->'.

interactive_expr: Case Verbatim Of List WILD SEMI With
##
## Ends in an error in state: 477.
##
## injection(List,core_pattern) -> List option(sep_or_term_list(core_pattern,SEMI)) . End [ SHARP SEMI RPAR RBRACKET End COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List option(sep_or_term_list(core_pattern,SEMI))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 474, spurious reduction of production nseq(__anonymous_0(core_pattern,SEMI)) -> core_pattern SEMI
## In state 471, spurious reduction of production sep_or_term_list(core_pattern,SEMI) -> nseq(__anonymous_0(core_pattern,SEMI))
## In state 468, spurious reduction of production option(sep_or_term_list(core_pattern,SEMI)) -> sep_or_term_list(core_pattern,SEMI)
##

Ill-formed list of patterns.
At this point, if pattern matching a list element is complete, one of
the following is expected:
  * a semicolon ';' followed by another pattern;
  * the keyword 'end' if the list is complete.

interactive_expr: Record Ident EQ Bytes SEMI With
##
## Ends in an error in state: 615.
##
## ne_injection(Record,field_assignment) -> Record sep_or_term_list(field_assignment,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 612, spurious reduction of production nseq(__anonymous_0(field_assignment,SEMI)) -> field_assignment SEMI
## In state 609, spurious reduction of production sep_or_term_list(field_assignment,SEMI) -> nseq(__anonymous_0(field_assignment,SEMI))
##

Ill-formed record expression.
At this point, if the field assignment is complete, one of the
following is expected:
  * a semicolon ';' followed by another record field assignment;
  * a keyword 'end' if the record is complete.

contract: With
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

Ill-formed contract.

contract: Type Ident Is Record With
##
## Ends in an error in state: 16.
##
## record_type -> Record . sep_or_term_list(field_decl,SEMI) End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
## record_type -> Record . LBRACKET sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## Record
##
contract: Type Ident Is Attr Record With
##
## Ends in an error in state: 58.
##
## record_type -> nseq(Attr) Record . sep_or_term_list(field_decl,SEMI) End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
## record_type -> nseq(Attr) Record . LBRACKET sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Record
##

Ill-formed record type declaration.
At this point, one of the following is expected:
  * field declarations are expected, separated by semicolons ';';
  * an opening bracket '[' followed by field declarations.
Note: A field declaration is made of a field name followed by a type
annotation.

contract: Type Ident Is Map LPAR With
##
## Ends in an error in state: 21.
##
## par(nsepseq(type_expr,COMMA)) -> LPAR . nsepseq(type_expr,COMMA) RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed type parameter.
At this point, components as type expressions are expected, separated
by commas ',' and concluded with a closing parenthesis ')'.

contract: Type Ident Is Map LPAR WILD COMMA With
##
## Ends in an error in state: 52.
##
## nsepseq(type_expr,COMMA) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

Ill-formed type parameter.
At this point, another component is expected as a type expression.

contract: Type Ident Is Attr Recursive
##
## Ends in an error in state: 55.
##
## record_type -> nseq(Attr) . Record sep_or_term_list(field_decl,SEMI) End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
## record_type -> nseq(Attr) . Record LBRACKET sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
## sum_type -> nseq(Attr) . VBAR nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
## variant -> nseq(Attr) . UIdent [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
## variant -> nseq(Attr) . UIdent Of fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed type.
At this point, one of the following is expected:
  * more attributes;
  * a record type declaration starting with the keyword 'record';
  * a variant starting with a constructor.

contract: Type Ident Is Attr VBAR With
##
## Ends in an error in state: 56.
##
## sum_type -> nseq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) VBAR
##

Ill-formed sum type.
At this point, one of the following is expected:
  * attributes of the variant;
  * the constructor name of the variant.

contract: Type Ident Is Record Attr VBAR
##
## Ends in an error in state: 63.
##
## field_decl -> nseq(Attr) . Ident COLON type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed record type declaration.
At this point, the following is expected:
  * attributes of the field;
  * the name of the field.

contract: Type Ident Is Record Attr Ident With
##
## Ends in an error in state: 64.
##
## field_decl -> nseq(Attr) Ident . COLON type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident
##

Ill-formed record type declaration.
At this point, a type annotation for the field is expected, starting
with a colon ':'.

contract: Type Ident Is Record Attr Ident COLON With
##
## Ends in an error in state: 65.
##
## field_decl -> nseq(Attr) Ident COLON . type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident COLON
##

Ill-formed record type declaration.
At this point, the type of the field is expected.

contract: Const Ident COLON With
##
## Ends in an error in state: 162.
##
## type_annot -> COLON . type_expr [ RPAR Is EQ ASSIGN ]
##
## The known suffix of the stack is as follows:
## COLON
##

Ill-formed type annotation.
At this point, the type expression is expected.

contract: Type Ident Is Attr Record LBRACKET With
##
## Ends in an error in state: 59.
##
## record_type -> nseq(Attr) Record LBRACKET . sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Record LBRACKET
##

Ill-formed record type declaration.
At this point, field declarations are expected, separated by semicolons ';'.
Note: A field declaration is made of a field name followed by a type
annotation.

interactive_expr: Block LBRACE With
##
## Ends in an error in state: 159.
##
## block -> Block LBRACE . sep_or_term_list(statement,SEMI) RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block LBRACE
##
interactive_expr: Begin With
##
## Ends in an error in state: 167.
##
## block -> Begin . sep_or_term_list(statement,SEMI) End [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Begin
##
interactive_expr: Begin If Verbatim Then LBRACE With
##
## Ends in an error in state: 135.
##
## block -> LBRACE . sep_or_term_list(statement,SEMI) RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed block.
At this point, a statements are expected, separated by semicolon ';'.
Note: A statement is either an instruction of a declaration.

contract: Attr VBAR
##
## Ends in an error in state: 359.
##
## open_const_decl -> nseq(Attr) . Const unqualified_decl(EQ) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) . Function Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) . Function Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) . Recursive Function Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) . Recursive Function Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed declaration.
At this point, one of the following is expected:
  * more attributes;
  * the keyword 'const' if defining a constant;
  * the keyword 'function' if defining a function;
  * the keywords 'recursive function' if defining a recursive
    function.

contract: Attr Recursive Function Ident With
##
## Ends in an error in state: 362.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident . parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Recursive Function Ident . parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident
##
contract: Attr Function Ident With
##
## Ends in an error in state: 370.
##
## open_fun_decl -> nseq(Attr) Function Ident . parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Function Ident . parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident
##

Ill-formed function declaration.
At this point, the parameters are expected, between parentheses and
separated by semicolons ';'.

contract: Attr Recursive Function Ident LPAR Const Ident RPAR With
##
## Ends in an error in state: 363.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters . type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident parameters
##

Ill-formed function declaration.
At this point, one of the following is expected:
  * the keyword 'is' followed by an expression whose value is returned;
  * a type annotation for the return value, starting with a colon ':'.

contract: Type Ident Is Attr Record LBRACKET Ident COLON UIdent With
##
## Ends in an error in state: 60.
##
## record_type -> nseq(Attr) Record LBRACKET sep_or_term_list(field_decl,SEMI) . RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASSIGN ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Record LBRACKET sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 80, spurious reduction of production field_decl -> Ident COLON type_expr
## In state 70, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl
## In state 69, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI)
##

Ill-formed record type.
At this point, if the field declaration is complete, one of the
following is expected:
  * a semicolon ';' followed by another field;
  * a closing bracket ']' if the record is complete.

contract: Type Ident Is UIdent With
##
## Ends in an error in state: 629.
##
## contract -> declarations . EOF [ # ]
##
## The known suffix of the stack is as follows:
## declarations
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 90, spurious reduction of production open_type_decl -> Type Ident Is type_expr
## In state 347, spurious reduction of production option(SEMI) ->
## In state 349, spurious reduction of production type_decl -> open_type_decl option(SEMI)
## In state 346, spurious reduction of production declaration -> type_decl
## In state 384, spurious reduction of production nseq(declaration) -> declaration
## In state 358, spurious reduction of production declarations -> nseq(declaration)
##

Ill-formed contract.
At this point, one the following is expected:
  * another declaration;
  * the end of the file.

interactive_expr: Begin Var Ident COLON WILD ASSIGN With
##
## Ends in an error in state: 543.
##
## unqualified_decl(ASSIGN) -> Ident type_annot ASSIGN . expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident type_annot ASSIGN
##

Ill-formed variable declaration.
At this point, the initial value of the variable is expected as an
expression.

contract: Module UIdent Is Begin Type Ident Is UIdent RBRACE
##
## Ends in an error in state: 382.
##
## open_module_decl -> Module UIdent Is Begin declarations . End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent Is Begin declarations
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 90, spurious reduction of production open_type_decl -> Type Ident Is type_expr
## In state 347, spurious reduction of production option(SEMI) ->
## In state 349, spurious reduction of production type_decl -> open_type_decl option(SEMI)
## In state 346, spurious reduction of production declaration -> type_decl
## In state 384, spurious reduction of production nseq(declaration) -> declaration
## In state 358, spurious reduction of production declarations -> nseq(declaration)
##

Ill-formed module declaration.
At this point, if the module declarations are complete, the keyword
'end' is expected.

contract: Module UIdent Is Begin With
##
## Ends in an error in state: 328.
##
## open_module_decl -> Module UIdent Is Begin . declarations End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent Is Begin
##
contract: Module UIdent Is LBRACE With
##
## Ends in an error in state: 388.
##
## open_module_decl -> Module UIdent Is option(Block) LBRACE . declarations RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent Is option(Block) LBRACE
##

Ill-formed module declaration.
At this point, one of the following is expected:
  * a type declaration starting with the keyword 'type';
  * a value declaration starting with the keyword 'const' or 'var';
  * a (sub)module declaration starting with the keyword 'module'.

contract: Module UIdent Is LBRACE Type Ident Is UIdent End
##
## Ends in an error in state: 389.
##
## open_module_decl -> Module UIdent Is option(Block) LBRACE declarations . RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent Is option(Block) LBRACE declarations
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production variant -> UIdent
## In state 32, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 53, spurious reduction of production type_expr -> sum_type
## In state 90, spurious reduction of production open_type_decl -> Type Ident Is type_expr
## In state 347, spurious reduction of production option(SEMI) ->
## In state 349, spurious reduction of production type_decl -> open_type_decl option(SEMI)
## In state 346, spurious reduction of production declaration -> type_decl
## In state 384, spurious reduction of production nseq(declaration) -> declaration
## In state 358, spurious reduction of production declarations -> nseq(declaration)
##

Ill-formed module declaration.
At this point, if the module declarations are complete, a closing
brace '}' is expected to end the module declaration.

contract: Module UIdent Is With
##
## Ends in an error in state: 323.
##
## open_module_alias -> Module UIdent Is . nsepseq(module_name,DOT) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module UIdent Is . option(Block) LBRACE declarations RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module UIdent Is . Begin declarations End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent Is
##

Ill-formed module declaration.
At this point, one of the following is expected:
  * the qualified name of a module being renamed;
  * a module structure, either starting with an opening brace '{' or
    the keyword 'begin'.

contract: Module UIdent With
##
## Ends in an error in state: 322.
##
## open_module_alias -> Module UIdent . Is nsepseq(module_name,DOT) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module UIdent . Is option(Block) LBRACE declarations RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module UIdent . Is Begin declarations End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent
##

Ill-formed module declaration.
At this point, the keyword 'is' is expected to introduce either the
qualified name of a module being renamed, or a module structure.

contract: Module With
##
## Ends in an error in state: 321.
##
## open_module_alias -> Module . UIdent Is nsepseq(module_name,DOT) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module . UIdent Is option(Block) LBRACE declarations RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module . UIdent Is Begin declarations End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module
##

Ill-formed module declaration.
At this point, the name of the module being declared or renamed is
expected.

contract: Module UIdent Is UIdent DOT With
##
## Ends in an error in state: 325.
##
## nsepseq(module_name,DOT) -> UIdent DOT . nsepseq(module_name,DOT) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

Ill-formed module qualification.
At this point, a qualified module name is expected.

interactive_expr: Function LPAR Var WILD With
##
## Ends in an error in state: 96.
##
## param_decl -> Var WILD . option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Var WILD
##
interactive_expr: Function LPAR Const WILD With
##
## Ends in an error in state: 104.
##
## param_decl -> Const WILD . option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Const WILD
##

Ill-formed function parameter declaration.
At this point, one of the following is expected:
  * a type annotation starting with a colon ':';
  * a semicolon ';' followed with another parameter declaration;
  * a closing parenthesis ')' if no more parameters.

interactive_expr: UIdent DOT Ident With
##
## Ends in an error in state: 173.
##
## projection -> Ident . DOT nsepseq(selection,DOT) [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
## selected_expr -> Ident . [ VBAR Type To Then TIMES Step SLASH SHARP SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACE GT GE Function From End Else EQ EOF Contains Const COMMA COLON CARET Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed selection in a tuple or record.
At this point, the selection operator '.' is expected.

contract: Module UIdent Is Block With
##
## Ends in an error in state: 387.
##
## open_module_decl -> Module UIdent Is option(Block) . LBRACE declarations RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent Is option(Block)
##

Ill-formed local module declaration.
At this point, an opening brace '{' is expected, followed by
declarations.

interactive_expr: Case Verbatim Of LPAR WILD COMMA WILD COMMA With
##
## Ends in an error in state: 458.
##
## nsepseq(pattern,COMMA) -> pattern COMMA . nsepseq(pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

Ill-formed tuple of pattern.
At this point, another pattern is expected.

interactive_expr: Case Verbatim Of UIdent LPAR WILD With
##
## Ends in an error in state: 479.
##
## tuple(pattern) -> pattern . COMMA nsepseq(pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production pattern -> core_pattern
##

Ill-formed tuple of patterns.
At this point, if the pattern is complete, a comma ',' is expected.
