interactive_expr: C_Some WILD
##
## Ends in an error in state: 251.
##
## constr_expr -> C_Some . core_expr [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## C_Some
##

Ill-formed application to the predefined data constructor 'Some'.
At this point, its argument is expected as an expression.

interactive_expr: Constr DOT WILD
##
## Ends in an error in state: 206.
##
## module_access_e -> Constr DOT . module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed selection of an expression in a module.
At this point, one of the following is expected:
   * the name of an expression defined in the module,
   * a selection in a record expression defined in the module.

interactive_expr: ES6FUN Ident COLON WILD WILD
##
## Ends in an error in state: 347.
##
## fun_expr(expr) -> ES6FUN Ident COLON type_expr . ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident COLON type_expr
##

Ill-formed function expression.
At this point, if the parameters are complete, an arrow '=>' is
expected, followed by the function body as an expression.

interactive_expr: ES6FUN Ident WILD
##
## Ends in an error in state: 345.
##
## fun_expr(expr) -> ES6FUN Ident . COLON type_expr ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN Ident . ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Verbatim
##
## Ends in an error in state: 241.
##
## fun_expr(expr) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD COLON Constr WILD
##
## Ends in an error in state: 244.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
## In state 243, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 342, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD COMMA Verbatim
##
## Ends in an error in state: 343.
##
## nsepseq(fun_arg,COMMA) -> fun_arg COMMA . nsepseq(fun_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_arg COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD RPAR COLON Constr WILD
##
## Ends in an error in state: 246.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 245.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD WILD
##
## Ends in an error in state: 242.
##
## fun_arg -> sub_irrefutable . option(type_annotation) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN WILD
##
## Ends in an error in state: 240.
##
## fun_expr(expr) -> ES6FUN . Ident COLON type_expr ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . Ident ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT WILD
##
## Ends in an error in state: 199.
##
## selection -> DOT . Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> DOT . Ident [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int WILD
##
## Ends in an error in state: 197.
##
## selection -> LBRACKET Int . RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET Int . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET WILD
##
## Ends in an error in state: 196.
##
## selection -> LBRACKET . Int RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET . Int RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE Verbatim WILD
##
## Ends in an error in state: 352.
##
## parenthesized_expr -> LBRACE expr . RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE ES6FUN Ident COLON WILD WILD
##
## Ends in an error in state: 394.
##
## fun_expr(closed_if) -> ES6FUN Ident COLON type_expr . ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE ES6FUN Ident WILD
##
## Ends in an error in state: 392.
##
## fun_expr(closed_if) -> ES6FUN Ident . COLON type_expr ARROW closed_if [ SEMI RBRACE ]
## fun_expr(closed_if) -> ES6FUN Ident . ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE ES6FUN LPAR Verbatim
##
## Ends in an error in state: 366.
##
## fun_expr(closed_if) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE ES6FUN LPAR WILD COLON Constr WILD
##
## Ends in an error in state: 367.
##
## fun_expr(closed_if) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
## In state 243, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 342, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE ES6FUN LPAR WILD RPAR COLON Constr WILD
##
## Ends in an error in state: 369.
##
## fun_expr(closed_if) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 368.
##
## fun_expr(closed_if) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE ES6FUN WILD
##
## Ends in an error in state: 365.
##
## fun_expr(closed_if) -> ES6FUN . Ident COLON type_expr ARROW closed_if [ SEMI RBRACE ]
## fun_expr(closed_if) -> ES6FUN . Ident ARROW closed_if [ SEMI RBRACE ]
## fun_expr(closed_if) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Let Rec Verbatim
##
## Ends in an error in state: 376.
##
## let_expr(closed_if) -> seq(Attr) Let Rec . let_binding SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Let Rec WILD EQ Bytes WILD
##
## Ends in an error in state: 377.
##
## let_expr(closed_if) -> seq(Attr) Let Rec let_binding . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Let Verbatim
##
## Ends in an error in state: 375.
##
## let_expr(closed_if) -> seq(Attr) Let . let_binding SEMI closed_if [ SEMI RBRACE ]
## let_expr(closed_if) -> seq(Attr) Let . Rec let_binding SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Let WILD EQ Bytes WILD
##
## Ends in an error in state: 387.
##
## let_expr(closed_if) -> seq(Attr) Let let_binding . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR VBAR
##
## Ends in an error in state: 359.
##
## case_clause(base_if_then_else_opt_semi) -> VBAR . pattern ARROW base_if_then_else_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Bytes RBRACE WILD
##
## Ends in an error in state: 451.
##
## if_then(expr) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Bytes SEMI WILD
##
## Ends in an error in state: 447.
##
## nseq(case_clause(base_if_then_else_opt_semi)) -> case_clause(base_if_then_else_opt_semi) . seq(case_clause(base_if_then_else_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_if_then_else_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Bytes VBAR Bytes ARROW Bytes SEMI WILD
##
## Ends in an error in state: 449.
##
## seq(case_clause(base_if_then_else_opt_semi)) -> case_clause(base_if_then_else_opt_semi) . seq(case_clause(base_if_then_else_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_if_then_else_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN Ident COLON WILD WILD
##
## Ends in an error in state: 432.
##
## fun_expr(base_if_then_else) -> ES6FUN Ident COLON type_expr . ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN Ident WILD
##
## Ends in an error in state: 430.
##
## fun_expr(base_if_then_else) -> ES6FUN Ident . COLON type_expr ARROW base_if_then_else [ VBAR SEMI RBRACE ]
## fun_expr(base_if_then_else) -> ES6FUN Ident . ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN LPAR Verbatim
##
## Ends in an error in state: 405.
##
## fun_expr(base_if_then_else) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN LPAR WILD COLON Constr WILD
##
## Ends in an error in state: 406.
##
## fun_expr(base_if_then_else) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
## In state 243, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 342, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN LPAR WILD RPAR COLON Constr WILD
##
## Ends in an error in state: 408.
##
## fun_expr(base_if_then_else) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 407.
##
## fun_expr(base_if_then_else) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN WILD
##
## Ends in an error in state: 404.
##
## fun_expr(base_if_then_else) -> ES6FUN . Ident COLON type_expr ARROW base_if_then_else [ VBAR SEMI RBRACE ]
## fun_expr(base_if_then_else) -> ES6FUN . Ident ARROW base_if_then_else [ VBAR SEMI RBRACE ]
## fun_expr(base_if_then_else) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Bytes RBRACE Else LBRACE Bytes RBRACE WILD
##
## Ends in an error in state: 441.
##
## base_if_then_else_opt_semi -> base_if_then_else . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## base_if_then_else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Switch Bytes LBRACE VBAR WILD ARROW Bytes RBRACE WILD
##
## Ends in an error in state: 399.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else LBRACE Verbatim SEMI PLUS
##
## Ends in an error in state: 438.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else LBRACE Verbatim VBAR
##
## Ends in an error in state: 437.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 421, spurious reduction of production base_expr(base_if_then_else) -> disj_expr_level
## In state 424, spurious reduction of production base_if_then_else__open(base_if_then_else) -> base_expr(base_if_then_else)
## In state 422, spurious reduction of production base_if_then_else -> base_if_then_else__open(base_if_then_else)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else WILD
##
## Ends in an error in state: 402.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim RBRACE WILD
##
## Ends in an error in state: 401.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim SEMI PLUS
##
## Ends in an error in state: 400.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR WILD
##
## Ends in an error in state: 363.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW If WILD
##
## Ends in an error in state: 362.
##
## if_then_else(base_if_then_else) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Let Rec Verbatim
##
## Ends in an error in state: 414.
##
## let_expr(base_if_then_else) -> seq(Attr) Let Rec . let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Let Rec WILD EQ Bytes WILD
##
## Ends in an error in state: 415.
##
## let_expr(base_if_then_else) -> seq(Attr) Let Rec let_binding . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Let Verbatim
##
## Ends in an error in state: 413.
##
## let_expr(base_if_then_else) -> seq(Attr) Let . let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
## let_expr(base_if_then_else) -> seq(Attr) Let . Rec let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Let WILD EQ Bytes WILD
##
## Ends in an error in state: 425.
##
## let_expr(base_if_then_else) -> seq(Attr) Let let_binding . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Type Ident EQ Constr WILD
##
## Ends in an error in state: 410.
##
## local_type_decl(base_if_then_else) -> type_decl . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Verbatim WILD
##
## Ends in an error in state: 421.
##
## base_expr(base_if_then_else) -> disj_expr_level . [ VBAR SEMI RBRACE ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ VBAR SEMI RBRACE Or BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ VBAR SEMI RBRACE Or BOOL_OR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW WILD
##
## Ends in an error in state: 412.
##
## let_expr(base_if_then_else) -> seq(Attr) . Let let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
## let_expr(base_if_then_else) -> seq(Attr) . Let Rec let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 361, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD COMMA Bytes RPAR
##
## Ends in an error in state: 360.
##
## case_clause(base_if_then_else_opt_semi) -> VBAR pattern . ARROW base_if_then_else_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 141, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 232, spurious reduction of production pattern -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE WILD
##
## Ends in an error in state: 358.
##
## switch_expr(base_if_then_else_opt_semi) -> Switch core_expr LBRACE . cases(base_if_then_else_opt_semi) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch core_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim WILD
##
## Ends in an error in state: 357.
##
## switch_expr(base_if_then_else_opt_semi) -> Switch core_expr . LBRACE cases(base_if_then_else_opt_semi) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch WILD
##
## Ends in an error in state: 356.
##
## switch_expr(base_if_then_else_opt_semi) -> Switch . core_expr LBRACE cases(base_if_then_else_opt_semi) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Type Ident EQ Constr WILD
##
## Ends in an error in state: 371.
##
## local_type_decl(closed_if) -> type_decl . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else LBRACE Verbatim SEMI PLUS
##
## Ends in an error in state: 457.
##
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr option(SEMI) . RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else LBRACE Verbatim WILD
##
## Ends in an error in state: 456.
##
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr . option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else WILD
##
## Ends in an error in state: 454.
##
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Verbatim SEMI PLUS
##
## Ends in an error in state: 452.
##
## if_then(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Verbatim WILD
##
## Ends in an error in state: 383.
##
## base_expr(closed_if) -> disj_expr_level . [ SEMI RBRACE ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ SEMI RBRACE Or BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ SEMI RBRACE Or BOOL_OR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE WILD
##
## Ends in an error in state: 374.
##
## let_expr(closed_if) -> seq(Attr) . Let let_binding SEMI closed_if [ SEMI RBRACE ]
## let_expr(closed_if) -> seq(Attr) . Let Rec let_binding SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 355, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR WILD
##
## Ends in an error in state: 354.
##
## if_then(expr) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## if_then_else(expr) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Verbatim WILD
##
## Ends in an error in state: 459.
##
## parenthesized_expr -> LPAR expr . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If WILD
##
## Ends in an error in state: 238.
##
## if_then(expr) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## if_then_else(expr) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COLON
##
## Ends in an error in state: 545.
##
## update_record -> LBRACE ELLIPSIS path . COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 543, spurious reduction of production path -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA Ident COLON Bytes COMMA WILD
##
## Ends in an error in state: 559.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA Ident COLON Bytes WILD
##
## Ends in an error in state: 558.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 551, spurious reduction of production field_path_assignment -> path COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA WILD
##
## Ends in an error in state: 555.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes WILD
##
## Ends in an error in state: 554.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 551, spurious reduction of production field_path_assignment -> path COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COMMA
##
## Ends in an error in state: 549.
##
## field_path_assignment -> path . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 543, spurious reduction of production path -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA WILD
##
## Ends in an error in state: 546.
##
## update_record -> LBRACE ELLIPSIS path COMMA . sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident WILD
##
## Ends in an error in state: 543.
##
## path -> Ident . [ COMMA COLON ]
## projection -> Ident . selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS WILD
##
## Ends in an error in state: 542.
##
## update_record -> LBRACE ELLIPSIS . path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW If LBRACE Verbatim RBRACE LBRACE Bytes RBRACE Else LBRACE Bytes RBRACE WILD
##
## Ends in an error in state: 481.
##
## last_expr_opt_semi -> seq_expr . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW Switch Bytes LBRACE VBAR WILD ARROW Bytes RBRACE WILD
##
## Ends in an error in state: 479.
##
## last_expr_opt_semi -> switch_expr(last_expr_opt_semi) . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## switch_expr(last_expr_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident COLON WILD WILD
##
## Ends in an error in state: 511.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN Ident COLON type_expr . ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident WILD
##
## Ends in an error in state: 509.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN Ident . COLON type_expr ARROW last_expr_opt_semi [ VBAR RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN Ident . ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Verbatim
##
## Ends in an error in state: 472.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR WILD COLON Constr WILD
##
## Ends in an error in state: 473.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
## In state 243, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 342, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR WILD RPAR COLON Constr WILD
##
## Ends in an error in state: 475.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 474.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN WILD
##
## Ends in an error in state: 471.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN . Ident COLON type_expr ARROW last_expr_opt_semi [ VBAR RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . Ident ARROW last_expr_opt_semi [ VBAR RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON Bytes WILD
##
## Ends in an error in state: 563.
##
## record_expr -> LBRACE field_assignment . option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 528, spurious reduction of production field_assignment -> Ident COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COLON Bytes WILD
##
## Ends in an error in state: 532.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 528, spurious reduction of production field_assignment -> Ident COLON expr
## In state 539, spurious reduction of production field_assignment_punning -> field_assignment
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COLON Bytes WILD
##
## Ends in an error in state: 536.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 528, spurious reduction of production field_assignment -> Ident COLON expr
## In state 539, spurious reduction of production field_assignment_punning -> field_assignment
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 537.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 533.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident WILD
##
## Ends in an error in state: 526.
##
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## field_assignment_punning -> Ident . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA WILD
##
## Ends in an error in state: 525.
##
## more_field_assignments -> COMMA . sep_or_term_list(field_assignment_punning,COMMA) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LBRACE Verbatim RBRACE LBRACE Bytes RBRACE Else LBRACE Bytes RBRACE WILD
##
## Ends in an error in state: 491.
##
## last_expr -> seq_expr . [ VBAR RBRACE ]
## series -> seq_expr . SEMI option(series) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR Verbatim RPAR LBRACE Switch Bytes LBRACE VBAR WILD ARROW Bytes RBRACE WILD
##
## Ends in an error in state: 463.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR Verbatim RPAR LBRACE Verbatim RBRACE Else LBRACE Switch Bytes LBRACE VBAR WILD ARROW Bytes RBRACE WILD
##
## Ends in an error in state: 468.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR Verbatim RPAR LBRACE Verbatim RBRACE Else LBRACE Verbatim SEMI PLUS
##
## Ends in an error in state: 469.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR Verbatim RPAR LBRACE Verbatim RBRACE Else WILD
##
## Ends in an error in state: 466.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR Verbatim RPAR LBRACE Verbatim RBRACE WILD
##
## Ends in an error in state: 465.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR Verbatim RPAR LBRACE Verbatim SEMI PLUS
##
## Ends in an error in state: 464.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR Verbatim RPAR WILD
##
## Ends in an error in state: 461.
##
## if_then_else(closed_if) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If WILD
##
## Ends in an error in state: 236.
##
## if_then_else(closed_if) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec Verbatim
##
## Ends in an error in state: 485.
##
## let_in_sequence -> seq(Attr) Let Rec . let_binding SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec WILD EQ Bytes WILD
##
## Ends in an error in state: 486.
##
## let_in_sequence -> seq(Attr) Let Rec let_binding . SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Verbatim
##
## Ends in an error in state: 484.
##
## let_in_sequence -> seq(Attr) Let . let_binding SEMI series [ VBAR RBRACE ]
## let_in_sequence -> seq(Attr) Let . Rec let_binding SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let WILD EQ Bytes WILD
##
## Ends in an error in state: 501.
##
## let_in_sequence -> seq(Attr) Let let_binding . SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Verbatim LBRACE VBAR VBAR
##
## Ends in an error in state: 225.
##
## case_clause(last_expr_opt_semi) -> VBAR . pattern ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Bytes RBRACE WILD
##
## Ends in an error in state: 488.
##
## last_expr -> switch_expr(last_expr_opt_semi) . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## switch_expr(last_expr_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Bytes SEMI WILD
##
## Ends in an error in state: 520.
##
## nseq(case_clause(last_expr_opt_semi)) -> case_clause(last_expr_opt_semi) . seq(case_clause(last_expr_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(last_expr_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Bytes VBAR Bytes ARROW Bytes SEMI WILD
##
## Ends in an error in state: 522.
##
## seq(case_clause(last_expr_opt_semi)) -> case_clause(last_expr_opt_semi) . seq(case_clause(last_expr_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(last_expr_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Verbatim LBRACE VBAR WILD COMMA Bytes RPAR
##
## Ends in an error in state: 234.
##
## case_clause(last_expr_opt_semi) -> VBAR pattern . ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 141, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 232, spurious reduction of production pattern -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Verbatim LBRACE WILD
##
## Ends in an error in state: 224.
##
## switch_expr(last_expr_opt_semi) -> Switch core_expr LBRACE . cases(last_expr_opt_semi) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch core_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Verbatim WILD
##
## Ends in an error in state: 223.
##
## switch_expr(last_expr_opt_semi) -> Switch core_expr . LBRACE cases(last_expr_opt_semi) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch WILD
##
## Ends in an error in state: 193.
##
## switch_expr(last_expr_opt_semi) -> Switch . core_expr LBRACE cases(last_expr_opt_semi) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Type Ident EQ Constr WILD
##
## Ends in an error in state: 477.
##
## local_type_decl(last_expr_opt_semi) -> type_decl . SEMI last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Verbatim VBAR
##
## Ends in an error in state: 561.
##
## sequence -> LBRACE series . RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE series
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 500, spurious reduction of production seq_expr -> disj_expr_level
## In state 491, spurious reduction of production last_expr -> seq_expr
## In state 497, spurious reduction of production series -> last_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Verbatim WILD
##
## Ends in an error in state: 500.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ VBAR SEMI RBRACE Or BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ VBAR SEMI RBRACE Or BOOL_OR ]
## seq_expr -> disj_expr_level . [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE WILD
##
## Ends in an error in state: 483.
##
## let_in_sequence -> seq(Attr) . Let let_binding SEMI series [ VBAR RBRACE ]
## let_in_sequence -> seq(Attr) . Let Rec let_binding SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 192, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim COMMA ELLIPSIS Verbatim WILD
##
## Ends in an error in state: 575.
##
## spread -> LBRACKET expr COMMA ELLIPSIS expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim COMMA Verbatim WILD
##
## Ends in an error in state: 579.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim WILD
##
## Ends in an error in state: 572.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
## spread -> LBRACKET expr . COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COLON Constr WILD
##
## Ends in an error in state: 585.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## tuple(annot_expr) -> annot_expr . COMMA nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
## In state 276, spurious reduction of production annot_expr -> expr option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim WILD
##
## Ends in an error in state: 275.
##
## annot_expr -> expr . option(type_annotation) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang Verbatim WILD
##
## Ends in an error in state: 590.
##
## code_inj -> Lang expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec Verbatim
##
## Ends in an error in state: 260.
##
## let_expr(expr) -> seq(Attr) Let Rec . let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec WILD EQ Bytes WILD
##
## Ends in an error in state: 261.
##
## let_expr(expr) -> seq(Attr) Let Rec let_binding . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Verbatim
##
## Ends in an error in state: 259.
##
## let_expr(expr) -> seq(Attr) Let . let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## let_expr(expr) -> seq(Attr) Let . Rec let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let WILD EQ Bytes WILD
##
## Ends in an error in state: 337.
##
## let_expr(expr) -> seq(Attr) Let let_binding . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS WILD
##
## Ends in an error in state: 190.
##
## unary_expr_level -> MINUS . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: NOT WILD
##
## Ends in an error in state: 188.
##
## unary_expr_level -> NOT . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Constr WILD
##
## Ends in an error in state: 205.
##
## module_access_e -> Constr . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed selection of an expression in a module.
At this point, the selection operator '.' is expected.

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET VBAR
##
## Ends in an error in state: 226.
##
## list__(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,COMMA)) RBRACKET [ COMMA ARROW ]
## pattern -> LBRACKET . sub_pattern COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET WILD COMMA ELLIPSIS VBAR
##
## Ends in an error in state: 229.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS . sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET WILD COMMA ELLIPSIS WILD WILD
##
## Ends in an error in state: 230.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern . RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 228.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern COMMA . ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET WILD WILD
##
## Ends in an error in state: 227.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern . COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LPAR Bytes RPAR WILD
##
## Ends in an error in state: 233.
##
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR VBAR
##
## Ends in an error in state: 594.
##
## case_clause(base_cond_opt_semi) -> VBAR . pattern ARROW base_cond_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Bytes SEMI WILD
##
## Ends in an error in state: 649.
##
## nseq(case_clause(base_cond_opt_semi)) -> case_clause(base_cond_opt_semi) . seq(case_clause(base_cond_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_cond_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Bytes VBAR Bytes ARROW Bytes SEMI WILD
##
## Ends in an error in state: 651.
##
## seq(case_clause(base_cond_opt_semi)) -> case_clause(base_cond_opt_semi) . seq(case_clause(base_cond_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_cond_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN Ident COLON WILD WILD
##
## Ends in an error in state: 635.
##
## fun_expr(base_cond) -> ES6FUN Ident COLON type_expr . ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN Ident WILD
##
## Ends in an error in state: 633.
##
## fun_expr(base_cond) -> ES6FUN Ident . COLON type_expr ARROW base_cond [ VBAR SEMI RBRACE ]
## fun_expr(base_cond) -> ES6FUN Ident . ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN LPAR Verbatim
##
## Ends in an error in state: 606.
##
## fun_expr(base_cond) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN LPAR WILD COLON Constr WILD
##
## Ends in an error in state: 607.
##
## fun_expr(base_cond) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
## In state 243, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 342, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN LPAR WILD RPAR COLON Constr WILD
##
## Ends in an error in state: 609.
##
## fun_expr(base_cond) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 608.
##
## fun_expr(base_cond) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW ES6FUN WILD
##
## Ends in an error in state: 605.
##
## fun_expr(base_cond) -> ES6FUN . Ident COLON type_expr ARROW base_cond [ VBAR SEMI RBRACE ]
## fun_expr(base_cond) -> ES6FUN . Ident ARROW base_cond [ VBAR SEMI RBRACE ]
## fun_expr(base_cond) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Switch Bytes LBRACE VBAR WILD ARROW Bytes RBRACE WILD
##
## Ends in an error in state: 600.
##
## if_then(base_cond) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else LBRACE Verbatim SEMI PLUS
##
## Ends in an error in state: 641.
##
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else LBRACE Verbatim WILD
##
## Ends in an error in state: 640.
##
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 623, spurious reduction of production base_expr(base_cond) -> disj_expr_level
## In state 625, spurious reduction of production base_cond__open(base_cond) -> base_expr(base_cond)
## In state 626, spurious reduction of production base_cond -> base_cond__open(base_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim RBRACE Else WILD
##
## Ends in an error in state: 603.
##
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim RBRACE WILD
##
## Ends in an error in state: 602.
##
## if_then(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE Verbatim SEMI PLUS
##
## Ends in an error in state: 601.
##
## if_then(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW If LPAR Bytes RPAR WILD
##
## Ends in an error in state: 598.
##
## if_then(base_cond) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW If WILD
##
## Ends in an error in state: 597.
##
## if_then(base_cond) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Let Rec Verbatim
##
## Ends in an error in state: 615.
##
## let_expr(base_cond) -> seq(Attr) Let Rec . let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Let Rec WILD EQ Bytes WILD
##
## Ends in an error in state: 616.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Let Verbatim
##
## Ends in an error in state: 614.
##
## let_expr(base_cond) -> seq(Attr) Let . let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
## let_expr(base_cond) -> seq(Attr) Let . Rec let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Let WILD EQ Bytes WILD
##
## Ends in an error in state: 628.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Type Ident EQ Constr WILD
##
## Ends in an error in state: 611.
##
## local_type_decl(base_cond) -> type_decl . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Verbatim WILD
##
## Ends in an error in state: 644.
##
## base_cond_opt_semi -> base_cond . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## base_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 623, spurious reduction of production base_expr(base_cond) -> disj_expr_level
## In state 625, spurious reduction of production base_cond__open(base_cond) -> base_expr(base_cond)
## In state 626, spurious reduction of production base_cond -> base_cond__open(base_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW WILD
##
## Ends in an error in state: 613.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 596, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD COMMA Bytes RPAR
##
## Ends in an error in state: 595.
##
## case_clause(base_cond_opt_semi) -> VBAR pattern . ARROW base_cond_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 141, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 232, spurious reduction of production pattern -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD COMMA VBAR
##
## Ends in an error in state: 138.
##
## tuple(sub_pattern) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 140.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD COMMA WILD WILD
##
## Ends in an error in state: 139.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RPAR ARROW ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD WILD
##
## Ends in an error in state: 443.
##
## pattern -> core_pattern . [ ARROW ]
## sub_pattern -> core_pattern . [ COMMA ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE WILD
##
## Ends in an error in state: 593.
##
## switch_expr(base_cond_opt_semi) -> Switch core_expr LBRACE . cases(base_cond_opt_semi) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch core_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim WILD
##
## Ends in an error in state: 592.
##
## switch_expr(base_cond_opt_semi) -> Switch core_expr . LBRACE cases(base_cond_opt_semi) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD
##
## Ends in an error in state: 183.
##
## switch_expr(base_cond_opt_semi) -> Switch . core_expr LBRACE cases(base_cond_opt_semi) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Type Ident EQ Constr WILD
##
## Ends in an error in state: 255.
##
## local_type_decl(expr) -> type_decl . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim BOOL_AND WILD
##
## Ends in an error in state: 281.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim BOOL_OR WILD
##
## Ends in an error in state: 323.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim PLUS2 WILD
##
## Ends in an error in state: 294.
##
## bin_op(add_expr_level,PLUS2,cat_expr_level) -> add_expr_level PLUS2 . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim EQEQ WILD
##
## Ends in an error in state: 312.
##
## bin_op(comp_expr_level,EQEQ,cat_expr_level) -> comp_expr_level EQEQ . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim GE WILD
##
## Ends in an error in state: 310.
##
## bin_op(comp_expr_level,GE,cat_expr_level) -> comp_expr_level GE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim GT WILD
##
## Ends in an error in state: 308.
##
## bin_op(comp_expr_level,GT,cat_expr_level) -> comp_expr_level GT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LE WILD
##
## Ends in an error in state: 306.
##
## bin_op(comp_expr_level,LE,cat_expr_level) -> comp_expr_level LE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LPAR Verbatim COLON Constr WILD
##
## Ends in an error in state: 331.
##
## nsepseq(annot_expr,COMMA) -> annot_expr . [ RPAR ]
## nsepseq(annot_expr,COMMA) -> annot_expr . COMMA nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 177, spurious reduction of production type_annotation -> COLON type_expr
## In state 178, spurious reduction of production option(type_annotation) -> type_annotation
## In state 276, spurious reduction of production annot_expr -> expr option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LT WILD
##
## Ends in an error in state: 304.
##
## bin_op(comp_expr_level,LT,cat_expr_level) -> comp_expr_level LT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim MINUS WILD
##
## Ends in an error in state: 302.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Mod WILD
##
## Ends in an error in state: 300.
##
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level Mod . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Mod
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim NE WILD
##
## Ends in an error in state: 283.
##
## bin_op(comp_expr_level,NE,cat_expr_level) -> comp_expr_level NE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Or WILD
##
## Ends in an error in state: 278.
##
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level Or . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim PLUS WILD
##
## Ends in an error in state: 296.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim SLASH WILD
##
## Ends in an error in state: 298.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim TIMES WILD
##
## Ends in an error in state: 264.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim WILD
##
## Ends in an error in state: 666.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD
##
## Ends in an error in state: 258.
##
## let_expr(expr) -> seq(Attr) . Let let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
## let_expr(expr) -> seq(Attr) . Let Rec let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 664, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes COMMA Ident EQ Bytes COMMA WILD
##
## Ends in an error in state: 154.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes COMMA Ident EQ Bytes WILD
##
## Ends in an error in state: 153.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes COMMA WILD
##
## Ends in an error in state: 150.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ Bytes WILD
##
## Ends in an error in state: 149.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident EQ VBAR
##
## Ends in an error in state: 100.
##
## field_pattern -> Ident EQ . sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident WILD
##
## Ends in an error in state: 99.
##
## field_pattern -> Ident . EQ sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE WILD
##
## Ends in an error in state: 98.
##
## record_pattern -> LBRACE . sep_or_term_list(field_pattern,COMMA) RBRACE [ RPAR RBRACKET RBRACE EQ COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some VBAR
##
## Ends in an error in state: 111.
##
## constr_pattern -> C_Some . sub_pattern [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET VBAR
##
## Ends in an error in state: 106.
##
## list__(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,COMMA)) RBRACKET [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 124.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 126.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET WILD COMMA WILD WILD
##
## Ends in an error in state: 125.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LBRACKET WILD WILD
##
## Ends in an error in state: 123.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LPAR VBAR
##
## Ends in an error in state: 105.
##
## par(ptuple) -> LPAR . ptuple RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## par(sub_pattern) -> LPAR . sub_pattern RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## unit -> LPAR . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LPAR WILD COMMA Bytes ARROW
##
## Ends in an error in state: 142.
##
## par(ptuple) -> LPAR ptuple . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR ptuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 141, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 135, spurious reduction of production ptuple -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Constr LPAR WILD WILD
##
## Ends in an error in state: 136.
##
## par(sub_pattern) -> LPAR sub_pattern . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR True WILD
##
## Ends in an error in state: 172.
##
## par(closed_irrefutable) -> LPAR closed_irrefutable . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR closed_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Verbatim
##
## Ends in an error in state: 95.
##
## par(closed_irrefutable) -> LPAR . closed_irrefutable RPAR [ RPAR EQ COMMA COLON ]
## unit -> LPAR . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR WILD WILD
##
## Ends in an error in state: 168.
##
## closed_irrefutable -> irrefutable . [ RPAR ]
## typed_pattern -> irrefutable . COLON type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production irrefutable -> sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Rec Verbatim
##
## Ends in an error in state: 94.
##
## let_declaration -> seq(Attr) Let Rec . let_binding [ Type SEMI Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Verbatim
##
## Ends in an error in state: 92.
##
## let_declaration -> seq(Attr) Let . let_binding [ Type SEMI Let EOF Directive Attr ]
## let_declaration -> seq(Attr) Let . Rec let_binding [ Type SEMI Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON WILD WILD
##
## Ends in an error in state: 179.
##
## let_binding -> irrefutable option(type_annotation) . EQ expr [ Type SEMI Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA Verbatim
##
## Ends in an error in state: 161.
##
## tuple(sub_irrefutable) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 163.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD EQ Bytes WILD
##
## Ends in an error in state: 657.
##
## declaration -> let_declaration . option(SEMI) [ Type Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## let_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 266, spurious reduction of production call_expr_level -> core_expr
## In state 285, spurious reduction of production unary_expr_level -> call_expr_level
## In state 254, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level
## In state 293, spurious reduction of production cat_expr_level -> add_expr_level
## In state 314, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 321, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 325, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 277, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 329, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 330, spurious reduction of production expr -> base_cond__open(expr)
## In state 653, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
## In state 654, spurious reduction of production let_declaration -> seq(Attr) Let let_binding
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD WILD
##
## Ends in an error in state: 175.
##
## let_binding -> irrefutable . option(type_annotation) EQ expr [ Type SEMI Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production irrefutable -> sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr Constr LPAR Verbatim
##
## Ends in an error in state: 49.
##
## variant -> nseq(Attr) Constr LPAR . fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr Constr LPAR WILD WILD
##
## Ends in an error in state: 50.
##
## variant -> nseq(Attr) Constr LPAR fun_type . RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr LPAR fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr DOT WILD
##
## Ends in an error in state: 12.
##
## module_access_t -> Constr DOT . module_var_t [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed selection in a module.
At this point, the name of a type defined in the module is expected.

contract: Type Ident EQ Constr LPAR Verbatim
##
## Ends in an error in state: 35.
##
## variant -> Constr LPAR . fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr LPAR WILD WILD
##
## Ends in an error in state: 36.
##
## variant -> Constr LPAR fun_type . RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr LPAR fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr VBAR WILD
##
## Ends in an error in state: 43.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr WILD
##
## Ends in an error in state: 88.
##
## declaration -> type_decl . option(SEMI) [ Type Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ES6FUN Constr WILD
##
## Ends in an error in state: 11.
##
## module_access_t -> Constr . DOT module_var_t [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed selection of a type in a module.
At this point, the selection operator '.' is expected, followed by
the name of a type defined in the module.

contract: Type Ident EQ ES6FUN Verbatim
##
## Ends in an error in state: 10.
##
## fun_type -> ES6FUN . cartesian ARROW fun_type [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ES6FUN WILD ARROW Verbatim
##
## Ends in an error in state: 21.
##
## fun_type -> ES6FUN cartesian ARROW . fun_type [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN cartesian ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ES6FUN WILD WILD
##
## Ends in an error in state: 20.
##
## fun_type -> ES6FUN cartesian . ARROW fun_type [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR Verbatim
##
## Ends in an error in state: 9.
##
## par(type_args) -> LPAR . type_args RPAR [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR WILD COMMA Verbatim
##
## Ends in an error in state: 28.
##
## tuple(fun_type) -> fun_type COMMA . nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 31.
##
## nsepseq(fun_type,COMMA) -> fun_type COMMA . nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR WILD COMMA WILD WILD
##
## Ends in an error in state: 30.
##
## nsepseq(fun_type,COMMA) -> fun_type . [ RPAR ]
## nsepseq(fun_type,COMMA) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR WILD WILD
##
## Ends in an error in state: 27.
##
## tuple(fun_type) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
## type_args -> fun_type . [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COLON Constr WILD
##
## Ends in an error in state: 73.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 65, spurious reduction of production field_decl -> seq(Attr) Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COMMA Ident COLON Constr WILD
##
## Ends in an error in state: 77.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 34, spurious reduction of production variant -> Constr
## In state 42, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 57, spurious reduction of production type_expr -> sum_type
## In state 65, spurious reduction of production field_decl -> seq(Attr) Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident WILD
##
## Ends in an error in state: 63.
##
## field_decl -> seq(Attr) Ident . [ RBRACE COMMA ]
## field_decl -> seq(Attr) Ident . COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE WILD
##
## Ends in an error in state: 62.
##
## field_decl -> seq(Attr) . Ident [ RBRACE COMMA ]
## field_decl -> seq(Attr) . Ident COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 61, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD COMMA Verbatim
##
## Ends in an error in state: 81.
##
## tuple(cartesian) -> cartesian COMMA . nsepseq(cartesian,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## cartesian COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 84.
##
## nsepseq(cartesian,COMMA) -> cartesian COMMA . nsepseq(cartesian,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## cartesian COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD COMMA WILD WILD
##
## Ends in an error in state: 83.
##
## nsepseq(cartesian,COMMA) -> cartesian . [ RPAR ]
## nsepseq(cartesian,COMMA) -> cartesian . COMMA nsepseq(cartesian,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR WILD WILD
##
## Ends in an error in state: 53.
##
## par(type_expr) -> LPAR type_expr . RPAR [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 80, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR Attr WILD
##
## Ends in an error in state: 47.
##
## variant -> nseq(Attr) . Constr [ VBAR Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) . Constr LPAR fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production seq(Attr) ->
## In state 46, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR WILD
##
## Ends in an error in state: 59.
##
## sum_type -> seq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## seq(Attr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Verbatim
##
## Ends in an error in state: 58.
##
## record_type -> seq(Attr) . LBRACE sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
## sum_type -> seq(Attr) . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident WILD
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . EQ type_expr [ Type SEMI Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type WILD
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Ident EQ type_expr [ Type SEMI Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: WILD
##
## Ends in an error in state: 91.
##
## let_declaration -> seq(Attr) . Let let_binding [ Type SEMI Let EOF Directive Attr ]
## let_declaration -> seq(Attr) . Let Rec let_binding [ Type SEMI Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 0, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ LBRACE Type Ident EQ Constr EOF
##
## Ends in an error in state: 675.
##
## module_decl -> Module Constr EQ LBRACE module_ . RBRACE [ Type SEMI RBRACE Module Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr EQ LBRACE module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production variant -> Constr 
## In state 41, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 66, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 56, spurious reduction of production type_expr -> sum_type 
## In state 85, spurious reduction of production type_decl -> Type Ident EQ type_expr 
## In state 90, spurious reduction of production option(SEMI) -> 
## In state 92, spurious reduction of production declaration -> type_decl option(SEMI) 
## In state 680, spurious reduction of production declarations -> declaration 
## In state 679, spurious reduction of production module_ -> declarations 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ LBRACE Type Ident EQ Constr RBRACE WILD
##
## Ends in an error in state: 673.
##
## declaration -> module_decl . option(SEMI) [ Type RBRACE Module Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ WILD
##
## Ends in an error in state: 88.
##
## module_decl -> Module Constr EQ . LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr WILD
##
## Ends in an error in state: 87.
##
## module_decl -> Module Constr . EQ LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module WILD
##
## Ends in an error in state: 86.
##
## module_decl -> Module . Constr EQ LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Module
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr RBRACE
##
## Ends in an error in state: 682.
##
## contract -> declarations . EOF [ # ]
##
## The known suffix of the stack is as follows:
## declarations
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production variant -> Constr 
## In state 41, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 66, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 56, spurious reduction of production type_expr -> sum_type 
## In state 85, spurious reduction of production type_decl -> Type Ident EQ type_expr 
## In state 90, spurious reduction of production option(SEMI) -> 
## In state 92, spurious reduction of production declaration -> type_decl option(SEMI) 
## In state 680, spurious reduction of production declarations -> declaration 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module Constr EQ LBRACE Type Ident EQ Constr RBRACE WILD
##
## Ends in an error in state: 272.
##
## local_module_decl(expr) -> module_decl . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Module Constr EQ LBRACE Type Ident EQ Constr RBRACE WILD
##
## Ends in an error in state: 632.
##
## local_module_decl(base_cond) -> module_decl . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Module Constr EQ LBRACE Type Ident EQ Constr RBRACE WILD
##
## Ends in an error in state: 385.
##
## local_module_decl(closed_if) -> module_decl . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Module Constr EQ LBRACE Type Ident EQ Constr RBRACE WILD
##
## Ends in an error in state: 427.
##
## local_module_decl(base_if_then_else) -> module_decl . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module Constr EQ Constr WILD
##
## Ends in an error in state: 274.
##
## local_module_alias(expr) -> module_alias . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module Constr EQ Constr Type
##
## Ends in an error in state: 274.
##
## local_module_alias(expr) -> module_alias . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 700, spurious reduction of production nsepseq(module_name,DOT) -> Constr 
## In state 703, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Module Constr EQ Constr Type
##
## Ends in an error in state: 391.
##
## local_module_alias(closed_if) -> module_alias . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 700, spurious reduction of production nsepseq(module_name,DOT) -> Constr 
## In state 703, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Bytes RPAR LBRACE Switch Verbatim LBRACE VBAR WILD ARROW Module Constr EQ Constr Type
##
## Ends in an error in state: 437.
##
## local_module_alias(base_if_then_else) -> module_alias . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 700, spurious reduction of production nsepseq(module_name,DOT) -> Constr 
## In state 703, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Module Constr EQ Constr Type
##
## Ends in an error in state: 646.
##
## local_module_alias(base_cond) -> module_alias . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 700, spurious reduction of production nsepseq(module_name,DOT) -> Constr 
## In state 703, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ Constr DOT WILD
##
## Ends in an error in state: 701.
##
## nsepseq(module_name,DOT) -> Constr DOT . nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>
