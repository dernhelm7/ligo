interactive_expr: Bytes LPAR C_None COLON Ident WILD
##
## Ends in an error in state: 368.
##
## nsepseq(annot_expr,COMMA) -> annot_expr . [ RPAR ]
## nsepseq(annot_expr,COMMA) -> annot_expr . COMMA nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
## In state 367, spurious reduction of production annot_expr -> expr option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None BOOL_AND WILD
##
## Ends in an error in state: 311.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None BOOL_OR WILD
##
## Ends in an error in state: 350.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None EQ2 WILD
##
## Ends in an error in state: 339.
##
## bin_op(comp_expr_level,EQ2,cat_expr_level) -> comp_expr_level EQ2 . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQ2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None GE WILD
##
## Ends in an error in state: 337.
##
## bin_op(comp_expr_level,GE,cat_expr_level) -> comp_expr_level GE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None GT WILD
##
## Ends in an error in state: 335.
##
## bin_op(comp_expr_level,GT,cat_expr_level) -> comp_expr_level GT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None LE WILD
##
## Ends in an error in state: 333.
##
## bin_op(comp_expr_level,LE,cat_expr_level) -> comp_expr_level LE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None LT WILD
##
## Ends in an error in state: 331.
##
## bin_op(comp_expr_level,LT,cat_expr_level) -> comp_expr_level LT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None Land WILD
##
## Ends in an error in state: 294.
##
## bin_op(mult_expr_level,Land,shift_expr_level) -> mult_expr_level Land . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Land
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None Lor WILD
##
## Ends in an error in state: 292.
##
## bin_op(mult_expr_level,Lor,shift_expr_level) -> mult_expr_level Lor . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Lor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None Lsl WILD
##
## Ends in an error in state: 373.
##
## bin_op(unary_expr_level,Lsl,shift_expr_level) -> unary_expr_level Lsl . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level Lsl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None Lsr WILD
##
## Ends in an error in state: 264.
##
## bin_op(unary_expr_level,Lsr,shift_expr_level) -> unary_expr_level Lsr . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level Lsr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None Lxor WILD
##
## Ends in an error in state: 290.
##
## bin_op(mult_expr_level,Lxor,shift_expr_level) -> mult_expr_level Lxor . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Lxor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None MINUS WILD
##
## Ends in an error in state: 329.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module MINUS Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None Mod WILD
##
## Ends in an error in state: 288.
##
## bin_op(mult_expr_level,Mod,shift_expr_level) -> mult_expr_level Mod . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Mod
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None NE WILD
##
## Ends in an error in state: 313.
##
## bin_op(comp_expr_level,NE,cat_expr_level) -> comp_expr_level NE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None Or WILD
##
## Ends in an error in state: 309.
##
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level Or . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None PLUS WILD
##
## Ends in an error in state: 327.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module MINUS Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None PLUS2 WILD
##
## Ends in an error in state: 325.
##
## bin_op(add_expr_level,PLUS2,cat_expr_level) -> add_expr_level PLUS2 . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None SLASH WILD
##
## Ends in an error in state: 286.
##
## bin_op(mult_expr_level,SLASH,shift_expr_level) -> mult_expr_level SLASH . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None TIMES WILD
##
## Ends in an error in state: 278.
##
## bin_op(mult_expr_level,TIMES,shift_expr_level) -> mult_expr_level TIMES . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None VBAR
##
## Ends in an error in state: 739.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_None WILD
##
## Ends in an error in state: 263.
##
## bin_op(unary_expr_level,Lsl,shift_expr_level) -> unary_expr_level . Lsl shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## bin_op(unary_expr_level,Lsr,shift_expr_level) -> unary_expr_level . Lsr shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## shift_expr_level -> unary_expr_level . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_Some Constr WILD
##
## Ends in an error in state: 255.
##
## constant_constr -> Constr . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## module_access_e -> Constr . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_Some WILD
##
## Ends in an error in state: 261.
##
## constr_expr -> C_Some . argument [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr DOT WILD
##
## Ends in an error in state: 212.
##
## module_access_e -> Constr DOT . module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr WILD
##
## Ends in an error in state: 254.
##
## constant_constr -> Constr . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## constr_expr -> Constr . argument [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## module_access_e -> Constr . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident COLON Ident WILD
##
## Ends in an error in state: 381.
##
## fun_expr(expr) -> ES6FUN var_pattern COLON type_expr . ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident WILD
##
## Ends in an error in state: 379.
##
## fun_expr(expr) -> ES6FUN var_pattern . COLON type_expr ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN var_pattern . ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production seq(Attr) ->
## In state 113, spurious reduction of production var_pattern -> Ident seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident COLON Ident WILD
##
## Ends in an error in state: 250.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
## In state 249, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 376, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident COMMA Verbatim
##
## Ends in an error in state: 377.
##
## nsepseq(fun_arg,COMMA) -> fun_arg COMMA . nsepseq(fun_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_arg COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident RPAR COLON Ident WILD
##
## Ends in an error in state: 252.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident RPAR WILD
##
## Ends in an error in state: 251.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident WILD
##
## Ends in an error in state: 248.
##
## fun_arg -> sub_irrefutable . option(type_annotation) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production seq(Attr) ->
## In state 113, spurious reduction of production var_pattern -> Ident seq(Attr)
## In state 162, spurious reduction of production sub_irrefutable -> var_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Verbatim
##
## Ends in an error in state: 247.
##
## fun_expr(expr) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN WILD
##
## Ends in an error in state: 246.
##
## fun_expr(expr) -> ES6FUN . var_pattern COLON type_expr ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . var_pattern ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT WILD
##
## Ends in an error in state: 205.
##
## selection -> DOT . Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> DOT . Ident [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int WILD
##
## Ends in an error in state: 203.
##
## selection -> LBRACKET Int . RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET Int . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET WILD
##
## Ends in an error in state: 202.
##
## selection -> LBRACKET . Int RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET . Int RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE C_None VBAR
##
## Ends in an error in state: 386.
##
## parenthesized_expr -> LBRACE expr . RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None SEMI WILD
##
## Ends in an error in state: 511.
##
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr option(SEMI) . RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None VBAR
##
## Ends in an error in state: 510.
##
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr . option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE C_None RBRACE Else WILD
##
## Ends in an error in state: 508.
##
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE C_None SEMI WILD
##
## Ends in an error in state: 506.
##
## if_then(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE C_None VBAR
##
## Ends in an error in state: 424.
##
## base_expr(closed_if) -> disj_expr_level . [ SEMI RBRACE ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ SEMI RBRACE Or BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ SEMI RBRACE Or BOOL_OR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE ES6FUN Ident COLON Ident WILD
##
## Ends in an error in state: 438.
##
## fun_expr(closed_if) -> ES6FUN var_pattern COLON type_expr . ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE ES6FUN Ident WILD
##
## Ends in an error in state: 436.
##
## fun_expr(closed_if) -> ES6FUN var_pattern . COLON type_expr ARROW closed_if [ SEMI RBRACE ]
## fun_expr(closed_if) -> ES6FUN var_pattern . ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production seq(Attr) ->
## In state 113, spurious reduction of production var_pattern -> Ident seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE ES6FUN LPAR Ident COLON Ident WILD
##
## Ends in an error in state: 401.
##
## fun_expr(closed_if) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
## In state 249, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 376, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE ES6FUN LPAR Ident RPAR COLON Ident WILD
##
## Ends in an error in state: 403.
##
## fun_expr(closed_if) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE ES6FUN LPAR Ident RPAR WILD
##
## Ends in an error in state: 402.
##
## fun_expr(closed_if) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE ES6FUN LPAR Verbatim
##
## Ends in an error in state: 400.
##
## fun_expr(closed_if) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE ES6FUN WILD
##
## Ends in an error in state: 399.
##
## fun_expr(closed_if) -> ES6FUN . var_pattern COLON type_expr ARROW closed_if [ SEMI RBRACE ]
## fun_expr(closed_if) -> ES6FUN . var_pattern ARROW closed_if [ SEMI RBRACE ]
## fun_expr(closed_if) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE VBAR
##
## Ends in an error in state: 505.
##
## if_then(expr) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else(expr) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 519, spurious reduction of production if_then(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
## In state 422, spurious reduction of production conditional(closed_if) -> if_then(closed_if)
## In state 425, spurious reduction of production base_if_then_else__open(closed_if) -> conditional(closed_if)
## In state 427, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Let Ident EQ C_None VBAR
##
## Ends in an error in state: 431.
##
## let_expr(closed_if) -> seq(Attr) Let let_binding . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Let Rec Ident EQ C_None VBAR
##
## Ends in an error in state: 411.
##
## let_expr(closed_if) -> seq(Attr) Let Rec let_binding . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Let Rec Verbatim
##
## Ends in an error in state: 410.
##
## let_expr(closed_if) -> seq(Attr) Let Rec . let_binding SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Let Verbatim
##
## Ends in an error in state: 409.
##
## let_expr(closed_if) -> seq(Attr) Let . let_binding SEMI closed_if [ SEMI RBRACE ]
## let_expr(closed_if) -> seq(Attr) Let . Rec let_binding SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Module Constr EQ Constr WILD
##
## Ends in an error in state: 415.
##
## local_module_alias(closed_if) -> module_alias . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 730, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 733, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Module Constr EQ LBRACE Directive RBRACE WILD
##
## Ends in an error in state: 413.
##
## local_module_decl(closed_if) -> module_decl . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW C_None SEMI WILD
##
## Ends in an error in state: 501.
##
## nseq(case_clause(base_if_then_else_opt_semi)) -> case_clause(base_if_then_else_opt_semi) . seq(case_clause(base_if_then_else_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_if_then_else_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW C_None Type
##
## Ends in an error in state: 472.
##
## base_expr(base_if_then_else) -> disj_expr_level . [ VBAR SEMI RBRACE ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ VBAR SEMI RBRACE Or BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ VBAR SEMI RBRACE Or BOOL_OR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW C_None VBAR C_None ARROW C_None SEMI WILD
##
## Ends in an error in state: 503.
##
## seq(case_clause(base_if_then_else_opt_semi)) -> case_clause(base_if_then_else_opt_semi) . seq(case_clause(base_if_then_else_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_if_then_else_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW ES6FUN Ident COLON Ident WILD
##
## Ends in an error in state: 486.
##
## fun_expr(base_if_then_else) -> ES6FUN var_pattern COLON type_expr . ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW ES6FUN Ident WILD
##
## Ends in an error in state: 484.
##
## fun_expr(base_if_then_else) -> ES6FUN var_pattern . COLON type_expr ARROW base_if_then_else [ VBAR SEMI RBRACE ]
## fun_expr(base_if_then_else) -> ES6FUN var_pattern . ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production seq(Attr) ->
## In state 113, spurious reduction of production var_pattern -> Ident seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW ES6FUN LPAR Ident COLON Ident WILD
##
## Ends in an error in state: 450.
##
## fun_expr(base_if_then_else) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
## In state 249, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 376, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW ES6FUN LPAR Ident RPAR COLON Ident WILD
##
## Ends in an error in state: 452.
##
## fun_expr(base_if_then_else) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW ES6FUN LPAR Ident RPAR WILD
##
## Ends in an error in state: 451.
##
## fun_expr(base_if_then_else) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW ES6FUN LPAR Verbatim
##
## Ends in an error in state: 449.
##
## fun_expr(base_if_then_else) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW ES6FUN WILD
##
## Ends in an error in state: 448.
##
## fun_expr(base_if_then_else) -> ES6FUN . var_pattern COLON type_expr ARROW base_if_then_else [ VBAR SEMI RBRACE ]
## fun_expr(base_if_then_else) -> ES6FUN . var_pattern ARROW base_if_then_else [ VBAR SEMI RBRACE ]
## fun_expr(base_if_then_else) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None RBRACE WILD
##
## Ends in an error in state: 495.
##
## base_if_then_else_opt_semi -> base_if_then_else . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## base_if_then_else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None SEMI WILD
##
## Ends in an error in state: 492.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None VBAR
##
## Ends in an error in state: 491.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 472, spurious reduction of production base_expr(base_if_then_else) -> disj_expr_level
## In state 476, spurious reduction of production base_if_then_else__open(base_if_then_else) -> base_expr(base_if_then_else)
## In state 474, spurious reduction of production base_if_then_else -> base_if_then_else__open(base_if_then_else)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE Else WILD
##
## Ends in an error in state: 446.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE WILD
##
## Ends in an error in state: 445.
##
## if_then(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . [ VBAR SEMI RBRACE ]
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None SEMI WILD
##
## Ends in an error in state: 444.
##
## if_then(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE VBAR
##
## Ends in an error in state: 443.
##
## if_then(base_if_then_else) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 519, spurious reduction of production if_then(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
## In state 422, spurious reduction of production conditional(closed_if) -> if_then(closed_if)
## In state 425, spurious reduction of production base_if_then_else__open(closed_if) -> conditional(closed_if)
## In state 427, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR WILD
##
## Ends in an error in state: 397.
##
## if_then(base_if_then_else) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_if_then_else) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW If WILD
##
## Ends in an error in state: 396.
##
## if_then(base_if_then_else) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_if_then_else) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW Let Ident EQ C_None VBAR
##
## Ends in an error in state: 479.
##
## let_expr(base_if_then_else) -> seq(Attr) Let let_binding . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW Let Rec Ident EQ C_None VBAR
##
## Ends in an error in state: 459.
##
## let_expr(base_if_then_else) -> seq(Attr) Let Rec let_binding . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW Let Rec Verbatim
##
## Ends in an error in state: 458.
##
## let_expr(base_if_then_else) -> seq(Attr) Let Rec . let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW Let Verbatim
##
## Ends in an error in state: 457.
##
## let_expr(base_if_then_else) -> seq(Attr) Let . let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
## let_expr(base_if_then_else) -> seq(Attr) Let . Rec let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW Module Constr EQ Constr WILD
##
## Ends in an error in state: 463.
##
## local_module_alias(base_if_then_else) -> module_alias . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 730, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 733, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW Module Constr EQ LBRACE Directive RBRACE WILD
##
## Ends in an error in state: 461.
##
## local_module_decl(base_if_then_else) -> module_decl . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW Type Ident EQ Ident WILD
##
## Ends in an error in state: 454.
##
## local_type_decl(base_if_then_else) -> type_decl . SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None ARROW WILD
##
## Ends in an error in state: 456.
##
## let_expr(base_if_then_else) -> seq(Attr) . Let let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
## let_expr(base_if_then_else) -> seq(Attr) . Let Rec let_binding SEMI base_if_then_else [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 395, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR C_None COMMA C_None RPAR
##
## Ends in an error in state: 394.
##
## case_clause(base_if_then_else_opt_semi) -> VBAR pattern . ARROW base_if_then_else_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 147, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 238, spurious reduction of production pattern -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE VBAR VBAR
##
## Ends in an error in state: 393.
##
## case_clause(base_if_then_else_opt_semi) -> VBAR . pattern ARROW base_if_then_else_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes LBRACE WILD
##
## Ends in an error in state: 392.
##
## switch_expr(base_if_then_else_opt_semi) -> Switch core_expr LBRACE . cases(base_if_then_else_opt_semi) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch core_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch Bytes WILD
##
## Ends in an error in state: 391.
##
## switch_expr(base_if_then_else_opt_semi) -> Switch core_expr . LBRACE cases(base_if_then_else_opt_semi) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Switch WILD
##
## Ends in an error in state: 390.
##
## switch_expr(base_if_then_else_opt_semi) -> Switch . core_expr LBRACE cases(base_if_then_else_opt_semi) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE Type Ident EQ Ident WILD
##
## Ends in an error in state: 405.
##
## local_type_decl(closed_if) -> type_decl . SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR LBRACE WILD
##
## Ends in an error in state: 408.
##
## let_expr(closed_if) -> seq(Attr) . Let let_binding SEMI closed_if [ SEMI RBRACE ]
## let_expr(closed_if) -> seq(Attr) . Let Rec let_binding SEMI closed_if [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 389, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None RPAR WILD
##
## Ends in an error in state: 388.
##
## if_then(expr) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else(expr) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR C_None VBAR
##
## Ends in an error in state: 513.
##
## parenthesized_expr -> LPAR expr . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If WILD
##
## Ends in an error in state: 244.
##
## if_then(expr) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else(expr) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr option(SEMI) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE C_None Type
##
## Ends in an error in state: 553.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ VBAR SEMI RBRACE Or BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ VBAR SEMI RBRACE Or BOOL_OR ]
## seq_expr -> disj_expr_level . [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE C_None VBAR
##
## Ends in an error in state: 615.
##
## sequence -> LBRACE series . RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE series
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 553, spurious reduction of production seq_expr -> disj_expr_level
## In state 545, spurious reduction of production last_expr -> seq_expr
## In state 551, spurious reduction of production series -> last_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COLON
##
## Ends in an error in state: 599.
##
## update_record -> LBRACE ELLIPSIS path . COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 597, spurious reduction of production path -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON C_None COMMA Ident COLON C_None COMMA WILD
##
## Ends in an error in state: 613.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON C_None COMMA Ident COLON C_None VBAR
##
## Ends in an error in state: 612.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 605, spurious reduction of production field_path_assignment -> path COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON C_None COMMA WILD
##
## Ends in an error in state: 609.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON C_None VBAR
##
## Ends in an error in state: 608.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 605, spurious reduction of production field_path_assignment -> path COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COMMA
##
## Ends in an error in state: 603.
##
## field_path_assignment -> path . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 597, spurious reduction of production path -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA WILD
##
## Ends in an error in state: 600.
##
## update_record -> LBRACE ELLIPSIS path COMMA . sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident WILD
##
## Ends in an error in state: 597.
##
## path -> Ident . [ COMMA COLON ]
## projection -> Ident . selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS WILD
##
## Ends in an error in state: 596.
##
## update_record -> LBRACE ELLIPSIS . path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None RBRACE WILD
##
## Ends in an error in state: 535.
##
## last_expr_opt_semi -> seq_expr . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW Switch Bytes LBRACE VBAR C_None ARROW C_None RBRACE WILD
##
## Ends in an error in state: 533.
##
## last_expr_opt_semi -> switch_expr(last_expr_opt_semi) . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## switch_expr(last_expr_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident COLON Ident WILD
##
## Ends in an error in state: 565.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN var_pattern COLON type_expr . ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident WILD
##
## Ends in an error in state: 563.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN var_pattern . COLON type_expr ARROW last_expr_opt_semi [ VBAR RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN var_pattern . ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production seq(Attr) ->
## In state 113, spurious reduction of production var_pattern -> Ident seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Ident COLON Ident WILD
##
## Ends in an error in state: 527.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
## In state 249, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 376, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Ident RPAR COLON Ident WILD
##
## Ends in an error in state: 529.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Ident RPAR WILD
##
## Ends in an error in state: 528.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Verbatim
##
## Ends in an error in state: 526.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN WILD
##
## Ends in an error in state: 525.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN . var_pattern COLON type_expr ARROW last_expr_opt_semi [ VBAR RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . var_pattern ARROW last_expr_opt_semi [ VBAR RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON C_None VBAR
##
## Ends in an error in state: 617.
##
## record_expr -> LBRACE field_assignment . option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 582, spurious reduction of production field_assignment -> Ident COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COLON C_None VBAR
##
## Ends in an error in state: 586.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 582, spurious reduction of production field_assignment -> Ident COLON expr
## In state 593, spurious reduction of production field_assignment_punning -> field_assignment
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COLON C_None VBAR
##
## Ends in an error in state: 590.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 582, spurious reduction of production field_assignment -> Ident COLON expr
## In state 593, spurious reduction of production field_assignment_punning -> field_assignment
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 591.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 587.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident WILD
##
## Ends in an error in state: 580.
##
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## field_assignment_punning -> Ident . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA WILD
##
## Ends in an error in state: 579.
##
## more_field_assignments -> COMMA . sep_or_term_list(field_assignment_punning,COMMA) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None RBRACE WILD
##
## Ends in an error in state: 545.
##
## last_expr -> seq_expr . [ VBAR RBRACE ]
## series -> seq_expr . SEMI option(series) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None SEMI WILD
##
## Ends in an error in state: 523.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE VBAR
##
## Ends in an error in state: 522.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 519, spurious reduction of production if_then(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
## In state 422, spurious reduction of production conditional(closed_if) -> if_then(closed_if)
## In state 425, spurious reduction of production base_if_then_else__open(closed_if) -> conditional(closed_if)
## In state 427, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE Else WILD
##
## Ends in an error in state: 520.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE WILD
##
## Ends in an error in state: 519.
##
## if_then(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . [ VBAR SEMI RBRACE ]
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR C_None RPAR LBRACE C_None SEMI WILD
##
## Ends in an error in state: 518.
##
## if_then(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR C_None RPAR LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE VBAR
##
## Ends in an error in state: 517.
##
## if_then(closed_if) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 519, spurious reduction of production if_then(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
## In state 422, spurious reduction of production conditional(closed_if) -> if_then(closed_if)
## In state 425, spurious reduction of production base_if_then_else__open(closed_if) -> conditional(closed_if)
## In state 427, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LPAR C_None RPAR WILD
##
## Ends in an error in state: 515.
##
## if_then(closed_if) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(closed_if) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If WILD
##
## Ends in an error in state: 242.
##
## if_then(closed_if) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(closed_if) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Ident EQ C_None VBAR
##
## Ends in an error in state: 555.
##
## let_in_sequence -> seq(Attr) Let let_binding . SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec Ident EQ C_None VBAR
##
## Ends in an error in state: 540.
##
## let_in_sequence -> seq(Attr) Let Rec let_binding . SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec Verbatim
##
## Ends in an error in state: 539.
##
## let_in_sequence -> seq(Attr) Let Rec . let_binding SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Verbatim
##
## Ends in an error in state: 538.
##
## let_in_sequence -> seq(Attr) Let . let_binding SEMI series [ VBAR RBRACE ]
## let_in_sequence -> seq(Attr) Let . Rec let_binding SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes LBRACE VBAR C_None ARROW C_None RBRACE WILD
##
## Ends in an error in state: 542.
##
## last_expr -> switch_expr(last_expr_opt_semi) . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## switch_expr(last_expr_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes LBRACE VBAR C_None ARROW C_None SEMI WILD
##
## Ends in an error in state: 574.
##
## nseq(case_clause(last_expr_opt_semi)) -> case_clause(last_expr_opt_semi) . seq(case_clause(last_expr_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(last_expr_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes LBRACE VBAR C_None ARROW C_None VBAR C_None ARROW C_None SEMI WILD
##
## Ends in an error in state: 576.
##
## seq(case_clause(last_expr_opt_semi)) -> case_clause(last_expr_opt_semi) . seq(case_clause(last_expr_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(last_expr_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes LBRACE VBAR C_None COMMA C_None RPAR
##
## Ends in an error in state: 240.
##
## case_clause(last_expr_opt_semi) -> VBAR pattern . ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 147, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 238, spurious reduction of production pattern -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes LBRACE VBAR VBAR
##
## Ends in an error in state: 231.
##
## case_clause(last_expr_opt_semi) -> VBAR . pattern ARROW last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes LBRACE WILD
##
## Ends in an error in state: 230.
##
## switch_expr(last_expr_opt_semi) -> Switch core_expr LBRACE . cases(last_expr_opt_semi) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch core_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes WILD
##
## Ends in an error in state: 229.
##
## switch_expr(last_expr_opt_semi) -> Switch core_expr . LBRACE cases(last_expr_opt_semi) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch WILD
##
## Ends in an error in state: 199.
##
## switch_expr(last_expr_opt_semi) -> Switch . core_expr LBRACE cases(last_expr_opt_semi) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Type Ident EQ Ident WILD
##
## Ends in an error in state: 531.
##
## local_type_decl(last_expr_opt_semi) -> type_decl . SEMI last_expr_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE VBAR
##
## Ends in an error in state: 537.
##
## let_in_sequence -> seq(Attr) . Let let_binding SEMI series [ VBAR RBRACE ]
## let_in_sequence -> seq(Attr) . Let Rec let_binding SEMI series [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 198, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET C_None COMMA C_None VBAR
##
## Ends in an error in state: 633.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET C_None COMMA ELLIPSIS C_None VBAR
##
## Ends in an error in state: 629.
##
## spread -> LBRACKET expr COMMA ELLIPSIS expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET C_None VBAR
##
## Ends in an error in state: 626.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
## spread -> LBRACKET expr . COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR C_None COLON Ident WILD
##
## Ends in an error in state: 639.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## tuple(annot_expr) -> annot_expr . COMMA nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
## In state 367, spurious reduction of production annot_expr -> expr option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR C_None VBAR
##
## Ends in an error in state: 366.
##
## annot_expr -> expr . option(type_annotation) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang C_None VBAR
##
## Ends in an error in state: 644.
##
## code_inj -> Lang expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Ident EQ C_None VBAR
##
## Ends in an error in state: 360.
##
## let_expr(expr) -> seq(Attr) Let let_binding . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec Ident EQ C_None VBAR
##
## Ends in an error in state: 275.
##
## let_expr(expr) -> seq(Attr) Let Rec let_binding . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec Verbatim
##
## Ends in an error in state: 274.
##
## let_expr(expr) -> seq(Attr) Let Rec . let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Verbatim
##
## Ends in an error in state: 273.
##
## let_expr(expr) -> seq(Attr) Let . let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr(expr) -> seq(Attr) Let . Rec let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS WILD
##
## Ends in an error in state: 196.
##
## unary_expr_level -> MINUS . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module Constr EQ Constr WILD
##
## Ends in an error in state: 298.
##
## local_module_alias(expr) -> module_alias . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 730, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 733, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module Constr EQ LBRACE Directive RBRACE WILD
##
## Ends in an error in state: 296.
##
## local_module_decl(expr) -> module_decl . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: NOT WILD
##
## Ends in an error in state: 194.
##
## unary_expr_level -> NOT . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: RPAR
##
## Ends in an error in state: 272.
##
## let_expr(expr) -> seq(Attr) . Let let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr(expr) -> seq(Attr) . Let Rec let_binding SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 737, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW C_None SEMI WILD
##
## Ends in an error in state: 711.
##
## nseq(case_clause(base_cond_opt_semi)) -> case_clause(base_cond_opt_semi) . seq(case_clause(base_cond_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_cond_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW C_None Type
##
## Ends in an error in state: 706.
##
## base_cond_opt_semi -> base_cond . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## base_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 683, spurious reduction of production base_expr(base_cond) -> disj_expr_level
## In state 685, spurious reduction of production base_cond__open(base_cond) -> base_expr(base_cond)
## In state 686, spurious reduction of production base_cond -> base_cond__open(base_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW C_None VBAR C_None ARROW C_None SEMI WILD
##
## Ends in an error in state: 713.
##
## seq(case_clause(base_cond_opt_semi)) -> case_clause(base_cond_opt_semi) . seq(case_clause(base_cond_opt_semi)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_cond_opt_semi)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW ES6FUN Ident COLON Ident WILD
##
## Ends in an error in state: 697.
##
## fun_expr(base_cond) -> ES6FUN var_pattern COLON type_expr . ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW ES6FUN Ident WILD
##
## Ends in an error in state: 695.
##
## fun_expr(base_cond) -> ES6FUN var_pattern . COLON type_expr ARROW base_cond [ VBAR SEMI RBRACE ]
## fun_expr(base_cond) -> ES6FUN var_pattern . ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN var_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production seq(Attr) ->
## In state 113, spurious reduction of production var_pattern -> Ident seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW ES6FUN LPAR Ident COLON Ident WILD
##
## Ends in an error in state: 661.
##
## fun_expr(base_cond) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) . RPAR option(type_annotation) ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
## In state 249, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
## In state 376, spurious reduction of production nsepseq(fun_arg,COMMA) -> fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW ES6FUN LPAR Ident RPAR COLON Ident WILD
##
## Ends in an error in state: 663.
##
## fun_expr(base_cond) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW ES6FUN LPAR Ident RPAR WILD
##
## Ends in an error in state: 662.
##
## fun_expr(base_cond) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW ES6FUN LPAR Verbatim
##
## Ends in an error in state: 660.
##
## fun_expr(base_cond) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW ES6FUN WILD
##
## Ends in an error in state: 659.
##
## fun_expr(base_cond) -> ES6FUN . var_pattern COLON type_expr ARROW base_cond [ VBAR SEMI RBRACE ]
## fun_expr(base_cond) -> ES6FUN . var_pattern ARROW base_cond [ VBAR SEMI RBRACE ]
## fun_expr(base_cond) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None SEMI WILD
##
## Ends in an error in state: 703.
##
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE Else LBRACE C_None Type
##
## Ends in an error in state: 702.
##
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 683, spurious reduction of production base_expr(base_cond) -> disj_expr_level
## In state 685, spurious reduction of production base_cond__open(base_cond) -> base_expr(base_cond)
## In state 686, spurious reduction of production base_cond -> base_cond__open(base_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE Else WILD
##
## Ends in an error in state: 657.
##
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None RBRACE WILD
##
## Ends in an error in state: 656.
##
## if_then(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE C_None SEMI WILD
##
## Ends in an error in state: 655.
##
## if_then(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR LBRACE If LPAR C_None RPAR LBRACE C_None RBRACE VBAR
##
## Ends in an error in state: 654.
##
## if_then(base_cond) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 519, spurious reduction of production if_then(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
## In state 422, spurious reduction of production conditional(closed_if) -> if_then(closed_if)
## In state 425, spurious reduction of production base_if_then_else__open(closed_if) -> conditional(closed_if)
## In state 427, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW If LPAR C_None RPAR WILD
##
## Ends in an error in state: 652.
##
## if_then(base_cond) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW If WILD
##
## Ends in an error in state: 651.
##
## if_then(base_cond) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
## if_then_else(base_cond) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_cond option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW Let Ident EQ C_None VBAR
##
## Ends in an error in state: 690.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW Let Rec Ident EQ C_None VBAR
##
## Ends in an error in state: 670.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW Let Rec Verbatim
##
## Ends in an error in state: 669.
##
## let_expr(base_cond) -> seq(Attr) Let Rec . let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW Let Verbatim
##
## Ends in an error in state: 668.
##
## let_expr(base_cond) -> seq(Attr) Let . let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
## let_expr(base_cond) -> seq(Attr) Let . Rec let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW Module Constr EQ Constr WILD
##
## Ends in an error in state: 674.
##
## local_module_alias(base_cond) -> module_alias . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 730, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 733, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW Module Constr EQ LBRACE Directive RBRACE WILD
##
## Ends in an error in state: 672.
##
## local_module_decl(base_cond) -> module_decl . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW Type Ident EQ Ident WILD
##
## Ends in an error in state: 665.
##
## local_type_decl(base_cond) -> type_decl . SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None ARROW WILD
##
## Ends in an error in state: 667.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding SEMI base_cond [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 650, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None COMMA C_None COMMA VBAR
##
## Ends in an error in state: 146.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None COMMA C_None RPAR
##
## Ends in an error in state: 649.
##
## case_clause(base_cond_opt_semi) -> VBAR pattern . ARROW base_cond_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 147, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 238, spurious reduction of production pattern -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None COMMA C_None VBAR
##
## Ends in an error in state: 145.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RPAR ARROW ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None COMMA VBAR
##
## Ends in an error in state: 144.
##
## tuple(sub_pattern) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR C_None VBAR
##
## Ends in an error in state: 497.
##
## pattern -> core_pattern . [ ARROW ]
## sub_pattern -> core_pattern . [ COMMA ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET C_None COMMA ELLIPSIS C_None VBAR
##
## Ends in an error in state: 236.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern . RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET C_None COMMA ELLIPSIS VBAR
##
## Ends in an error in state: 235.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS . sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET C_None COMMA VBAR
##
## Ends in an error in state: 234.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern COMMA . ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET C_None VBAR
##
## Ends in an error in state: 233.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern . COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET VBAR
##
## Ends in an error in state: 232.
##
## list__(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,COMMA)) RBRACKET [ COMMA ARROW ]
## pattern -> LBRACKET . sub_pattern COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LPAR C_None RPAR WILD
##
## Ends in an error in state: 239.
##
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR VBAR
##
## Ends in an error in state: 648.
##
## case_clause(base_cond_opt_semi) -> VBAR . pattern ARROW base_cond_opt_semi [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE WILD
##
## Ends in an error in state: 647.
##
## switch_expr(base_cond_opt_semi) -> Switch core_expr LBRACE . cases(base_cond_opt_semi) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch core_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes WILD
##
## Ends in an error in state: 646.
##
## switch_expr(base_cond_opt_semi) -> Switch core_expr . LBRACE cases(base_cond_opt_semi) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Constr WILD
##
## Ends in an error in state: 211.
##
## module_access_e -> Constr . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD
##
## Ends in an error in state: 189.
##
## switch_expr(base_cond_opt_semi) -> Switch . core_expr LBRACE cases(base_cond_opt_semi) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Type Ident EQ Ident WILD
##
## Ends in an error in state: 268.
##
## local_type_decl(expr) -> type_decl . SEMI expr [ Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive RBRACE
##
## Ends in an error in state: 734.
##
## contract -> nseq(declaration) . EOF [ # ]
##
## The known suffix of the stack is as follows:
## nseq(declaration)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 726, spurious reduction of production seq(declaration) ->
## In state 727, spurious reduction of production nseq(declaration) -> declaration seq(declaration)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Ident WILD
##
## Ends in an error in state: 185.
##
## let_binding -> irrefutable option(type_annotation) . EQ expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 183, spurious reduction of production type_annotation -> COLON type_expr
## In state 184, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COMMA Ident COMMA Verbatim
##
## Ends in an error in state: 169.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COMMA Verbatim
##
## Ends in an error in state: 167.
##
## tuple(sub_irrefutable) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident EQ C_None VBAR
##
## Ends in an error in state: 724.
##
## declaration -> let_declaration . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## let_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 263, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 271, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 277, spurious reduction of production add_expr_level -> mult_expr_level
## In state 324, spurious reduction of production cat_expr_level -> add_expr_level
## In state 341, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 348, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 352, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 308, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 356, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 357, spurious reduction of production expr -> base_cond__open(expr)
## In state 715, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
## In state 716, spurious reduction of production let_declaration -> seq(Attr) Let let_binding
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident WILD
##
## Ends in an error in state: 181.
##
## let_binding -> irrefutable . option(type_annotation) EQ expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production seq(Attr) ->
## In state 113, spurious reduction of production var_pattern -> Ident seq(Attr)
## In state 162, spurious reduction of production sub_irrefutable -> var_pattern
## In state 166, spurious reduction of production irrefutable -> sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COLON C_None VBAR
##
## Ends in an error in state: 155.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COLON VBAR
##
## Ends in an error in state: 104.
##
## field_pattern -> Ident COLON . sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA Ident COLON C_None VBAR
##
## Ends in an error in state: 159.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 160.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA WILD
##
## Ends in an error in state: 156.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident WILD
##
## Ends in an error in state: 103.
##
## field_pattern -> Ident . [ RBRACE COMMA ]
## field_pattern -> Ident . COLON sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE WILD
##
## Ends in an error in state: 102.
##
## record_pattern -> LBRACE . sep_or_term_list(field_pattern,COMMA) RBRACE [ RPAR RBRACKET RBRACE EQ COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_None Type
##
## Ends in an error in state: 178.
##
## par(closed_irrefutable) -> LPAR closed_irrefutable . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR closed_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some LBRACKET C_None COMMA C_None COMMA VBAR
##
## Ends in an error in state: 132.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some LBRACKET C_None COMMA C_None VBAR
##
## Ends in an error in state: 131.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some LBRACKET C_None COMMA VBAR
##
## Ends in an error in state: 130.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some LBRACKET C_None VBAR
##
## Ends in an error in state: 129.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some LBRACKET VBAR
##
## Ends in an error in state: 110.
##
## list__(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,COMMA)) RBRACKET [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some LPAR C_None COMMA C_None ARROW
##
## Ends in an error in state: 148.
##
## par(ptuple) -> LPAR ptuple . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR ptuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern
## In state 147, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA)
## In state 141, spurious reduction of production ptuple -> tuple(sub_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some LPAR C_None VBAR
##
## Ends in an error in state: 142.
##
## par(sub_pattern) -> LPAR sub_pattern . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some LPAR VBAR
##
## Ends in an error in state: 109.
##
## par(ptuple) -> LPAR . ptuple RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## par(sub_pattern) -> LPAR . sub_pattern RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## unit -> LPAR . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR C_Some VBAR
##
## Ends in an error in state: 116.
##
## constr_pattern -> C_Some . sub_pattern [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Ident WILD
##
## Ends in an error in state: 174.
##
## closed_irrefutable -> irrefutable . [ RPAR ]
## typed_pattern -> irrefutable . COLON type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production seq(Attr) ->
## In state 113, spurious reduction of production var_pattern -> Ident seq(Attr)
## In state 162, spurious reduction of production sub_irrefutable -> var_pattern
## In state 166, spurious reduction of production irrefutable -> sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Verbatim
##
## Ends in an error in state: 99.
##
## par(closed_irrefutable) -> LPAR . closed_irrefutable RPAR [ RPAR EQ COMMA COLON ]
## unit -> LPAR . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Rec Verbatim
##
## Ends in an error in state: 98.
##
## let_declaration -> seq(Attr) Let Rec . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Verbatim
##
## Ends in an error in state: 96.
##
## let_declaration -> seq(Attr) Let . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## let_declaration -> seq(Attr) Let . Rec let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ Constr DOT WILD
##
## Ends in an error in state: 731.
##
## nsepseq(module_name,DOT) -> Constr DOT . nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ Constr WILD
##
## Ends in an error in state: 720.
##
## declaration -> module_alias . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 730, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 733, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ LBRACE Directive EOF
##
## Ends in an error in state: 722.
##
## module_decl -> Module Constr EQ LBRACE module_ . RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr EQ LBRACE module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 726, spurious reduction of production seq(declaration) ->
## In state 727, spurious reduction of production nseq(declaration) -> declaration seq(declaration)
## In state 717, spurious reduction of production module_ -> nseq(declaration)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ LBRACE Directive RBRACE WILD
##
## Ends in an error in state: 718.
##
## declaration -> module_decl . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr EQ WILD
##
## Ends in an error in state: 89.
##
## module_alias -> Module Constr EQ . nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module Constr EQ . LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr WILD
##
## Ends in an error in state: 88.
##
## module_alias -> Module Constr . EQ nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module Constr . EQ LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module WILD
##
## Ends in an error in state: 87.
##
## module_alias -> Module . Constr EQ nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module . Constr EQ LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: RBRACE
##
## Ends in an error in state: 95.
##
## let_declaration -> seq(Attr) . Let let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## let_declaration -> seq(Attr) . Let Rec let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 0, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr Constr LPAR Ident WILD
##
## Ends in an error in state: 50.
##
## variant -> nseq(Attr) Constr LPAR fun_type . RPAR [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr LPAR fun_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Attr Constr LPAR Verbatim
##
## Ends in an error in state: 49.
##
## variant -> nseq(Attr) Constr LPAR . fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr DOT WILD
##
## Ends in an error in state: 12.
##
## module_access_t -> Constr DOT . module_var_t [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr LPAR Ident WILD
##
## Ends in an error in state: 36.
##
## variant -> Constr LPAR fun_type . RPAR [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr LPAR fun_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr LPAR Verbatim
##
## Ends in an error in state: 35.
##
## variant -> Constr LPAR . fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Constr VBAR WILD
##
## Ends in an error in state: 43.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ES6FUN Constr WILD
##
## Ends in an error in state: 11.
##
## module_access_t -> Constr . DOT module_var_t [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ES6FUN Ident ARROW Verbatim
##
## Ends in an error in state: 21.
##
## fun_type -> ES6FUN cartesian ARROW . fun_type [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN cartesian ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ES6FUN Ident WILD
##
## Ends in an error in state: 20.
##
## fun_type -> ES6FUN cartesian . ARROW fun_type [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN cartesian
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ES6FUN Verbatim
##
## Ends in an error in state: 10.
##
## fun_type -> ES6FUN . cartesian ARROW fun_type [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR Ident COMMA Ident COMMA Verbatim
##
## Ends in an error in state: 31.
##
## nsepseq(fun_type,COMMA) -> fun_type COMMA . nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR Ident COMMA Ident WILD
##
## Ends in an error in state: 30.
##
## nsepseq(fun_type,COMMA) -> fun_type . [ RPAR ]
## nsepseq(fun_type,COMMA) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR Ident COMMA Verbatim
##
## Ends in an error in state: 28.
##
## tuple(fun_type) -> fun_type COMMA . nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR Ident WILD
##
## Ends in an error in state: 27.
##
## tuple(fun_type) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
## type_args -> fun_type . [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident LPAR Verbatim
##
## Ends in an error in state: 9.
##
## par(type_args) -> LPAR . type_args RPAR [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident WILD
##
## Ends in an error in state: 92.
##
## declaration -> type_decl . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 86, spurious reduction of production type_decl -> Type Ident EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COLON Ident WILD
##
## Ends in an error in state: 73.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 65, spurious reduction of production field_decl -> seq(Attr) Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident COMMA Ident COLON Ident WILD
##
## Ends in an error in state: 77.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 23, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
## In state 65, spurious reduction of production field_decl -> seq(Attr) Ident COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE Ident WILD
##
## Ends in an error in state: 63.
##
## field_decl -> seq(Attr) Ident . [ RBRACE COMMA ]
## field_decl -> seq(Attr) Ident . COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LBRACE RBRACE
##
## Ends in an error in state: 62.
##
## field_decl -> seq(Attr) . Ident [ RBRACE COMMA ]
## field_decl -> seq(Attr) . Ident COLON type_expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 61, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COMMA Ident COMMA Verbatim
##
## Ends in an error in state: 84.
##
## nsepseq(cartesian,COMMA) -> cartesian COMMA . nsepseq(cartesian,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## cartesian COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COMMA Ident WILD
##
## Ends in an error in state: 83.
##
## nsepseq(cartesian,COMMA) -> cartesian . [ RPAR ]
## nsepseq(cartesian,COMMA) -> cartesian . COMMA nsepseq(cartesian,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## cartesian
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident COMMA Verbatim
##
## Ends in an error in state: 81.
##
## tuple(cartesian) -> cartesian COMMA . nsepseq(cartesian,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## cartesian COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ LPAR Ident WILD
##
## Ends in an error in state: 53.
##
## par(type_expr) -> LPAR type_expr . RPAR [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production core_type -> Ident
## In state 19, spurious reduction of production cartesian -> core_type
## In state 80, spurious reduction of production fun_type -> cartesian
## In state 68, spurious reduction of production type_expr -> fun_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR Attr WILD
##
## Ends in an error in state: 47.
##
## variant -> nseq(Attr) . Constr [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) . Constr LPAR fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production seq(Attr) ->
## In state 46, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ VBAR WILD
##
## Ends in an error in state: 59.
##
## sum_type -> seq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## seq(Attr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Verbatim
##
## Ends in an error in state: 58.
##
## record_type -> seq(Attr) . LBRACE sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## sum_type -> seq(Attr) . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production seq(Attr) ->
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident WILD
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . EQ type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type WILD
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Ident EQ type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

