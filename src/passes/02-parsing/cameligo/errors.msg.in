contract: Type Ident EQ VBAR Attr With
##
## Ends in an error in state: 57.
##
## variant -> nseq(Attr) . Constr [ VBAR Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
## variant -> nseq(Attr) . Constr Of fun_type [ VBAR Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 55, spurious reduction of production seq(Attr) ->
## In state 56, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

Ill-formed variant.
At this point, if the attributes are complete, a data constructor is
expected.

contract: Type Ident EQ Attr Constr Of With
##
## Ends in an error in state: 59.
##
## variant -> nseq(Attr) Constr Of . fun_type [ VBAR Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr Of
##

Ill-formed variant.
At this point, a type other than a sum type or a record is expected.

interactive_expr: Begin Fun WILD ARROW Bytes SEMI
##
## Ends in an error in state: 611.
##
## sequence -> Begin option(series) . End [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Begin option(series)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 596, spurious reduction of production seq_expr -> disj_expr_level
## In state 545, spurious reduction of production last_expr -> seq_expr
## In state 600, spurious reduction of production fun_expr(last_expr) -> Fun nseq(irrefutable) ARROW last_expr
## In state 595, spurious reduction of production last_expr -> fun_expr(last_expr)
## In state 594, spurious reduction of production series -> last_expr
## In state 610, spurious reduction of production option(series) -> series
##

Ill-formed sequence of expressions.
At this point, if the expression is complete, one of the following is
expected:
  * a semicolon ';' followed by another expression;
  * the keyword 'end' if the sequence is complete.

interactive_expr: Begin If Verbatim Then Verbatim Else With
##
## Ends in an error in state: 581.
##
## if_then_else(seq_expr) -> If expr Then closed_if Else . seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if Else
##

Ill-formed conditional expression.
At this point, the expression of the 'else' branch is expected.

interactive_expr: Begin Match Verbatim With WILD ARROW Fun WILD ARROW With
##
## Ends in an error in state: 546.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding In base_cond [ VBAR ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding In base_cond [ VBAR ]
## let_in_sequence -> seq(Attr) . Let let_binding In series [ End ]
## let_in_sequence -> seq(Attr) . Let Rec let_binding In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 543, spurious reduction of production seq(Attr) ->
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW With
##
## Ends in an error in state: 477.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(base_if_then_else) -> seq(Attr) . Let let_binding In base_if_then_else [ Else ]
## let_expr(base_if_then_else) -> seq(Attr) . Let Rec let_binding In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 404, spurious reduction of production seq(Attr) ->
##
interactive_expr: Begin With
##
## Ends in an error in state: 587.
##
## let_in_sequence -> seq(Attr) . Let let_binding In series [ End ]
## let_in_sequence -> seq(Attr) . Let Rec let_binding In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 188, spurious reduction of production seq(Attr) ->
##
interactive_expr: Begin If Verbatim Then With
##
## Ends in an error in state: 566.
##
## let_expr(closed_if) -> seq(Attr) . Let let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) . Let Rec let_binding In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 556, spurious reduction of production seq(Attr) ->
##
interactive_expr: If Verbatim Then With
##
## Ends in an error in state: 631.
##
## let_expr(closed_if) -> seq(Attr) . Let let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) . Let Rec let_binding In closed_if [ Else ]
## let_expr(expr) -> seq(Attr) . Let let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(expr) -> seq(Attr) . Let Rec let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 616, spurious reduction of production seq(Attr) ->
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then With
##
## Ends in an error in state: 417.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(closed_if) -> seq(Attr) . Let let_binding In closed_if [ Else ]
## let_expr(closed_if) -> seq(Attr) . Let Rec let_binding In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 520, spurious reduction of production seq(Attr) ->
##
interactive_expr: Match Verbatim With WILD ARROW Let WILD EQ Bytes In With
##
## Ends in an error in state: 526.
##
## let_expr(base_cond) -> seq(Attr) . Let let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(base_cond) -> seq(Attr) . Let Rec let_binding In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 537, spurious reduction of production seq(Attr) ->
##
interactive_expr: With
##
## Ends in an error in state: 209.
##
## let_expr(expr) -> seq(Attr) . Let let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(expr) -> seq(Attr) . Let Rec let_binding In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 728, spurious reduction of production seq(Attr) ->
##
contract: With
##
## Ends in an error in state: 101.
##
## let_declaration -> seq(Attr) . Let let_binding [ Type Module Let End EOF Directive Attr ]
## let_declaration -> seq(Attr) . Let Rec let_binding [ Type Module Let End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 0, spurious reduction of production seq(Attr) ->
##

Ill-formed value declaration.
At this point, if the attributes (if any) are complete, the keyword
'let' is expected.

interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then If Verbatim Then Verbatim WILD
##
## Ends in an error in state: 464.
##
## if_then_else(base_cond) -> If expr Then closed_if . Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(closed_if) -> If expr Then closed_if . Else closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 440, spurious reduction of production base_expr(closed_if) -> disj_expr_level
## In state 444, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 443, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: Begin If Verbatim Then If Verbatim Then Verbatim COMMA Bytes With
##
## Ends in an error in state: 578.
##
## if_then_else(closed_if) -> If expr Then closed_if . Else closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 287, spurious reduction of production nsepseq(disj_expr_level,COMMA) -> disj_expr_level
## In state 286, spurious reduction of production tuple(disj_expr_level) -> disj_expr_level COMMA nsepseq(disj_expr_level,COMMA)
## In state 208, spurious reduction of production tuple_expr -> tuple(disj_expr_level)
## In state 565, spurious reduction of production base_expr(closed_if) -> tuple_expr
## In state 444, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 443, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: Begin If Verbatim Then Verbatim With
##
## Ends in an error in state: 580.
##
## if_then_else(seq_expr) -> If expr Then closed_if . Else seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 575, spurious reduction of production base_expr(closed_if) -> disj_expr_level
## In state 444, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 443, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW If Verbatim Then Verbatim WILD
##
## Ends in an error in state: 469.
##
## if_then_else(base_cond) -> If expr Then closed_if . Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(base_if_then_else) -> If expr Then closed_if . Else base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 440, spurious reduction of production base_expr(closed_if) -> disj_expr_level
## In state 444, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 443, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: Begin Match Verbatim With WILD ARROW If Verbatim Then Verbatim WILD
##
## Ends in an error in state: 513.
##
## if_then_else(base_cond) -> If expr Then closed_if . Else base_cond [ VBAR ]
## if_then_else(seq_expr) -> If expr Then closed_if . Else seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 440, spurious reduction of production base_expr(closed_if) -> disj_expr_level
## In state 444, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 443, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Verbatim WILD
##
## Ends in an error in state: 521.
##
## if_then_else(base_cond) -> If expr Then closed_if . Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 440, spurious reduction of production base_expr(closed_if) -> disj_expr_level
## In state 444, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 443, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: If Verbatim Then If Verbatim Then Verbatim WILD
##
## Ends in an error in state: 644.
##
## if_then_else(closed_if) -> If expr Then closed_if . Else closed_if [ Else ]
## if_then_else(expr) -> If expr Then closed_if . Else expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 640, spurious reduction of production base_expr(closed_if) -> disj_expr_level
## In state 444, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 443, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##
interactive_expr: If Verbatim Then Verbatim WILD
##
## Ends in an error in state: 647.
##
## if_then_else(expr) -> If expr Then closed_if . Else expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr Then closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 640, spurious reduction of production base_expr(closed_if) -> disj_expr_level
## In state 444, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr(closed_if)
## In state 443, spurious reduction of production closed_if -> base_if_then_else__open(closed_if)
##

Ill-formed complete conditional expression.
At this point, if the expression of the branch 'then' is complete, the
keyword 'else' is expected, followed by an expression.

interactive_expr: Begin If Verbatim Then If Verbatim With
##
## Ends in an error in state: 558.
##
## if_then_else(closed_if) -> If expr . Then closed_if Else closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Begin If Verbatim With
##
## Ends in an error in state: 555.
##
## if_then_else(seq_expr) -> If expr . Then closed_if Else seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Begin Match Verbatim With WILD ARROW If Verbatim With
##
## Ends in an error in state: 397.
##
## if_then(base_cond) -> If expr . Then base_cond [ VBAR ]
## if_then_else(base_cond) -> If expr . Then closed_if Else base_cond [ VBAR ]
## if_then_else(seq_expr) -> If expr . Then closed_if Else seq_expr [ SEMI End ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: If Verbatim Then If Verbatim With
##
## Ends in an error in state: 623.
##
## if_then(expr) -> If expr . Then expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(closed_if) -> If expr . Then closed_if Else closed_if [ Else ]
## if_then_else(expr) -> If expr . Then closed_if Else expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW If Verbatim With
##
## Ends in an error in state: 406.
##
## if_then(base_cond) -> If expr . Then base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(base_cond) -> If expr . Then closed_if Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(base_if_then_else) -> If expr . Then closed_if Else base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: If Verbatim With
##
## Ends in an error in state: 615.
##
## if_then(expr) -> If expr . Then expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(expr) -> If expr . Then closed_if Else expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then If Verbatim With
##
## Ends in an error in state: 409.
##
## if_then(base_cond) -> If expr . Then base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(base_cond) -> If expr . Then closed_if Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(closed_if) -> If expr . Then closed_if Else closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim With
##
## Ends in an error in state: 519.
##
## if_then(base_cond) -> If expr . Then base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## if_then_else(base_cond) -> If expr . Then closed_if Else base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed conditional expression.
At this point, if the condition is complete, the keyword 'then' is
expected, followed by an expression.

interactive_expr: Begin If Verbatim Then Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 569.
##
## let_expr(closed_if) -> seq(Attr) Let Rec let_binding . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 590.
##
## let_in_sequence -> seq(Attr) Let Rec let_binding . In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin Match Verbatim With WILD ARROW Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 549.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . In base_cond [ VBAR ]
## let_in_sequence -> seq(Attr) Let Rec let_binding . In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: If Verbatim Then Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 634.
##
## let_expr(closed_if) -> seq(Attr) Let Rec let_binding . In closed_if [ Else ]
## let_expr(expr) -> seq(Attr) Let Rec let_binding . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 480.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(base_if_then_else) -> seq(Attr) Let Rec let_binding . In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 212.
##
## let_expr(expr) -> seq(Attr) Let Rec let_binding . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 420.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(closed_if) -> seq(Attr) Let Rec let_binding . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Match Verbatim With WILD ARROW Let Rec WILD EQ Bytes With
##
## Ends in an error in state: 529.
##
## let_expr(base_cond) -> seq(Attr) Let Rec let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin If Verbatim Then Let WILD EQ Bytes With
##
## Ends in an error in state: 576.
##
## let_expr(closed_if) -> seq(Attr) Let let_binding . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin Let WILD EQ Bytes With
##
## Ends in an error in state: 597.
##
## let_in_sequence -> seq(Attr) Let let_binding . In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Begin Match Verbatim With WILD ARROW Let WILD EQ Bytes With
##
## Ends in an error in state: 602.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . In base_cond [ VBAR ]
## let_in_sequence -> seq(Attr) Let let_binding . In series [ End ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Let WILD EQ Bytes With
##
## Ends in an error in state: 498.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(base_if_then_else) -> seq(Attr) Let let_binding . In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: If Verbatim Then Let WILD EQ Bytes With
##
## Ends in an error in state: 641.
##
## let_expr(closed_if) -> seq(Attr) Let let_binding . In closed_if [ Else ]
## let_expr(expr) -> seq(Attr) Let let_binding . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Let WILD EQ Bytes With
##
## Ends in an error in state: 324.
##
## let_expr(expr) -> seq(Attr) Let let_binding . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Let WILD EQ Bytes With
##
## Ends in an error in state: 452.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## let_expr(closed_if) -> seq(Attr) Let let_binding . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##
interactive_expr: Match Verbatim With WILD ARROW Let WILD EQ Bytes With
##
## Ends in an error in state: 536.
##
## let_expr(base_cond) -> seq(Attr) Let let_binding . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 709, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

Ill-formed value declaration.
At this point, if the right-hand side of the declaration is a complete
expression, the keyword 'in' is expected, followed by an expression.

interactive_expr: Let With
##
## Ends in an error in state: 113.
##
## def_var -> seq(Attr) . Ident [ WILD SEMI RPAR RBRACKET RBRACE LPAR LBRACE Ident EQ Constr CONS COMMA COLON Attr ARROW ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 210, spurious reduction of production seq(Attr) ->
##

Ill-formed pattern.
At this point, if the attributes (if any) are complete, an identifier
is expected.

interactive_expr: Begin If Verbatim Then Match Verbatim Type
##
## Ends in an error in state: 400.
##
## match_expr(base_if_then_else) -> Match expr . With option(VBAR) cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Begin Match Verbatim Type
##
## Ends in an error in state: 328.
##
## match_expr(last_expr) -> Match expr . With option(VBAR) cases(last_expr) [ End ]
##
## The known suffix of the stack is as follows:
## Match expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: Match Verbatim Type
##
## Ends in an error in state: 699.
##
## match_expr(base_cond) -> Match expr . With option(VBAR) cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## Match expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: If Verbatim Then Match Verbatim Type
##
## Ends in an error in state: 618.
##
## match_expr(base_cond) -> Match expr . With option(VBAR) cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## match_expr(base_if_then_else) -> Match expr . With option(VBAR) cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed pattern matching.
At this point, if the expression (whose value is matched) is complete,
then the keyword 'with' is expected, followed by matching cases.

interactive_expr: Begin Match Verbatim With WILD ARROW Verbatim With
##
## Ends in an error in state: 606.
##
## cases(base_cond) -> cases(base_cond) . VBAR case_clause(base_cond) [ VBAR ]
## cases(last_expr) -> cases(base_cond) . VBAR case_clause(last_expr) [ End ]
##
## The known suffix of the stack is as follows:
## cases(base_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 540, spurious reduction of production base_expr(base_cond) -> disj_expr_level
## In state 445, spurious reduction of production base_cond__open(base_cond) -> base_expr(base_cond)
## In state 446, spurious reduction of production base_cond -> base_cond__open(base_cond)
## In state 505, spurious reduction of production case_clause(base_cond) -> pattern ARROW base_cond
## In state 512, spurious reduction of production cases(base_cond) -> case_clause(base_cond)
##
interactive_expr: Begin If Verbatim Then Match Verbatim With WILD ARROW Bytes With
##
## Ends in an error in state: 507.
##
## cases(base_cond) -> cases(base_cond) . VBAR case_clause(base_cond) [ VBAR ]
## cases(base_if_then_else) -> cases(base_cond) . VBAR case_clause(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## cases(base_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 492, spurious reduction of production base_expr(base_cond) -> disj_expr_level
## In state 445, spurious reduction of production base_cond__open(base_cond) -> base_expr(base_cond)
## In state 446, spurious reduction of production base_cond -> base_cond__open(base_cond)
## In state 505, spurious reduction of production case_clause(base_cond) -> pattern ARROW base_cond
## In state 512, spurious reduction of production cases(base_cond) -> case_clause(base_cond)
##

Ill-formed pattern matching.
At this point, if the case is complete, a vertical bar '|' is
expected, followed by another case starting with a pattern.

interactive_expr: Match Verbatim With WILD CONS Bytes SEMI
##
## Ends in an error in state: 702.
##
## case_clause(base_cond) -> pattern . ARROW base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 373, spurious reduction of production cons_pattern_level -> core_pattern
## In state 375, spurious reduction of production cons_pattern_level -> core_pattern CONS cons_pattern_level
## In state 386, spurious reduction of production pattern -> cons_pattern_level
##
interactive_expr: Begin Match Verbatim With WILD RPAR
##
## Ends in an error in state: 394.
##
## case_clause(base_cond) -> pattern . ARROW base_cond [ VBAR ]
## case_clause(last_expr) -> pattern . ARROW last_expr [ End ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 373, spurious reduction of production cons_pattern_level -> core_pattern
## In state 386, spurious reduction of production pattern -> cons_pattern_level
##
interactive_expr: If Verbatim Then Match Verbatim With WILD RPAR
##
## Ends in an error in state: 403.
##
## case_clause(base_cond) -> pattern . ARROW base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## case_clause(base_if_then_else) -> pattern . ARROW base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 373, spurious reduction of production cons_pattern_level -> core_pattern
## In state 386, spurious reduction of production pattern -> cons_pattern_level
##

Ill-formed pattern matching.
At this point, if the pattern is complete, an arrow '->' is expected,
followed by the right-hand side of the case as an expression.

interactive_expr: Begin If Verbatim Then Match Verbatim With With
##
## Ends in an error in state: 401.
##
## match_expr(base_if_then_else) -> Match expr With . option(VBAR) cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr With
##
interactive_expr: Begin Match Verbatim With With
##
## Ends in an error in state: 329.
##
## match_expr(last_expr) -> Match expr With . option(VBAR) cases(last_expr) [ End ]
##
## The known suffix of the stack is as follows:
## Match expr With
##
interactive_expr: If Verbatim Then Match Verbatim With With
##
## Ends in an error in state: 619.
##
## match_expr(base_cond) -> Match expr With . option(VBAR) cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## match_expr(base_if_then_else) -> Match expr With . option(VBAR) cases(base_if_then_else) [ Else ]
##
## The known suffix of the stack is as follows:
## Match expr With
##
interactive_expr: Match Verbatim With With
##
## Ends in an error in state: 700.
##
## match_expr(base_cond) -> Match expr With . option(VBAR) cases(base_cond) [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## Match expr With
##

Ill-formed pattern matching.
At this point, a case is expected to start with a pattern.

interactive_expr: Begin Verbatim With
##
## Ends in an error in state: 552.
##
## last_expr -> seq_expr . [ End ]
## series -> seq_expr . SEMI series [ End ]
##
## The known suffix of the stack is as follows:
## seq_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 596, spurious reduction of production seq_expr -> disj_expr_level
##

Ill-formed sequence of expressions.
At this point, if the expression is complete, one of the following is
expected:
  * a semicolon ';' followed by another expression;
  * the keyword 'end' if the sequence is complete.

interactive_expr: C_Some With
##
## Ends in an error in state: 190.
##
## constr_expr -> C_Some . argument [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Module Mod MINUS Let LT LE In GT GE End Else EQ EOF Directive CONS COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## C_Some
##

Ill-formed application to the predefined data constructor 'Some'.
At this point, its argument is expected as an expression.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the complete argument.

interactive_expr: Constr DOT With
##
## Ends in an error in state: 178.
##
## module_access_e -> Constr DOT . module_var_e [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed selection of a value from a module.
At this point, the qualified name of a value is expected.

contract: Type Ident EQ Constr DOT With
##
## Ends in an error in state: 27.
##
## module_access_t -> Constr DOT . module_var_t [ VBAR Type TIMES SEMI RPAR RBRACE Module Let In Ident End EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed selection of a type in a module.
At this point, the qualified name of a type is expected.

interactive_expr: Constr DOT Ident DOT With
##
## Ends in an error in state: 166.
##
## projection -> Ident DOT . nsepseq(selection,DOT) [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Ident DOT
##
interactive_expr: Ident DOT Int DOT With
##
## Ends in an error in state: 170.
##
## nsepseq(selection,DOT) -> selection DOT . nsepseq(selection,DOT) [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## selection DOT
##

Ill-formed selection in a record or a tuple.
At this point, one of the following is expected:
  * the name of a record field;
  * the index of a component in a tuple, '0' denoting the first
    component.

interactive_expr: LBRACE Ident DOT Ident Verbatim
##
## Ends in an error in state: 653.
##
## update_record -> LBRACE path . With sep_or_term_list(field_path_assignment,SEMI) RBRACE [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 169, spurious reduction of production nsepseq(selection,DOT) -> selection
## In state 172, spurious reduction of production projection -> Ident DOT nsepseq(selection,DOT)
## In state 652, spurious reduction of production path -> projection
##

Ill-formed record update.
At this point, if the record is fully qualified, then the keyword
'with' is expected, followed by field updates (assignments) separated
by semicolons ';'.

interactive_expr: LBRACE Ident EQ Bytes SEMI Ident EQ Bytes SEMI With
##
## Ends in an error in state: 678.
##
## nsepseq(field_assignment,SEMI) -> field_assignment SEMI . nsepseq(field_assignment,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_assignment,SEMI)) -> field_assignment SEMI . seq(__anonymous_0(field_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment SEMI
##
interactive_expr: LBRACE Ident EQ Bytes SEMI With
##
## Ends in an error in state: 673.
##
## nsepseq(field_assignment,SEMI) -> field_assignment SEMI . nsepseq(field_assignment,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_assignment,SEMI)) -> field_assignment SEMI . seq(__anonymous_0(field_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment SEMI
##

Ill-formed record expression.
At this point, one of the following is expected:
  * more field assignments separated by semicolons ';';
  * a closing brace '}' if the record is complete.

interactive_expr: LBRACE Ident EQ Bytes SEMI Ident EQ Bytes With
##
## Ends in an error in state: 677.
##
## nsepseq(field_assignment,SEMI) -> field_assignment . [ RBRACE ]
## nsepseq(field_assignment,SEMI) -> field_assignment . SEMI nsepseq(field_assignment,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_assignment,SEMI)) -> field_assignment . SEMI seq(__anonymous_0(field_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 649, spurious reduction of production field_assignment -> Ident EQ expr
##
interactive_expr: LBRACE Ident EQ Bytes With
##
## Ends in an error in state: 672.
##
## nsepseq(field_assignment,SEMI) -> field_assignment . [ RBRACE ]
## nsepseq(field_assignment,SEMI) -> field_assignment . SEMI nsepseq(field_assignment,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_assignment,SEMI)) -> field_assignment . SEMI seq(__anonymous_0(field_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 649, spurious reduction of production field_assignment -> Ident EQ expr
##

Ill-formed record expression.
At this point, if the expression assigned to the field is complete,
one of the following is expected:
  * a semicolon ';' followed by another field assignment;
  * a closing brace '}' if the record is complete.

interactive_expr: LBRACE Ident With Ident EQ Bytes SEMI Ident EQ Bytes With
##
## Ends in an error in state: 667.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . SEMI nsepseq(field_path_assignment,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment . SEMI seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 660, spurious reduction of production field_path_assignment -> path EQ expr
##
interactive_expr: LBRACE Ident With Ident EQ Bytes With
##
## Ends in an error in state: 663.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . SEMI nsepseq(field_path_assignment,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment . SEMI seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
## In state 660, spurious reduction of production field_path_assignment -> path EQ expr
##

Ill-formed record update.
At this point, if the expression assigned to the field (update) is
complete, one of the following is expected:
  * a semicolon ';' followed by another field assignment;
  * a closing brace '}' if the update is complete.

interactive_expr: LBRACE Ident EQ Bytes SEMI Ident With
##
## Ends in an error in state: 674.
##
## field_assignment -> Ident . EQ expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed assignment to a field in a record.
At this point, the assignment operator '=' is expected, followed by an
expression.

interactive_expr: LBRACE Ident WILD
##
## Ends in an error in state: 161.
##
## field_assignment -> Ident . EQ expr [ SEMI RBRACE ]
## path -> Ident . [ With ]
## projection -> Ident . DOT nsepseq(selection,DOT) [ With ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record expression or record update.
At this point, one of the following is expected:
  * the keyword 'with' followed by field updates (assignments);
  * the selection operator '.' if the record to update is not fully
    qualified;
  * the assignment operator '=' followed by an expression, if defining
    a record (as opposed to a record update.)

interactive_expr: LBRACE Ident With Ident DOT Ident With
##
## Ends in an error in state: 658.
##
## field_path_assignment -> path . EQ expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 169, spurious reduction of production nsepseq(selection,DOT) -> selection
## In state 172, spurious reduction of production projection -> Ident DOT nsepseq(selection,DOT)
## In state 652, spurious reduction of production path -> projection
##

Ill-formed record update.
At this point, the assignment operator '=' is expected, followed by an
expression (update).

interactive_expr: LBRACE Ident With Ident EQ Bytes SEMI Ident EQ Bytes SEMI With
##
## Ends in an error in state: 668.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment SEMI . nsepseq(field_path_assignment,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment SEMI . seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment SEMI
##
interactive_expr: LBRACE Ident With Ident EQ Bytes SEMI With
##
## Ends in an error in state: 664.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment SEMI . nsepseq(field_path_assignment,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment SEMI . seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment SEMI
##

Ill-formed record update.
At this point, one of the following is expected:
  * more field assignments (updates) separated by semicolons ';';
  * a closing brace '}' if the update is complete.

interactive_expr: LBRACE Ident With Ident With
##
## Ends in an error in state: 655.
##
## path -> Ident . [ EQ ]
## projection -> Ident . DOT nsepseq(selection,DOT) [ EQ ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record update.
At this point, one of the following is expected:
  * the assignment operator '=' if the field to update is fully
    qualified;
  * the selection operator '.' to further qualify the field to update.

interactive_expr: LBRACE Ident With With
##
## Ends in an error in state: 654.
##
## update_record -> LBRACE path With . sep_or_term_list(field_path_assignment,SEMI) RBRACE [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE path With
##

Ill-formed record update.
At this point, assignments to fields (updates) are expected, separated
by semicolons ';' and each starting with fully qualified field names.

interactive_expr: LBRACE With
##
## Ends in an error in state: 160.
##
## record_expr -> LBRACE . sep_or_term_list(field_assignment,SEMI) RBRACE [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
## update_record -> LBRACE . path With sep_or_term_list(field_path_assignment,SEMI) RBRACE [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record expression or update.
At this point, one of the following is expected:
  * field assignments separated by semicolons ';', if defining a record;
  * the qualified name of the record to update.

interactive_expr: LBRACKET Verbatim SEMI Verbatim With
##
## Ends in an error in state: 689.
##
## nsepseq(expr,SEMI) -> expr . [ RBRACKET ]
## nsepseq(expr,SEMI) -> expr . SEMI nsepseq(expr,SEMI) [ RBRACKET ]
## seq(__anonymous_0(expr,SEMI)) -> expr . SEMI seq(__anonymous_0(expr,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##
interactive_expr: LBRACKET Verbatim With
##
## Ends in an error in state: 685.
##
## nsepseq(expr,SEMI) -> expr . [ RBRACKET ]
## nsepseq(expr,SEMI) -> expr . SEMI nsepseq(expr,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(expr,SEMI)) -> expr . SEMI seq(__anonymous_0(expr,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed list of expressions.
At this point, if the list element is complete, one of the
following is expected:
  * a semicolon ';' followed by more elements as expressions;
  * a closing bracket ']' if the list is complete.

interactive_expr: LPAR Verbatim COLON Ident VBAR
##
## Ends in an error in state: 696.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production cartesian -> core_type
## In state 45, spurious reduction of production fun_type -> cartesian
## In state 78, spurious reduction of production type_expr -> fun_type
## In state 695, spurious reduction of production annot_expr -> expr COLON type_expr
##

Ill-formed annotated expression.
At this point, if the type annotating the expression is complete, then
a closing parenthesis ')' is expected.

contract: Type Ident EQ With
##
## Ends in an error in state: 68.
##
## record_type -> seq(Attr) . LBRACE sep_or_term_list(field_decl,SEMI) RBRACE [ Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
## sum_type -> seq(Attr) . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 18, spurious reduction of production seq(Attr) ->
##

Ill-formed record type or sum type.
At this point, if the attributes (if any) are complete, one of the
following is expected:
  * an opening brace '{', followed by field declarations,if defining a
    record;
  * a vertical bar '|', followed by variant declarations, if defining
    a sum type.

interactive_expr: LPAR Verbatim With
##
## Ends in an error in state: 692.
##
## annot_expr -> expr . COLON type_expr [ RPAR ]
## par(expr) -> LPAR expr . RPAR [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##

Ill formed expression.
At this point, if the expression is complete, one of the following is
expected:
  * a type annotation starting with a colon ':' and followed by a type
    expression;
  * a closing parenthesis ')'.

interactive_expr: Lang Verbatim With
##
## Ends in an error in state: 706.
##
## code_inj -> Lang expr . RBRACKET [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed code injection.
At this point, a closing bracket ']' is expected.

interactive_expr: MINUS With
##
## Ends in an error in state: 157.
##
## unary_expr_level -> MINUS . call_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Module Mod MINUS Let LT LE In GT GE End Else EQ EOF Directive CONS COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Ill-formed expression.
At this point, an expression is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the negated expression.

interactive_expr: Not With
##
## Ends in an error in state: 152.
##
## unary_expr_level -> Not . call_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Module Mod MINUS Let LT LE In GT GE End Else EQ EOF Directive CONS COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Not
##
interactive_expr: Verbatim BOOL_AND With
##
## Ends in an error in state: 262.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or Module Let In End Else EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##
interactive_expr: Verbatim BOOL_OR With
##
## Ends in an error in state: 293.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or Module Let In End Else EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##
interactive_expr: Verbatim Or With
##
## Ends in an error in state: 243.
##
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level Or . conj_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or Module Let In End Else EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level Or
##

Ill-formed expression.
At this point, a Boolean expression is expected.

interactive_expr: Verbatim CARET With
##
## Ends in an error in state: 245.
##
## bin_op(cons_expr_level,CARET,cat_expr_level) -> cons_expr_level CARET . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE In GT GE End Else EQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## cons_expr_level CARET
##

Ill-formed string expression.
At this point, an expression denoting a string is expected.

interactive_expr: Verbatim COMMA Verbatim COMMA With
##
## Ends in an error in state: 288.
##
## nsepseq(disj_expr_level,COMMA) -> disj_expr_level COMMA . nsepseq(disj_expr_level,COMMA) [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End Else EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level COMMA
##
interactive_expr: Verbatim COMMA With
##
## Ends in an error in state: 285.
##
## tuple(disj_expr_level) -> disj_expr_level COMMA . nsepseq(disj_expr_level,COMMA) [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End Else EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level COMMA
##

Ill-formed tuple of expressions.
At this point, another component is expected as an expression.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Verbatim CONS With
##
## Ends in an error in state: 259.
##
## bin_op(add_expr_level,CONS,cons_expr_level) -> add_expr_level CONS . cons_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE In GT GE End Else EQ EOF Directive COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level CONS
##

Ill-formed list expression.
At this point, an expression of type list is expected.

interactive_expr: Constr DOT Constr With
##
## Ends in an error in state: 181.
##
## module_access_e -> Constr . DOT module_var_e [ With Verbatim VBAR Type True Then TIMES String SLASH SEMI RPAR RBRACKET RBRACE PLUS Or Nat NE Mutez Module Mod MINUS Let Lang LT LPAR LE LBRACKET LBRACE Int In Ident GT GE False End Else EQ EOF Directive Constr C_None CONS COMMA COLON CARET Bytes Begin BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed selection of a value from a module.
At this point, the selection operator '.' is expected, followed by the
qualified name of a value.

interactive_expr: Verbatim EQ With
##
## Ends in an error in state: 274.
##
## bin_op(comp_expr_level,EQ,cat_expr_level) -> comp_expr_level EQ . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE In GT GE End Else EQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQ
##
interactive_expr: Verbatim GE With
##
## Ends in an error in state: 272.
##
## bin_op(comp_expr_level,GE,cat_expr_level) -> comp_expr_level GE . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE In GT GE End Else EQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##
interactive_expr: Verbatim GT With
##
## Ends in an error in state: 270.
##
## bin_op(comp_expr_level,GT,cat_expr_level) -> comp_expr_level GT . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE In GT GE End Else EQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##
interactive_expr: Verbatim LE With
##
## Ends in an error in state: 268.
##
## bin_op(comp_expr_level,LE,cat_expr_level) -> comp_expr_level LE . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE In GT GE End Else EQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##
interactive_expr: Verbatim LT With
##
## Ends in an error in state: 266.
##
## bin_op(comp_expr_level,LT,cat_expr_level) -> comp_expr_level LT . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE In GT GE End Else EQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##
interactive_expr: Verbatim NE With
##
## Ends in an error in state: 264.
##
## bin_op(comp_expr_level,NE,cat_expr_level) -> comp_expr_level NE . cat_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE In GT GE End Else EQ EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

Ill-formed Boolean expression.
At this point, an expression is expected as the righ-hand side of the
comparison.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Verbatim MINUS With
##
## Ends in an error in state: 257.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE PLUS Or NE Module MINUS Let LT LE In GT GE End Else EQ EOF Directive CONS COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##
interactive_expr: Verbatim Mod With
##
## Ends in an error in state: 227.
##
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level Mod . unary_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Module Mod MINUS Let LT LE In GT GE End Else EQ EOF Directive CONS COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Mod
##
interactive_expr: Verbatim PLUS With
##
## Ends in an error in state: 255.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE PLUS Or NE Module MINUS Let LT LE In GT GE End Else EQ EOF Directive CONS COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##
interactive_expr: Verbatim SLASH With
##
## Ends in an error in state: 225.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Module Mod MINUS Let LT LE In GT GE End Else EQ EOF Directive CONS COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##
interactive_expr: Verbatim TIMES With
##
## Ends in an error in state: 215.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ With VBAR Type Then TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Module Mod MINUS Let LT LE In GT GE End Else EQ EOF Directive CONS COMMA COLON CARET BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

Ill-formed arithmetic expression.
At this point, an expression is expected.
Hint: To check your understanding of the syntax, try and add
parentheses around what you think is the expression.

interactive_expr: Ident WILD
##
## Ends in an error in state: 730.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 165, spurious reduction of production core_expr -> Ident
## In state 217, spurious reduction of production call_expr_level -> core_expr
## In state 223, spurious reduction of production unary_expr_level -> call_expr_level
## In state 204, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 214, spurious reduction of production add_expr_level -> mult_expr_level
## In state 254, spurious reduction of production cons_expr_level -> add_expr_level
## In state 244, spurious reduction of production cat_expr_level -> cons_expr_level
## In state 276, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 283, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 290, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 242, spurious reduction of production base_expr(expr) -> disj_expr_level
## In state 296, spurious reduction of production base_cond__open(expr) -> base_expr(expr)
## In state 297, spurious reduction of production expr -> base_cond__open(expr)
##

Ill-formed expression.
At this point, if the expression is complete, the end of file is
expected.

contract: Let Ident WILD COLON String VBAR
##
## Ends in an error in state: 311.
##
## let_binding -> def_var parameters option(type_annotation) . EQ expr [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## def_var parameters option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production cartesian -> core_type
## In state 45, spurious reduction of production fun_type -> cartesian
## In state 78, spurious reduction of production type_expr -> fun_type
## In state 140, spurious reduction of production type_annotation -> COLON type_expr
## In state 146, spurious reduction of production option(type_annotation) -> type_annotation
##
contract: Let Ident LPAR Type Ident RPAR WILD COLON Constr With
##
## Ends in an error in state: 316.
##
## let_binding -> def_var par(type_parameters_list) parameters option(type_annotation) . EQ expr [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## def_var par(type_parameters_list) parameters option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 140, spurious reduction of production type_annotation -> COLON type_expr
## In state 146, spurious reduction of production option(type_annotation) -> type_annotation
##

Ill-formed value declaration.
At this point, if the type annotation (if any) is complete, the
assignment operator '=' is expected, followed by an expression.

contract: Let LBRACE Ident With
##
## Ends in an error in state: 108.
##
## field_pattern(irrefutable) -> Ident . [ SEMI RBRACE ]
## field_pattern(irrefutable) -> Ident . EQ irrefutable [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident
##
interactive_expr: Match Verbatim With LBRACE Ident With
##
## Ends in an error in state: 340.
##
## field_pattern(core_pattern) -> Ident . [ SEMI RBRACE ]
## field_pattern(core_pattern) -> Ident . EQ core_pattern [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record pattern.
At this point, one of the following is expected:
  * the assignment operator '=' followed by the right-hand side as a
    pattern;
  * a semicolon ';' if the field is punned;
  * a closing brace '}' if the record pattern is complete.

contract: Let LBRACE With
##
## Ends in an error in state: 107.
##
## record_pattern(irrefutable) -> LBRACE . sep_or_term_list(field_pattern(irrefutable),SEMI) RBRACE [ WILD SEMI RPAR RBRACE LPAR LBRACE Ident EQ Constr COMMA COLON Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##
interactive_expr: Match Verbatim With LBRACE With
##
## Ends in an error in state: 339.
##
## record_pattern(core_pattern) -> LBRACE . sep_or_term_list(field_pattern(core_pattern),SEMI) RBRACE [ SEMI RPAR RBRACKET RBRACE CONS COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record pattern.
At this point, patterns that match fields are expected, separated by
semicolons ';'.

contract: Let LPAR Constr Constr With
##
## Ends in an error in state: 142.
##
## par(closed_irrefutable) -> LPAR closed_irrefutable . RPAR [ WILD SEMI RPAR RBRACE LPAR LBRACE Ident EQ Constr COMMA COLON Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR closed_irrefutable
##

Ill-formed parenthesised pattern.
At this point, if the pattern is complete, a closing parenthesis ')'
is expected.

contract: Let LPAR WILD WILD
##
## Ends in an error in state: 138.
##
## closed_irrefutable -> irrefutable . type_annotation [ RPAR ]
## closed_irrefutable -> irrefutable . [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 119, spurious reduction of production irrefutable -> core_irrefutable
##

Ill-formed parenthesised pattern.
At this point, if the enclosed pattern is complete, one of the
following is expected:
  * a type annotation, followed by a closing parenthesis ')';
  * a closing parenthesis ')'.

contract: Let WILD COLON Ident VBAR
##
## Ends in an error in state: 147.
##
## let_binding -> irrefutable option(type_annotation) . EQ expr [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production cartesian -> core_type
## In state 45, spurious reduction of production fun_type -> cartesian
## In state 78, spurious reduction of production type_expr -> fun_type
## In state 140, spurious reduction of production type_annotation -> COLON type_expr
## In state 146, spurious reduction of production option(type_annotation) -> type_annotation
##

Ill-formed value declaration.
At this point, if the type annotation (if any) is complete, the
assignment operator '=' is expected, followed by an expression.

contract: Let WILD With
##
## Ends in an error in state: 145.
##
## let_binding -> irrefutable . option(type_annotation) EQ expr [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 119, spurious reduction of production irrefutable -> core_irrefutable
##

Ill-formed value declaration.
At this point, if the pattern is complete, one of the following is
expected:
  * a type annotation for the value being defined;
  * the assignment operator '=' followed by an expression.

contract: Type Ident EQ LBRACE Ident COLON Constr SEMI Ident COLON Ident VBAR
##
## Ends in an error in state: 87.
##
## nsepseq(field_decl,SEMI) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,SEMI) -> field_decl . SEMI nsepseq(field_decl,SEMI) [ RBRACE ]
## seq(__anonymous_0(field_decl,SEMI)) -> field_decl . SEMI seq(__anonymous_0(field_decl,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production cartesian -> core_type
## In state 45, spurious reduction of production fun_type -> cartesian
## In state 78, spurious reduction of production type_expr -> fun_type
## In state 75, spurious reduction of production field_decl -> seq(Attr) Ident COLON type_expr
##
contract: Type Ident EQ LBRACE Ident COLON Ident VBAR
##
## Ends in an error in state: 83.
##
## nsepseq(field_decl,SEMI) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,SEMI) -> field_decl . SEMI nsepseq(field_decl,SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_decl,SEMI)) -> field_decl . SEMI seq(__anonymous_0(field_decl,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production cartesian -> core_type
## In state 45, spurious reduction of production fun_type -> cartesian
## In state 78, spurious reduction of production type_expr -> fun_type
## In state 75, spurious reduction of production field_decl -> seq(Attr) Ident COLON type_expr
##

Ill-formed record type.
At this point, if the type of the field is complete, one of the
following is expected:
  * a semicolon ';' followed by another field declaration;
  * a closing brace '}' if the record type is complete.

contract: Type Ident EQ LBRACE With
##
## Ends in an error in state: 72.
##
## field_decl -> seq(Attr) . Ident COLON type_expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production seq(Attr) ->
##

Ill-formed record type.
At this point, if the attributes (if any) are complete, the name of a
field is expected.

contract: Type Ident EQ LBRACE Ident With
##
## Ends in an error in state: 73.
##
## field_decl -> seq(Attr) Ident . COLON type_expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Ident
##

Ill-formed record type.
At this point, a colon ':' is expected, followed by the type of the
field.

contract: Type Ident EQ LPAR String COMMA String VBAR
##
## Ends in an error in state: 65.
##
## nsepseq(type_expr,COMMA) -> type_expr . [ RPAR ]
## nsepseq(type_expr,COMMA) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production cartesian -> core_type
## In state 45, spurious reduction of production fun_type -> cartesian
## In state 78, spurious reduction of production type_expr -> fun_type
##

Ill-formed application to a type constructor.
At this point, if the argument is complete, one of the
following is expected:
  * a closing parenthesis ')';
  * a comma ',' followed by another type expression, if the argument
    is a tuple of types.

contract: Type Ident EQ LPAR String VBAR
##
## Ends in an error in state: 62.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR Type TIMES SEMI RPAR RBRACE Module Let In Ident End EQ EOF Directive COMMA Attr ARROW ]
## tuple(type_expr) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production cartesian -> core_type
## In state 45, spurious reduction of production fun_type -> cartesian
## In state 78, spurious reduction of production type_expr -> fun_type
##

Ill-formed application to a type constructor.
At this point, if the type argument is complete, a comma ',' is
expected, followed by another type expression.

contract: Type Ident EQ String ARROW With
##
## Ends in an error in state: 46.
##
## fun_type -> cartesian ARROW . fun_type [ VBAR Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
##
## The known suffix of the stack is as follows:
## cartesian ARROW
##

Ill-formed functional type.
At this point, a type other than a sum type or a record is expected.

contract: Type Ident EQ Constr Of With
##
## Ends in an error in state: 25.
##
## variant -> Constr Of . fun_type [ VBAR Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr Of
##

Ill-formed variant of a sum type.
At this point, a type other than a sum type or a record is expected.

contract: Type Ident EQ String TIMES Constr With
##
## Ends in an error in state: 26.
##
## module_access_t -> Constr . DOT module_var_t [ VBAR Type TIMES SEMI RPAR RBRACE Module Let In Ident End EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed selection of a type in a module.
At this point, the selection operator '.' is expected, followed by the
qualified name of a type.

contract: Type Ident EQ String TIMES String TIMES With
##
## Ends in an error in state: 43.
##
## nsepseq(core_type,TIMES) -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##
contract: Type Ident EQ String TIMES With
##
## Ends in an error in state: 40.
##
## cartesian -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##

Ill-formed product type.
At this point, a type expression is expected, except a sum type, a
record type or a product type.

contract: Type Ident EQ VBAR With
##
## Ends in an error in state: 69.
##
## sum_type -> seq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) VBAR
##
contract: Type Ident EQ Constr VBAR With
##
## Ends in an error in state: 53.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let In End EQ EOF Directive COMMA Attr ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

Ill-formed variant of sum type.
At this point, a data constructor is expected.

contract: Type Ident With
##
## Ends in an error in state: 17.
##
## type_decl -> Type option(quoted_type_params) Ident . EQ type_expr [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type option(quoted_type_params) Ident
##

Ill-formed type declaration.
At this point, the assignment operator '=' is expected, followed by a
type expression.

contract: Type With
##
## Ends in an error in state: 1.
##
## type_decl -> Type . option(quoted_type_params) Ident EQ type_expr [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

Ill-formed type declaration.
At this point, one of the following is expected:
  * the name of the type being defined;
  * a series of type parameters, like 'a 'b 'c etc.

interactive_expr: Type Ident EQ Constr With
##
## Ends in an error in state: 205.
##
## local_type_decl(expr) -> type_decl . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 94, spurious reduction of production type_decl -> Type option(quoted_type_params) Ident EQ type_expr
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Type Ident EQ Constr With
##
## Ends in an error in state: 474.
##
## local_type_decl(base_cond) -> type_decl . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## local_type_decl(base_if_then_else) -> type_decl . In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 94, spurious reduction of production type_decl -> Type option(quoted_type_params) Ident EQ type_expr
##
interactive_expr: Begin If Verbatim Then Type Ident EQ Constr With
##
## Ends in an error in state: 563.
##
## local_type_decl(closed_if) -> type_decl . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 94, spurious reduction of production type_decl -> Type option(quoted_type_params) Ident EQ type_expr
##
interactive_expr: If Verbatim Then Type Ident EQ Constr With
##
## Ends in an error in state: 628.
##
## local_type_decl(closed_if) -> type_decl . In closed_if [ Else ]
## local_type_decl(expr) -> type_decl . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 94, spurious reduction of production type_decl -> Type option(quoted_type_params) Ident EQ type_expr
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Type Ident EQ Constr With
##
## Ends in an error in state: 414.
##
## local_type_decl(base_cond) -> type_decl . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## local_type_decl(closed_if) -> type_decl . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 94, spurious reduction of production type_decl -> Type option(quoted_type_params) Ident EQ type_expr
##
interactive_expr: Match Verbatim With WILD ARROW Type Ident EQ Constr With
##
## Ends in an error in state: 523.
##
## local_type_decl(base_cond) -> type_decl . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 94, spurious reduction of production type_decl -> Type option(quoted_type_params) Ident EQ type_expr
##

Ill-formed local type declaration.
At this point, if the type expression is complete, the keyword 'in' is
expected, followed by an expression.

contract: Type Ident EQ Constr End
##
## Ends in an error in state: 725.
##
## contract -> module_ . EOF [ # ]
##
## The known suffix of the stack is as follows:
## module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 94, spurious reduction of production type_decl -> Type option(quoted_type_params) Ident EQ type_expr
## In state 100, spurious reduction of production declaration -> type_decl
## In state 717, spurious reduction of production seq(declaration) ->
## In state 718, spurious reduction of production nseq(declaration) -> declaration seq(declaration)
## In state 711, spurious reduction of production module_ -> nseq(declaration)
##

Ill-formed contract.
At this point, one the following is expected:
  * another top-level declaration;
  * the end of the file.

contract: Module Constr EQ Struct Type Ident EQ Constr EOF
##
## Ends in an error in state: 714.
##
## module_decl -> Module Constr EQ Struct module_ . End [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr EQ Struct module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 94, spurious reduction of production type_decl -> Type option(quoted_type_params) Ident EQ type_expr
## In state 100, spurious reduction of production declaration -> type_decl
## In state 717, spurious reduction of production seq(declaration) ->
## In state 718, spurious reduction of production nseq(declaration) -> declaration seq(declaration)
## In state 711, spurious reduction of production module_ -> nseq(declaration)
##

Ill-formed module declaration.
At this point, if the module declarations are complete, the keyword
'end' is expected.

contract: Module Constr EQ With
##
## Ends in an error in state: 97.
##
## module_alias -> Module Constr EQ . nsepseq(module_name,DOT) [ Type Module Let In End EOF Directive Attr ]
## module_decl -> Module Constr EQ . Struct module_ End [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr EQ
##

Ill-formed module declaration or module alias declaration.
At this point, one of the following is expected:
  * the qualified name of a module being aliased;
  * the keyword 'struct' followed by declarations, if defining a
    module.

contract: Module Constr With
##
## Ends in an error in state: 96.
##
## module_alias -> Module Constr . EQ nsepseq(module_name,DOT) [ Type Module Let In End EOF Directive Attr ]
## module_decl -> Module Constr . EQ Struct module_ End [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr
##

Ill-formed module declaration.
At this point, the definitional equality operator '=' is expected to
introduce either the qualified name of a module being aliased, or a
module structure.

contract: Module With
##
## Ends in an error in state: 95.
##
## module_alias -> Module . Constr EQ nsepseq(module_name,DOT) [ Type Module Let In End EOF Directive Attr ]
## module_decl -> Module . Constr EQ Struct module_ End [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module
##

Ill-formed module declaration.
At this point, the name of the module being declared or aliased is
expected.

interactive_expr: Module Constr EQ Struct Type Ident EQ Constr End With
##
## Ends in an error in state: 229.
##
## local_module_decl(expr) -> module_decl . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Module Constr EQ Struct Type Ident EQ Constr End With
##
## Ends in an error in state: 422.
##
## local_module_decl(base_cond) -> module_decl . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## local_module_decl(closed_if) -> module_decl . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## module_decl
##
interactive_expr: Match Verbatim With WILD ARROW Module Constr EQ Struct Type Ident EQ Constr End With
##
## Ends in an error in state: 531.
##
## local_module_decl(base_cond) -> module_decl . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Module Constr EQ Struct Type Ident EQ Constr End With
##
## Ends in an error in state: 482.
##
## local_module_decl(base_cond) -> module_decl . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## local_module_decl(base_if_then_else) -> module_decl . In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## module_decl
##
interactive_expr: If Verbatim Then Module Constr EQ Struct Type Ident EQ Constr End With
##
## Ends in an error in state: 636.
##
## local_module_decl(closed_if) -> module_decl . In closed_if [ Else ]
## local_module_decl(expr) -> module_decl . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##
interactive_expr: Begin If Verbatim Then Module Constr EQ Struct Type Ident EQ Constr End With
##
## Ends in an error in state: 571.
##
## local_module_decl(closed_if) -> module_decl . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## module_decl
##

Ill-formed local module declaration.
At this point, the keyword 'in' is expected, followed by an
expression.

interactive_expr: Module Constr EQ Constr Type
##
## Ends in an error in state: 231.
##
## local_module_alias(expr) -> module_alias . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 721, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 724, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##
interactive_expr: Match Verbatim With WILD ARROW If Verbatim Then Module Constr EQ Constr Type
##
## Ends in an error in state: 424.
##
## local_module_alias(base_cond) -> module_alias . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## local_module_alias(closed_if) -> module_alias . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 721, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 724, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##
interactive_expr: If Verbatim Then Match Verbatim With WILD ARROW Module Constr EQ Constr Type
##
## Ends in an error in state: 484.
##
## local_module_alias(base_cond) -> module_alias . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
## local_module_alias(base_if_then_else) -> module_alias . In base_if_then_else [ Else ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 721, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 724, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##
interactive_expr: Match Verbatim With WILD ARROW Module Constr EQ Constr Type
##
## Ends in an error in state: 533.
##
## local_module_alias(base_cond) -> module_alias . In base_cond [ With VBAR Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 721, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 724, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##
interactive_expr: Begin If Verbatim Then Module Constr EQ Constr Type
##
## Ends in an error in state: 573.
##
## local_module_alias(closed_if) -> module_alias . In closed_if [ Else ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 721, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 724, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##
interactive_expr: If Verbatim Then Module Constr EQ Constr Type
##
## Ends in an error in state: 638.
##
## local_module_alias(closed_if) -> module_alias . In closed_if [ Else ]
## local_module_alias(expr) -> module_alias . In expr [ With Type Then SEMI RPAR RBRACKET RBRACE Module Let In End EOF Directive COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 721, spurious reduction of production nsepseq(module_name,DOT) -> Constr
## In state 724, spurious reduction of production module_alias -> Module Constr EQ nsepseq(module_name,DOT)
##

Ill-formed local module declaration.
At this point, if the module to be aliased is fully qualified, the
keyword 'in' is expected, follwed by an expression.

contract: Module Constr EQ Constr DOT With
##
## Ends in an error in state: 722.
##
## nsepseq(module_name,DOT) -> Constr DOT . nsepseq(module_name,DOT) [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed module qualification.
At this point, a module name is expected.

contract: Type QUOTE With
##
## Ends in an error in state: 2.
##
## quoted_param -> QUOTE . Ident [ VBAR Type TIMES SEMI RPAR RBRACE Module Let In Ident End EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## QUOTE
##

Ill-formed type parameter.
At this point, an identifier is expected.

contract: Type QUOTE Ident With
##
## Ends in an error in state: 16.
##
## type_decl -> Type option(quoted_type_params) . Ident EQ type_expr [ Type Module Let In End EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type option(quoted_type_params)
##

Ill-formed type declaration.
At this point, if the type parameter is complete, one of the following
is expected:
  * another type parameter;
  * the name of the type being defined.

interactive_expr: Match Verbatim With LBRACE Ident SEMI Ident EQ Bytes With
##
## Ends in an error in state: 365.
##
## nsepseq(field_pattern(core_pattern),SEMI) -> field_pattern(core_pattern) . [ RBRACE ]
## nsepseq(field_pattern(core_pattern),SEMI) -> field_pattern(core_pattern) . SEMI nsepseq(field_pattern(core_pattern),SEMI) [ RBRACE ]
## seq(__anonymous_0(field_pattern(core_pattern),SEMI)) -> field_pattern(core_pattern) . SEMI seq(__anonymous_0(field_pattern(core_pattern),SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(core_pattern)
##
interactive_expr: Fun LBRACE Ident EQ Constr With
##
## Ends in an error in state: 129.
##
## nsepseq(field_pattern(irrefutable),SEMI) -> field_pattern(irrefutable) . [ RBRACE ]
## nsepseq(field_pattern(irrefutable),SEMI) -> field_pattern(irrefutable) . SEMI nsepseq(field_pattern(irrefutable),SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_pattern(irrefutable),SEMI)) -> field_pattern(irrefutable) . SEMI seq(__anonymous_0(field_pattern(irrefutable),SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(irrefutable)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 119, spurious reduction of production irrefutable -> core_irrefutable
## In state 117, spurious reduction of production field_pattern(irrefutable) -> Ident EQ irrefutable
##
interactive_expr: Fun LBRACE Ident SEMI Ident EQ Constr With
##
## Ends in an error in state: 133.
##
## nsepseq(field_pattern(irrefutable),SEMI) -> field_pattern(irrefutable) . [ RBRACE ]
## nsepseq(field_pattern(irrefutable),SEMI) -> field_pattern(irrefutable) . SEMI nsepseq(field_pattern(irrefutable),SEMI) [ RBRACE ]
## seq(__anonymous_0(field_pattern(irrefutable),SEMI)) -> field_pattern(irrefutable) . SEMI seq(__anonymous_0(field_pattern(irrefutable),SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(irrefutable)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 119, spurious reduction of production irrefutable -> core_irrefutable
## In state 117, spurious reduction of production field_pattern(irrefutable) -> Ident EQ irrefutable
##
interactive_expr: Match Verbatim With LBRACE Ident EQ Bytes With
##
## Ends in an error in state: 361.
##
## nsepseq(field_pattern(core_pattern),SEMI) -> field_pattern(core_pattern) . [ RBRACE ]
## nsepseq(field_pattern(core_pattern),SEMI) -> field_pattern(core_pattern) . SEMI nsepseq(field_pattern(core_pattern),SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_pattern(core_pattern),SEMI)) -> field_pattern(core_pattern) . SEMI seq(__anonymous_0(field_pattern(core_pattern),SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(core_pattern)
##

Ill-formed record pattern.
At this point, if the field is complete, one of the following is
expected:
  * a semicolon ';' followed by another record field pattern;
  * a closing brace '}' if the record pattern is complete.

interactive_expr: Fun LBRACE Ident SEMI With
##
## Ends in an error in state: 130.
##
## nsepseq(field_pattern(irrefutable),SEMI) -> field_pattern(irrefutable) SEMI . nsepseq(field_pattern(irrefutable),SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_pattern(irrefutable),SEMI)) -> field_pattern(irrefutable) SEMI . seq(__anonymous_0(field_pattern(irrefutable),SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(irrefutable) SEMI
##
interactive_expr: Fun LBRACE Ident SEMI Ident SEMI With
##
## Ends in an error in state: 134.
##
## nsepseq(field_pattern(irrefutable),SEMI) -> field_pattern(irrefutable) SEMI . nsepseq(field_pattern(irrefutable),SEMI) [ RBRACE ]
## seq(__anonymous_0(field_pattern(irrefutable),SEMI)) -> field_pattern(irrefutable) SEMI . seq(__anonymous_0(field_pattern(irrefutable),SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(irrefutable) SEMI
##
interactive_expr: Match Verbatim With LBRACE Ident SEMI With
##
## Ends in an error in state: 362.
##
## nsepseq(field_pattern(core_pattern),SEMI) -> field_pattern(core_pattern) SEMI . nsepseq(field_pattern(core_pattern),SEMI) [ RBRACE ]
## nseq(__anonymous_0(field_pattern(core_pattern),SEMI)) -> field_pattern(core_pattern) SEMI . seq(__anonymous_0(field_pattern(core_pattern),SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(core_pattern) SEMI
##
interactive_expr: Match Verbatim With LBRACE Ident SEMI Ident SEMI With
##
## Ends in an error in state: 366.
##
## nsepseq(field_pattern(core_pattern),SEMI) -> field_pattern(core_pattern) SEMI . nsepseq(field_pattern(core_pattern),SEMI) [ RBRACE ]
## seq(__anonymous_0(field_pattern(core_pattern),SEMI)) -> field_pattern(core_pattern) SEMI . seq(__anonymous_0(field_pattern(core_pattern),SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(core_pattern) SEMI
##

Ill-formed record pattern.
At this point, if the field pattern is complete, one of the following
is expected:
  * another field pattern;
  * a closing brace '}' if the record pattern is complete.

contract: Let Ident LPAR Type With
##
## Ends in an error in state: 302.
##
## type_parameters_list -> Type . nseq(type_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## Type
##

Ill-formed type parameters.
At this point, a type parameter without a quote is expected.

contract: Let Ident LPAR Type Ident With
##
## Ends in an error in state: 303.
##
## nseq(type_var) -> Ident . seq(type_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## Ident
##
contract: Let Ident LPAR Type Ident Ident With
##
## Ends in an error in state: 304.
##
## seq(type_var) -> Ident . seq(type_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed type parameters.
At this point, one of the following is expected:
  * another type parameter without a quote;
  * a closing parenthesis ')' if no more parameters.

interactive_expr: Match Verbatim With LBRACKET WILD SEMI WILD With
##
## Ends in an error in state: 380.
##
## nsepseq(cons_pattern_level,SEMI) -> cons_pattern_level . [ RBRACKET ]
## nsepseq(cons_pattern_level,SEMI) -> cons_pattern_level . SEMI nsepseq(cons_pattern_level,SEMI) [ RBRACKET ]
## seq(__anonymous_0(cons_pattern_level,SEMI)) -> cons_pattern_level . SEMI seq(__anonymous_0(cons_pattern_level,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## cons_pattern_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 373, spurious reduction of production cons_pattern_level -> core_pattern
##
interactive_expr: Match Verbatim With LBRACKET WILD With
##
## Ends in an error in state: 376.
##
## nsepseq(cons_pattern_level,SEMI) -> cons_pattern_level . [ RBRACKET ]
## nsepseq(cons_pattern_level,SEMI) -> cons_pattern_level . SEMI nsepseq(cons_pattern_level,SEMI) [ RBRACKET ]
## nseq(__anonymous_0(cons_pattern_level,SEMI)) -> cons_pattern_level . SEMI seq(__anonymous_0(cons_pattern_level,SEMI)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## cons_pattern_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 373, spurious reduction of production cons_pattern_level -> core_pattern
##

Ill-formed list pattern.
At this point, if the pattern matching the element is complete, one of
the following is expected:
  * a semicolon ';' followed by another pattern;
  * a closing bracket '}' if the list is complete.

interactive_expr: Match Verbatim With LPAR WILD With
##
## Ends in an error in state: 384.
##
## closed_pattern -> pattern . type_annotation [ RPAR ]
## closed_pattern -> pattern . [ RPAR ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 373, spurious reduction of production cons_pattern_level -> core_pattern
## In state 386, spurious reduction of production pattern -> cons_pattern_level
##

Ill-formed parenthesised pattern.
At this point, if the pattern is complete, one of the following is
expected:
  * a closing parenthesis ')';
  * a type annotation starting with a colon ':'.

interactive_expr: Match Verbatim With LPAR WILD COLON Constr With
##
## Ends in an error in state: 392.
##
## par(closed_pattern) -> LPAR closed_pattern . RPAR [ SEMI RPAR RBRACKET RBRACE CONS COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR closed_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production variant -> Constr
## In state 52, spurious reduction of production nsepseq(variant,VBAR) -> variant
## In state 77, spurious reduction of production sum_type -> nsepseq(variant,VBAR)
## In state 67, spurious reduction of production type_expr -> sum_type
## In state 140, spurious reduction of production type_annotation -> COLON type_expr
## In state 385, spurious reduction of production closed_pattern -> pattern type_annotation
##

Ill-formed parenthesised pattern.
At this point, if the pattern is complete, a closing parenthesis ')'
is expected.

contract: Type LPAR With
##
## Ends in an error in state: 4.
##
## par(tuple(quoted_param)) -> LPAR . tuple(quoted_param) RPAR [ Ident ]
##
## The known suffix of the stack is as follows:
## LPAR
##
contract: Type LPAR QUOTE Ident COMMA QUOTE Ident COMMA With
##
## Ends in an error in state: 10.
##
## nsepseq(quoted_param,COMMA) -> quoted_param COMMA . nsepseq(quoted_param,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## quoted_param COMMA
##
contract: Type LPAR QUOTE Ident COMMA With
##
## Ends in an error in state: 8.
##
## tuple(quoted_param) -> quoted_param COMMA . nsepseq(quoted_param,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## quoted_param COMMA
##

Ill-formed polymorphic type declaration.
At this point, a quoted type parameter is expected, like "'a".

contract: Type LPAR QUOTE Ident With
##
## Ends in an error in state: 7.
##
## tuple(quoted_param) -> quoted_param . COMMA nsepseq(quoted_param,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## quoted_param
##

Ill-formed polymorphic type declaration.
At this point, a comma ',' is expected, followed by a quoted type
parameter, like "'a".

contract: Type LPAR QUOTE Ident COMMA QUOTE Ident With
##
## Ends in an error in state: 9.
##
## nsepseq(quoted_param,COMMA) -> quoted_param . [ RPAR ]
## nsepseq(quoted_param,COMMA) -> quoted_param . COMMA nsepseq(quoted_param,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## quoted_param
##

Ill-formed polymorphic type declaration.
At this point, one of the following is expected:
  * a comma ',' followed by another quoted type parameter, like "'a";
  * a closing parenthesis ')' if there are no more parameters.

interactive_expr: LPAR C_None COLON LPAR Ident COMMA Ident RPAR With
##
## Ends in an error in state: 31.
##
## type_constr_app -> type_constr_arg . Ident [ VBAR Type TIMES SEMI RPAR RBRACE Module Let In Ident End EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## type_constr_arg
##

Ill-formed type expression.
At this point, a type constructor is expected as an identifier.
