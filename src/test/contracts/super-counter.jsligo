type Increment = {
  kind: 'Increment',
  value: int
}
type Decrement = {
  kind: 'Decrement',
  value: int
}

type parameter =
  Increment
| Decrement;

type storage = int;

type return_ = [list <operation>, storage];

let main = ([action, store]: [parameter, storage]) : return_ => {
  let storage: nat = match (action, {
    Increment: (n: nat) => store + n,
    Decrement: (n: nat) => store - n
  });
  return [[] as list <operation>, storage];
};
