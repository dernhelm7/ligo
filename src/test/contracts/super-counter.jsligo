type parameter =
| ["Increment", int]
| ["Decrement", int];

type storage = int;

type return_ = [list <operation>, storage];

let main = ([action, store]: [parameter, storage]) : return_ => {
  let storage: nat = match (action, {
    Increment: (n: nat) => store + n,
    Decrement: (n: nat) => store - n
  });
  return [(List() as list <operation>), storage];
};
