type storage = int;

type Increment = {
  kind: 'increment', 
  value: int
}

type Decrement = {
  kind: 'decrement',
  value: int
}

type parameter =
  Increment
| Decrement;

let add = (a: int, b: int) => a + b;
let sub = (a: int, b: int) => a - b;

let main = ([action, store] : [parameter, storage]) => {
  let store2 = match(action, {
    increment: (value: int) => add (store, value),
    decrement: (value: int) => sub (store, value),
  });
  return [([] as list <operation>), store2];
};

