/* IF YOU CHANGE THIS, CHANGE THE EXAMPLE ON THE FRONT PAGE OF THE WEBSITE */

type storage = int;

/* variant defining pseudo multi-entrypoint actions */

type Increment = {
  kind: 'increment',
  value: int
}

type Decrement = {
  kind: 'decrement',
  value: int
}

type parameter =
| Increment
| Decrement;

let add = ([a,b]: [int, int]): int => a + b;
let sub = ([a,b]: [int, int]): int => a - b;

/* real entrypoint that re-routes the flow based on the parameter provided */

let main = ([p,storage]: [parameter, storage]) => {
  switch (p.kind) {
    case 'increment':
      let storage2 = add ([storage, p.value]);
      return [[] as list <operation>, storage2];
    case 'decrement':
      let storage3 = sub ([storage, p.value]);
      return [[] as list <operation>, storage3];
  }  
};

/* IF YOU CHANGE THIS, CHANGE THE EXAMPLE ON THE FRONT PAGE OF THE WEBSITE */
