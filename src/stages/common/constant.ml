open Types

let bool_name = "bool"
let string_name = "string"
let bytes_name = "bytes"
let int_name = "int"
let operation_name = "operation"
let nat_name = "nat"
let tez_name = "tez"
let unit_name = "unit"
let address_name = "address"
let signature_name = "signature"
let key_name = "key"
let key_hash_name = "key_hash"
let timestamp_name = "timestamp"
let chain_id_name = "chain_id"
let option_name = "option"
let list_name = "list"
let map_name = "map"
let big_map_name = "big_map"
let set_name = "set"
let contract_name = "contract"
let michelson_or_name = "michelson_or"
let michelson_pair_name = "michelson_pair"
let michelson_pair_right_comb_name = "michelson_pair_right_comb"
let michelson_pair_left_comb_name = "michelson_pair_left_comb"
let michelson_or_right_comb_name = "michelson_or_right_comb"
let michelson_or_left_comb_name = "michelson_or_left_comb"
let map_or_big_map_name = "map_or_big_map"
let baker_hash_name = "baker_hash"
let pvss_key_name = "pvss_key"
let sapling_transaction_name = "sapling_transaction"
let sapling_state_name = "sapling_state"
let baker_operation_name = "baker_operation"
let bls12_381_g1_name = "bls12_381_g1"
let bls12_381_g2_name = "bls12_381_g2"
let bls12_381_fr_name = "bls12_381_fr"

let v_bool : type_variable = Var.of_name bool_name
let v_string : type_variable = Var.of_name string_name
let v_bytes : type_variable = Var.of_name bytes_name
let v_int : type_variable = Var.of_name int_name
let v_operation : type_variable = Var.of_name operation_name
let v_nat : type_variable = Var.of_name nat_name
let v_tez : type_variable = Var.of_name tez_name
let v_unit : type_variable = Var.of_name unit_name
let v_address : type_variable = Var.of_name address_name
let v_signature : type_variable = Var.of_name signature_name
let v_key : type_variable = Var.of_name key_name
let v_key_hash : type_variable = Var.of_name key_hash_name
let v_timestamp : type_variable = Var.of_name timestamp_name
let v_chain_id : type_variable = Var.of_name chain_id_name
let v_option : type_variable = Var.of_name option_name
let v_list : type_variable = Var.of_name list_name
let v_map  : type_variable = Var.of_name map_name
let v_big_map  : type_variable = Var.of_name big_map_name
let v_set  : type_variable = Var.of_name set_name
let v_contract  : type_variable = Var.of_name contract_name
let v_michelson_or  : type_variable = Var.of_name michelson_or_name
let v_michelson_pair  : type_variable = Var.of_name michelson_pair_name
let v_michelson_pair_right_comb  : type_variable = Var.of_name michelson_pair_right_comb_name
let v_michelson_pair_left_comb  : type_variable = Var.of_name michelson_pair_left_comb_name
let v_michelson_or_right_comb  : type_variable = Var.of_name michelson_or_right_comb_name
let v_michelson_or_left_comb  : type_variable = Var.of_name michelson_or_left_comb_name
let v_map_or_big_map : type_variable = Var.of_name map_or_big_map_name
let v_baker_hash : type_variable = Var.of_name baker_hash_name
let v_pvss_key : type_variable = Var.of_name pvss_key_name
let v_sapling_trasaction : type_variable = Var.of_name sapling_transaction_name
let v_sapling_state : type_variable = Var.of_name sapling_state_name
let v_baker_operation : type_variable = Var.of_name baker_operation_name
let v_bls12_381_g1 : type_variable = Var.of_name bls12_381_g1_name
let v_bls12_381_g2 : type_variable = Var.of_name bls12_381_g2_name
let v_bls12_381_fr : type_variable = Var.of_name  bls12_381_fr_name


(* TODO : create Value/Type modules ? *)

let ctor_some_name = "Some"
let ctor_none_name = "None"
let concat_name = "concat"
let map_add_name = "map_add"

let add_name = "add"
let sub_name = "sub"
let mult_name = "mult"
let div_name = "div"
let mod_name = "mod"
let neg_name = "neg"
let lt_name = "lt"
let or_name = "or"
let and_name = "and"
let not_name = "not"
let leq_name = "leq"
let gt_name = "gt"
let geq_name = "geq"
let equal_name = "equal"
let neq_name = "neq"
let cons_name = "cons"
let set_mem_name = "set_mem"
let set_add_name = "set_add"
let map_remove_name = "map_remove"
let set_remove_name = "set_remove"
let big_map_literal_name = "big_map_literal"
let map_literal_name = "map_literal"
let set_literal_name = "set_literal"
let set_empty_name = "set_empty"
let map_empty_name = "map_empty"
let big_map_empty_name = "big_map_empty"
let implicit_account_name = "implicit_account_name"
let map_fold_name = "map_fold"
let list_fold_name = "list_fold"
let set_fold_name = "set_fold"
let fold_continue_name = "fold_continue"
let fold_stop_name = "fold_stop"
let fold_while_name = "fold_while"

let _todo_syntaxes_to_var : string -> expression_variable = fun _ ->
  Location.wrap @@ Var.of_name "TODO" (* Call something in primitives *)

let lwrap = Location.wrap ~loc:(Location.generated)
let ev_add : expression_variable = lwrap @@ Var.of_name add_name
let ev_map_literal : expression_variable = lwrap @@ Var.of_name map_literal_name
let ev_big_map_literal : expression_variable = lwrap @@ Var.of_name big_map_literal_name
let ev_set_literal : expression_variable = lwrap @@ Var.of_name set_literal_name
let ev_set_empty : expression_variable = lwrap @@ Var.of_name set_empty_name
let ev_map_empty : expression_variable = lwrap @@ Var.of_name map_empty_name
let ev_big_map_empty : expression_variable = lwrap @@ Var.of_name big_map_empty_name
let ev_implicit_account : expression_variable = lwrap @@ Var.of_name implicit_account_name
let ev_map_fold : expression_variable = lwrap @@ Var.of_name map_fold_name
let ev_list_fold : expression_variable = lwrap @@ Var.of_name list_fold_name
let ev_set_fold : expression_variable = lwrap @@ Var.of_name set_fold_name
let ev_fold_continue : expression_variable = lwrap @@ Var.of_name fold_continue_name
let ev_fold_stop : expression_variable = lwrap @@ Var.of_name fold_stop_name
let ev_fold_while : expression_variable = lwrap @@ Var.of_name fold_while_name